// Generated by gencpp from file kortex_driver/IPv4Information.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_IPV4INFORMATION_H
#define KORTEX_DRIVER_MESSAGE_IPV4INFORMATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct IPv4Information_
{
  typedef IPv4Information_<ContainerAllocator> Type;

  IPv4Information_()
    : ip_address(0)
    , subnet_mask(0)
    , default_gateway(0)  {
    }
  IPv4Information_(const ContainerAllocator& _alloc)
    : ip_address(0)
    , subnet_mask(0)
    , default_gateway(0)  {
  (void)_alloc;
    }



   typedef uint32_t _ip_address_type;
  _ip_address_type ip_address;

   typedef uint32_t _subnet_mask_type;
  _subnet_mask_type subnet_mask;

   typedef uint32_t _default_gateway_type;
  _default_gateway_type default_gateway;





  typedef boost::shared_ptr< ::kortex_driver::IPv4Information_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::IPv4Information_<ContainerAllocator> const> ConstPtr;

}; // struct IPv4Information_

typedef ::kortex_driver::IPv4Information_<std::allocator<void> > IPv4Information;

typedef boost::shared_ptr< ::kortex_driver::IPv4Information > IPv4InformationPtr;
typedef boost::shared_ptr< ::kortex_driver::IPv4Information const> IPv4InformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::IPv4Information_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::IPv4Information_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::IPv4Information_<ContainerAllocator1> & lhs, const ::kortex_driver::IPv4Information_<ContainerAllocator2> & rhs)
{
  return lhs.ip_address == rhs.ip_address &&
    lhs.subnet_mask == rhs.subnet_mask &&
    lhs.default_gateway == rhs.default_gateway;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::IPv4Information_<ContainerAllocator1> & lhs, const ::kortex_driver::IPv4Information_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::IPv4Information_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::IPv4Information_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::IPv4Information_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::IPv4Information_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::IPv4Information_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::IPv4Information_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::IPv4Information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8070c0574c2b6ebcf5c917ce0b71133c";
  }

  static const char* value(const ::kortex_driver::IPv4Information_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8070c0574c2b6ebcULL;
  static const uint64_t static_value2 = 0xf5c917ce0b71133cULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::IPv4Information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/IPv4Information";
  }

  static const char* value(const ::kortex_driver::IPv4Information_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::IPv4Information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 ip_address\n"
"uint32 subnet_mask\n"
"uint32 default_gateway\n"
;
  }

  static const char* value(const ::kortex_driver::IPv4Information_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::IPv4Information_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ip_address);
      stream.next(m.subnet_mask);
      stream.next(m.default_gateway);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IPv4Information_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::IPv4Information_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::IPv4Information_<ContainerAllocator>& v)
  {
    s << indent << "ip_address: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ip_address);
    s << indent << "subnet_mask: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.subnet_mask);
    s << indent << "default_gateway: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.default_gateway);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_IPV4INFORMATION_H
