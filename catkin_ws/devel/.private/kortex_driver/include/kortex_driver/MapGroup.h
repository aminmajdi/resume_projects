// Generated by gencpp from file kortex_driver/MapGroup.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_MAPGROUP_H
#define KORTEX_DRIVER_MESSAGE_MAPGROUP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/MapGroupHandle.h>
#include <kortex_driver/MappingHandle.h>
#include <kortex_driver/MapGroupHandle.h>
#include <kortex_driver/MapGroupHandle.h>
#include <kortex_driver/MapHandle.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct MapGroup_
{
  typedef MapGroup_<ContainerAllocator> Type;

  MapGroup_()
    : group_handle()
    , name()
    , related_mapping_handle()
    , parent_group_handle()
    , children_map_group_handles()
    , map_handles()
    , application_data()  {
    }
  MapGroup_(const ContainerAllocator& _alloc)
    : group_handle(_alloc)
    , name(_alloc)
    , related_mapping_handle(_alloc)
    , parent_group_handle(_alloc)
    , children_map_group_handles(_alloc)
    , map_handles(_alloc)
    , application_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kortex_driver::MapGroupHandle_<ContainerAllocator>  _group_handle_type;
  _group_handle_type group_handle;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef  ::kortex_driver::MappingHandle_<ContainerAllocator>  _related_mapping_handle_type;
  _related_mapping_handle_type related_mapping_handle;

   typedef  ::kortex_driver::MapGroupHandle_<ContainerAllocator>  _parent_group_handle_type;
  _parent_group_handle_type parent_group_handle;

   typedef std::vector< ::kortex_driver::MapGroupHandle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::MapGroupHandle_<ContainerAllocator> >::other >  _children_map_group_handles_type;
  _children_map_group_handles_type children_map_group_handles;

   typedef std::vector< ::kortex_driver::MapHandle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::MapHandle_<ContainerAllocator> >::other >  _map_handles_type;
  _map_handles_type map_handles;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _application_data_type;
  _application_data_type application_data;





  typedef boost::shared_ptr< ::kortex_driver::MapGroup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::MapGroup_<ContainerAllocator> const> ConstPtr;

}; // struct MapGroup_

typedef ::kortex_driver::MapGroup_<std::allocator<void> > MapGroup;

typedef boost::shared_ptr< ::kortex_driver::MapGroup > MapGroupPtr;
typedef boost::shared_ptr< ::kortex_driver::MapGroup const> MapGroupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::MapGroup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::MapGroup_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::MapGroup_<ContainerAllocator1> & lhs, const ::kortex_driver::MapGroup_<ContainerAllocator2> & rhs)
{
  return lhs.group_handle == rhs.group_handle &&
    lhs.name == rhs.name &&
    lhs.related_mapping_handle == rhs.related_mapping_handle &&
    lhs.parent_group_handle == rhs.parent_group_handle &&
    lhs.children_map_group_handles == rhs.children_map_group_handles &&
    lhs.map_handles == rhs.map_handles &&
    lhs.application_data == rhs.application_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::MapGroup_<ContainerAllocator1> & lhs, const ::kortex_driver::MapGroup_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::MapGroup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::MapGroup_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::MapGroup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::MapGroup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::MapGroup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::MapGroup_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::MapGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f19116dedc7aefc01a2fc92e64e79046";
  }

  static const char* value(const ::kortex_driver::MapGroup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf19116dedc7aefc0ULL;
  static const uint64_t static_value2 = 0x1a2fc92e64e79046ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::MapGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/MapGroup";
  }

  static const char* value(const ::kortex_driver::MapGroup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::MapGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"MapGroupHandle group_handle\n"
"string name\n"
"MappingHandle related_mapping_handle\n"
"MapGroupHandle parent_group_handle\n"
"MapGroupHandle[] children_map_group_handles\n"
"MapHandle[] map_handles\n"
"string application_data\n"
"================================================================================\n"
"MSG: kortex_driver/MapGroupHandle\n"
"\n"
"uint32 identifier\n"
"uint32 permission\n"
"================================================================================\n"
"MSG: kortex_driver/MappingHandle\n"
"\n"
"uint32 identifier\n"
"uint32 permission\n"
"================================================================================\n"
"MSG: kortex_driver/MapHandle\n"
"\n"
"uint32 identifier\n"
"uint32 permission\n"
;
  }

  static const char* value(const ::kortex_driver::MapGroup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::MapGroup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.group_handle);
      stream.next(m.name);
      stream.next(m.related_mapping_handle);
      stream.next(m.parent_group_handle);
      stream.next(m.children_map_group_handles);
      stream.next(m.map_handles);
      stream.next(m.application_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapGroup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::MapGroup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::MapGroup_<ContainerAllocator>& v)
  {
    s << indent << "group_handle: ";
    s << std::endl;
    Printer< ::kortex_driver::MapGroupHandle_<ContainerAllocator> >::stream(s, indent + "  ", v.group_handle);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "related_mapping_handle: ";
    s << std::endl;
    Printer< ::kortex_driver::MappingHandle_<ContainerAllocator> >::stream(s, indent + "  ", v.related_mapping_handle);
    s << indent << "parent_group_handle: ";
    s << std::endl;
    Printer< ::kortex_driver::MapGroupHandle_<ContainerAllocator> >::stream(s, indent + "  ", v.parent_group_handle);
    s << indent << "children_map_group_handles[]" << std::endl;
    for (size_t i = 0; i < v.children_map_group_handles.size(); ++i)
    {
      s << indent << "  children_map_group_handles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::MapGroupHandle_<ContainerAllocator> >::stream(s, indent + "    ", v.children_map_group_handles[i]);
    }
    s << indent << "map_handles[]" << std::endl;
    for (size_t i = 0; i < v.map_handles.size(); ++i)
    {
      s << indent << "  map_handles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::MapHandle_<ContainerAllocator> >::stream(s, indent + "    ", v.map_handles[i]);
    }
    s << indent << "application_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.application_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_MAPGROUP_H
