// Generated by gencpp from file kortex_driver/CompleteProductConfiguration.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_COMPLETEPRODUCTCONFIGURATION_H
#define KORTEX_DRIVER_MESSAGE_COMPLETEPRODUCTCONFIGURATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/CountryCode.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct CompleteProductConfiguration_
{
  typedef CompleteProductConfiguration_<ContainerAllocator> Type;

  CompleteProductConfiguration_()
    : kin()
    , model(0)
    , country_code()
    , assembly_plant()
    , model_year()
    , degree_of_freedom(0)
    , base_type(0)
    , end_effector_type(0)
    , vision_module_type(0)
    , interface_module_type(0)
    , arm_laterality(0)
    , wrist_type(0)  {
    }
  CompleteProductConfiguration_(const ContainerAllocator& _alloc)
    : kin(_alloc)
    , model(0)
    , country_code(_alloc)
    , assembly_plant(_alloc)
    , model_year(_alloc)
    , degree_of_freedom(0)
    , base_type(0)
    , end_effector_type(0)
    , vision_module_type(0)
    , interface_module_type(0)
    , arm_laterality(0)
    , wrist_type(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _kin_type;
  _kin_type kin;

   typedef uint32_t _model_type;
  _model_type model;

   typedef  ::kortex_driver::CountryCode_<ContainerAllocator>  _country_code_type;
  _country_code_type country_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _assembly_plant_type;
  _assembly_plant_type assembly_plant;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_year_type;
  _model_year_type model_year;

   typedef uint32_t _degree_of_freedom_type;
  _degree_of_freedom_type degree_of_freedom;

   typedef uint32_t _base_type_type;
  _base_type_type base_type;

   typedef uint32_t _end_effector_type_type;
  _end_effector_type_type end_effector_type;

   typedef uint32_t _vision_module_type_type;
  _vision_module_type_type vision_module_type;

   typedef uint32_t _interface_module_type_type;
  _interface_module_type_type interface_module_type;

   typedef uint32_t _arm_laterality_type;
  _arm_laterality_type arm_laterality;

   typedef uint32_t _wrist_type_type;
  _wrist_type_type wrist_type;





  typedef boost::shared_ptr< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> const> ConstPtr;

}; // struct CompleteProductConfiguration_

typedef ::kortex_driver::CompleteProductConfiguration_<std::allocator<void> > CompleteProductConfiguration;

typedef boost::shared_ptr< ::kortex_driver::CompleteProductConfiguration > CompleteProductConfigurationPtr;
typedef boost::shared_ptr< ::kortex_driver::CompleteProductConfiguration const> CompleteProductConfigurationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator1> & lhs, const ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator2> & rhs)
{
  return lhs.kin == rhs.kin &&
    lhs.model == rhs.model &&
    lhs.country_code == rhs.country_code &&
    lhs.assembly_plant == rhs.assembly_plant &&
    lhs.model_year == rhs.model_year &&
    lhs.degree_of_freedom == rhs.degree_of_freedom &&
    lhs.base_type == rhs.base_type &&
    lhs.end_effector_type == rhs.end_effector_type &&
    lhs.vision_module_type == rhs.vision_module_type &&
    lhs.interface_module_type == rhs.interface_module_type &&
    lhs.arm_laterality == rhs.arm_laterality &&
    lhs.wrist_type == rhs.wrist_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator1> & lhs, const ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d8085e7089e183b063713a6b28e2220";
  }

  static const char* value(const ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d8085e7089e183bULL;
  static const uint64_t static_value2 = 0x063713a6b28e2220ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/CompleteProductConfiguration";
  }

  static const char* value(const ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string kin\n"
"uint32 model\n"
"CountryCode country_code\n"
"string assembly_plant\n"
"string model_year\n"
"uint32 degree_of_freedom\n"
"uint32 base_type\n"
"uint32 end_effector_type\n"
"uint32 vision_module_type\n"
"uint32 interface_module_type\n"
"uint32 arm_laterality\n"
"uint32 wrist_type\n"
"================================================================================\n"
"MSG: kortex_driver/CountryCode\n"
"\n"
"uint32 identifier\n"
;
  }

  static const char* value(const ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.kin);
      stream.next(m.model);
      stream.next(m.country_code);
      stream.next(m.assembly_plant);
      stream.next(m.model_year);
      stream.next(m.degree_of_freedom);
      stream.next(m.base_type);
      stream.next(m.end_effector_type);
      stream.next(m.vision_module_type);
      stream.next(m.interface_module_type);
      stream.next(m.arm_laterality);
      stream.next(m.wrist_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CompleteProductConfiguration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::CompleteProductConfiguration_<ContainerAllocator>& v)
  {
    s << indent << "kin: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.kin);
    s << indent << "model: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.model);
    s << indent << "country_code: ";
    s << std::endl;
    Printer< ::kortex_driver::CountryCode_<ContainerAllocator> >::stream(s, indent + "  ", v.country_code);
    s << indent << "assembly_plant: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.assembly_plant);
    s << indent << "model_year: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_year);
    s << indent << "degree_of_freedom: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.degree_of_freedom);
    s << indent << "base_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.base_type);
    s << indent << "end_effector_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.end_effector_type);
    s << indent << "vision_module_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.vision_module_type);
    s << indent << "interface_module_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.interface_module_type);
    s << indent << "arm_laterality: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.arm_laterality);
    s << indent << "wrist_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.wrist_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_COMPLETEPRODUCTCONFIGURATION_H
