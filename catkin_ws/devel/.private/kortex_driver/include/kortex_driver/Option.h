// Generated by gencpp from file kortex_driver/Option.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_OPTION_H
#define KORTEX_DRIVER_MESSAGE_OPTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct Option_
{
  typedef Option_<ContainerAllocator> Type;

  Option_()
    {
    }
  Option_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OPTION_UNSPECIFIED)
  #undef OPTION_UNSPECIFIED
#endif
#if defined(_WIN32) && defined(OPTION_BACKLIGHT_COMPENSATION)
  #undef OPTION_BACKLIGHT_COMPENSATION
#endif
#if defined(_WIN32) && defined(OPTION_BRIGHTNESS)
  #undef OPTION_BRIGHTNESS
#endif
#if defined(_WIN32) && defined(OPTION_CONTRAST)
  #undef OPTION_CONTRAST
#endif
#if defined(_WIN32) && defined(OPTION_EXPOSURE)
  #undef OPTION_EXPOSURE
#endif
#if defined(_WIN32) && defined(OPTION_GAIN)
  #undef OPTION_GAIN
#endif
#if defined(_WIN32) && defined(OPTION_GAMMA)
  #undef OPTION_GAMMA
#endif
#if defined(_WIN32) && defined(OPTION_HUE)
  #undef OPTION_HUE
#endif
#if defined(_WIN32) && defined(OPTION_SATURATION)
  #undef OPTION_SATURATION
#endif
#if defined(_WIN32) && defined(OPTION_SHARPNESS)
  #undef OPTION_SHARPNESS
#endif
#if defined(_WIN32) && defined(OPTION_WHITE_BALANCE)
  #undef OPTION_WHITE_BALANCE
#endif
#if defined(_WIN32) && defined(OPTION_ENABLE_AUTO_EXPOSURE)
  #undef OPTION_ENABLE_AUTO_EXPOSURE
#endif
#if defined(_WIN32) && defined(OPTION_ENABLE_AUTO_WHITE_BALANCE)
  #undef OPTION_ENABLE_AUTO_WHITE_BALANCE
#endif
#if defined(_WIN32) && defined(OPTION_VISUAL_PRESET)
  #undef OPTION_VISUAL_PRESET
#endif
#if defined(_WIN32) && defined(OPTION_LASER_POWER)
  #undef OPTION_LASER_POWER
#endif
#if defined(_WIN32) && defined(OPTION_ACCURACY)
  #undef OPTION_ACCURACY
#endif
#if defined(_WIN32) && defined(OPTION_MOTION_RANGE)
  #undef OPTION_MOTION_RANGE
#endif
#if defined(_WIN32) && defined(OPTION_FILTER_OPTION)
  #undef OPTION_FILTER_OPTION
#endif
#if defined(_WIN32) && defined(OPTION_CONFIDENCE_THRESHOLD)
  #undef OPTION_CONFIDENCE_THRESHOLD
#endif
#if defined(_WIN32) && defined(OPTION_EMITTER_ENABLED)
  #undef OPTION_EMITTER_ENABLED
#endif
#if defined(_WIN32) && defined(OPTION_FRAMES_QUEUE_SIZE)
  #undef OPTION_FRAMES_QUEUE_SIZE
#endif
#if defined(_WIN32) && defined(OPTION_TOTAL_FRAME_DROPS)
  #undef OPTION_TOTAL_FRAME_DROPS
#endif
#if defined(_WIN32) && defined(OPTION_AUTO_EXPOSURE_MODE)
  #undef OPTION_AUTO_EXPOSURE_MODE
#endif
#if defined(_WIN32) && defined(OPTION_POWER_LINE_FREQUENCY)
  #undef OPTION_POWER_LINE_FREQUENCY
#endif
#if defined(_WIN32) && defined(OPTION_ASIC_TEMPERATURE)
  #undef OPTION_ASIC_TEMPERATURE
#endif
#if defined(_WIN32) && defined(OPTION_ERROR_POLLING_ENABLED)
  #undef OPTION_ERROR_POLLING_ENABLED
#endif
#if defined(_WIN32) && defined(OPTION_PROJECTOR_TEMPERATURE)
  #undef OPTION_PROJECTOR_TEMPERATURE
#endif
#if defined(_WIN32) && defined(OPTION_OUTPUT_TRIGGER_ENABLED)
  #undef OPTION_OUTPUT_TRIGGER_ENABLED
#endif
#if defined(_WIN32) && defined(OPTION_MOTION_MODULE_TEMPERATURE)
  #undef OPTION_MOTION_MODULE_TEMPERATURE
#endif
#if defined(_WIN32) && defined(OPTION_DEPTH_UNITS)
  #undef OPTION_DEPTH_UNITS
#endif
#if defined(_WIN32) && defined(OPTION_ENABLE_MOTION_CORRECTION)
  #undef OPTION_ENABLE_MOTION_CORRECTION
#endif
#if defined(_WIN32) && defined(OPTION_AUTO_EXPOSURE_PRIORITY)
  #undef OPTION_AUTO_EXPOSURE_PRIORITY
#endif
#if defined(_WIN32) && defined(OPTION_COLOR_SCHEME)
  #undef OPTION_COLOR_SCHEME
#endif
#if defined(_WIN32) && defined(OPTION_HISTOGRAM_EQUALIZATION_ENABLED)
  #undef OPTION_HISTOGRAM_EQUALIZATION_ENABLED
#endif
#if defined(_WIN32) && defined(OPTION_MIN_DISTANCE)
  #undef OPTION_MIN_DISTANCE
#endif
#if defined(_WIN32) && defined(OPTION_MAX_DISTANCE)
  #undef OPTION_MAX_DISTANCE
#endif
#if defined(_WIN32) && defined(OPTION_TEXTURE_SOURCE)
  #undef OPTION_TEXTURE_SOURCE
#endif
#if defined(_WIN32) && defined(OPTION_FILTER_MAGNITUDE)
  #undef OPTION_FILTER_MAGNITUDE
#endif
#if defined(_WIN32) && defined(OPTION_FILTER_SMOOTH_ALPHA)
  #undef OPTION_FILTER_SMOOTH_ALPHA
#endif
#if defined(_WIN32) && defined(OPTION_FILTER_SMOOTH_DELTA)
  #undef OPTION_FILTER_SMOOTH_DELTA
#endif
#if defined(_WIN32) && defined(OPTION_HOLES_FILL)
  #undef OPTION_HOLES_FILL
#endif
#if defined(_WIN32) && defined(OPTION_STEREO_BASELINE)
  #undef OPTION_STEREO_BASELINE
#endif
#if defined(_WIN32) && defined(OPTION_AUTO_EXPOSURE_CONVERGE_STEP)
  #undef OPTION_AUTO_EXPOSURE_CONVERGE_STEP
#endif

  enum {
    OPTION_UNSPECIFIED = 0u,
    OPTION_BACKLIGHT_COMPENSATION = 1u,
    OPTION_BRIGHTNESS = 2u,
    OPTION_CONTRAST = 3u,
    OPTION_EXPOSURE = 4u,
    OPTION_GAIN = 5u,
    OPTION_GAMMA = 6u,
    OPTION_HUE = 7u,
    OPTION_SATURATION = 8u,
    OPTION_SHARPNESS = 9u,
    OPTION_WHITE_BALANCE = 10u,
    OPTION_ENABLE_AUTO_EXPOSURE = 11u,
    OPTION_ENABLE_AUTO_WHITE_BALANCE = 12u,
    OPTION_VISUAL_PRESET = 13u,
    OPTION_LASER_POWER = 14u,
    OPTION_ACCURACY = 15u,
    OPTION_MOTION_RANGE = 16u,
    OPTION_FILTER_OPTION = 17u,
    OPTION_CONFIDENCE_THRESHOLD = 18u,
    OPTION_EMITTER_ENABLED = 19u,
    OPTION_FRAMES_QUEUE_SIZE = 20u,
    OPTION_TOTAL_FRAME_DROPS = 21u,
    OPTION_AUTO_EXPOSURE_MODE = 22u,
    OPTION_POWER_LINE_FREQUENCY = 23u,
    OPTION_ASIC_TEMPERATURE = 24u,
    OPTION_ERROR_POLLING_ENABLED = 25u,
    OPTION_PROJECTOR_TEMPERATURE = 26u,
    OPTION_OUTPUT_TRIGGER_ENABLED = 27u,
    OPTION_MOTION_MODULE_TEMPERATURE = 28u,
    OPTION_DEPTH_UNITS = 29u,
    OPTION_ENABLE_MOTION_CORRECTION = 30u,
    OPTION_AUTO_EXPOSURE_PRIORITY = 31u,
    OPTION_COLOR_SCHEME = 32u,
    OPTION_HISTOGRAM_EQUALIZATION_ENABLED = 33u,
    OPTION_MIN_DISTANCE = 34u,
    OPTION_MAX_DISTANCE = 35u,
    OPTION_TEXTURE_SOURCE = 36u,
    OPTION_FILTER_MAGNITUDE = 37u,
    OPTION_FILTER_SMOOTH_ALPHA = 38u,
    OPTION_FILTER_SMOOTH_DELTA = 39u,
    OPTION_HOLES_FILL = 40u,
    OPTION_STEREO_BASELINE = 41u,
    OPTION_AUTO_EXPOSURE_CONVERGE_STEP = 42u,
  };


  typedef boost::shared_ptr< ::kortex_driver::Option_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::Option_<ContainerAllocator> const> ConstPtr;

}; // struct Option_

typedef ::kortex_driver::Option_<std::allocator<void> > Option;

typedef boost::shared_ptr< ::kortex_driver::Option > OptionPtr;
typedef boost::shared_ptr< ::kortex_driver::Option const> OptionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::Option_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::Option_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::Option_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::Option_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::Option_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::Option_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::Option_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::Option_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::Option_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f091628538d1f237d2c9bbe103cea73";
  }

  static const char* value(const ::kortex_driver::Option_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f091628538d1f23ULL;
  static const uint64_t static_value2 = 0x7d2c9bbe103cea73ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::Option_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/Option";
  }

  static const char* value(const ::kortex_driver::Option_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::Option_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 OPTION_UNSPECIFIED = 0\n"
"\n"
"uint32 OPTION_BACKLIGHT_COMPENSATION = 1\n"
"\n"
"uint32 OPTION_BRIGHTNESS = 2\n"
"\n"
"uint32 OPTION_CONTRAST = 3\n"
"\n"
"uint32 OPTION_EXPOSURE = 4\n"
"\n"
"uint32 OPTION_GAIN = 5\n"
"\n"
"uint32 OPTION_GAMMA = 6\n"
"\n"
"uint32 OPTION_HUE = 7\n"
"\n"
"uint32 OPTION_SATURATION = 8\n"
"\n"
"uint32 OPTION_SHARPNESS = 9\n"
"\n"
"uint32 OPTION_WHITE_BALANCE = 10\n"
"\n"
"uint32 OPTION_ENABLE_AUTO_EXPOSURE = 11\n"
"\n"
"uint32 OPTION_ENABLE_AUTO_WHITE_BALANCE = 12\n"
"\n"
"uint32 OPTION_VISUAL_PRESET = 13\n"
"\n"
"uint32 OPTION_LASER_POWER = 14\n"
"\n"
"uint32 OPTION_ACCURACY = 15\n"
"\n"
"uint32 OPTION_MOTION_RANGE = 16\n"
"\n"
"uint32 OPTION_FILTER_OPTION = 17\n"
"\n"
"uint32 OPTION_CONFIDENCE_THRESHOLD = 18\n"
"\n"
"uint32 OPTION_EMITTER_ENABLED = 19\n"
"\n"
"uint32 OPTION_FRAMES_QUEUE_SIZE = 20\n"
"\n"
"uint32 OPTION_TOTAL_FRAME_DROPS = 21\n"
"\n"
"uint32 OPTION_AUTO_EXPOSURE_MODE = 22\n"
"\n"
"uint32 OPTION_POWER_LINE_FREQUENCY = 23\n"
"\n"
"uint32 OPTION_ASIC_TEMPERATURE = 24\n"
"\n"
"uint32 OPTION_ERROR_POLLING_ENABLED = 25\n"
"\n"
"uint32 OPTION_PROJECTOR_TEMPERATURE = 26\n"
"\n"
"uint32 OPTION_OUTPUT_TRIGGER_ENABLED = 27\n"
"\n"
"uint32 OPTION_MOTION_MODULE_TEMPERATURE = 28\n"
"\n"
"uint32 OPTION_DEPTH_UNITS = 29\n"
"\n"
"uint32 OPTION_ENABLE_MOTION_CORRECTION = 30\n"
"\n"
"uint32 OPTION_AUTO_EXPOSURE_PRIORITY = 31\n"
"\n"
"uint32 OPTION_COLOR_SCHEME = 32\n"
"\n"
"uint32 OPTION_HISTOGRAM_EQUALIZATION_ENABLED = 33\n"
"\n"
"uint32 OPTION_MIN_DISTANCE = 34\n"
"\n"
"uint32 OPTION_MAX_DISTANCE = 35\n"
"\n"
"uint32 OPTION_TEXTURE_SOURCE = 36\n"
"\n"
"uint32 OPTION_FILTER_MAGNITUDE = 37\n"
"\n"
"uint32 OPTION_FILTER_SMOOTH_ALPHA = 38\n"
"\n"
"uint32 OPTION_FILTER_SMOOTH_DELTA = 39\n"
"\n"
"uint32 OPTION_HOLES_FILL = 40\n"
"\n"
"uint32 OPTION_STEREO_BASELINE = 41\n"
"\n"
"uint32 OPTION_AUTO_EXPOSURE_CONVERGE_STEP = 42\n"
;
  }

  static const char* value(const ::kortex_driver::Option_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::Option_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Option_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::Option_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::Option_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_OPTION_H
