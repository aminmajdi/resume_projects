// Generated by gencpp from file kortex_driver/Xbox360AnalogInputIdentifier.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_XBOX360ANALOGINPUTIDENTIFIER_H
#define KORTEX_DRIVER_MESSAGE_XBOX360ANALOGINPUTIDENTIFIER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct Xbox360AnalogInputIdentifier_
{
  typedef Xbox360AnalogInputIdentifier_<ContainerAllocator> Type;

  Xbox360AnalogInputIdentifier_()
    {
    }
  Xbox360AnalogInputIdentifier_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSPECIFIED_XBOX360_ANALOG)
  #undef UNSPECIFIED_XBOX360_ANALOG
#endif
#if defined(_WIN32) && defined(XBOX360_THUMB_LEFT_X)
  #undef XBOX360_THUMB_LEFT_X
#endif
#if defined(_WIN32) && defined(XBOX360_THUMB_LEFT_Y)
  #undef XBOX360_THUMB_LEFT_Y
#endif
#if defined(_WIN32) && defined(XBOX360_THUMB_RIGHT_X)
  #undef XBOX360_THUMB_RIGHT_X
#endif
#if defined(_WIN32) && defined(XBOX360_THUMB_RIGHT_Y)
  #undef XBOX360_THUMB_RIGHT_Y
#endif
#if defined(_WIN32) && defined(XBOX360_TRIGGER_LEFT)
  #undef XBOX360_TRIGGER_LEFT
#endif
#if defined(_WIN32) && defined(XBOX360_TRIGGER_RIGHT)
  #undef XBOX360_TRIGGER_RIGHT
#endif

  enum {
    UNSPECIFIED_XBOX360_ANALOG = 0u,
    XBOX360_THUMB_LEFT_X = 1u,
    XBOX360_THUMB_LEFT_Y = 2u,
    XBOX360_THUMB_RIGHT_X = 3u,
    XBOX360_THUMB_RIGHT_Y = 4u,
    XBOX360_TRIGGER_LEFT = 5u,
    XBOX360_TRIGGER_RIGHT = 6u,
  };


  typedef boost::shared_ptr< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> const> ConstPtr;

}; // struct Xbox360AnalogInputIdentifier_

typedef ::kortex_driver::Xbox360AnalogInputIdentifier_<std::allocator<void> > Xbox360AnalogInputIdentifier;

typedef boost::shared_ptr< ::kortex_driver::Xbox360AnalogInputIdentifier > Xbox360AnalogInputIdentifierPtr;
typedef boost::shared_ptr< ::kortex_driver::Xbox360AnalogInputIdentifier const> Xbox360AnalogInputIdentifierConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bdf16a9285171f4643549a6ec207283d";
  }

  static const char* value(const ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbdf16a9285171f46ULL;
  static const uint64_t static_value2 = 0x43549a6ec207283dULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/Xbox360AnalogInputIdentifier";
  }

  static const char* value(const ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNSPECIFIED_XBOX360_ANALOG = 0\n"
"\n"
"uint32 XBOX360_THUMB_LEFT_X = 1\n"
"\n"
"uint32 XBOX360_THUMB_LEFT_Y = 2\n"
"\n"
"uint32 XBOX360_THUMB_RIGHT_X = 3\n"
"\n"
"uint32 XBOX360_THUMB_RIGHT_Y = 4\n"
"\n"
"uint32 XBOX360_TRIGGER_LEFT = 5\n"
"\n"
"uint32 XBOX360_TRIGGER_RIGHT = 6\n"
;
  }

  static const char* value(const ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Xbox360AnalogInputIdentifier_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::Xbox360AnalogInputIdentifier_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_XBOX360ANALOGINPUTIDENTIFIER_H
