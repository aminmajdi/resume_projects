// Generated by gencpp from file kortex_driver/FrameRate.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_FRAMERATE_H
#define KORTEX_DRIVER_MESSAGE_FRAMERATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct FrameRate_
{
  typedef FrameRate_<ContainerAllocator> Type;

  FrameRate_()
    {
    }
  FrameRate_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FRAMERATE_UNSPECIFIED)
  #undef FRAMERATE_UNSPECIFIED
#endif
#if defined(_WIN32) && defined(FRAMERATE_6_FPS)
  #undef FRAMERATE_6_FPS
#endif
#if defined(_WIN32) && defined(FRAMERATE_15_FPS)
  #undef FRAMERATE_15_FPS
#endif
#if defined(_WIN32) && defined(FRAMERATE_30_FPS)
  #undef FRAMERATE_30_FPS
#endif

  enum {
    FRAMERATE_UNSPECIFIED = 0u,
    FRAMERATE_6_FPS = 1u,
    FRAMERATE_15_FPS = 2u,
    FRAMERATE_30_FPS = 3u,
  };


  typedef boost::shared_ptr< ::kortex_driver::FrameRate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::FrameRate_<ContainerAllocator> const> ConstPtr;

}; // struct FrameRate_

typedef ::kortex_driver::FrameRate_<std::allocator<void> > FrameRate;

typedef boost::shared_ptr< ::kortex_driver::FrameRate > FrameRatePtr;
typedef boost::shared_ptr< ::kortex_driver::FrameRate const> FrameRateConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::FrameRate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::FrameRate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::FrameRate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::FrameRate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::FrameRate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::FrameRate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::FrameRate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::FrameRate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::FrameRate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9400397c1a84f4718dc33b3b7f3b5df4";
  }

  static const char* value(const ::kortex_driver::FrameRate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9400397c1a84f471ULL;
  static const uint64_t static_value2 = 0x8dc33b3b7f3b5df4ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::FrameRate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/FrameRate";
  }

  static const char* value(const ::kortex_driver::FrameRate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::FrameRate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 FRAMERATE_UNSPECIFIED = 0\n"
"\n"
"uint32 FRAMERATE_6_FPS = 1\n"
"\n"
"uint32 FRAMERATE_15_FPS = 2\n"
"\n"
"uint32 FRAMERATE_30_FPS = 3\n"
;
  }

  static const char* value(const ::kortex_driver::FrameRate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::FrameRate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrameRate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::FrameRate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::FrameRate_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_FRAMERATE_H
