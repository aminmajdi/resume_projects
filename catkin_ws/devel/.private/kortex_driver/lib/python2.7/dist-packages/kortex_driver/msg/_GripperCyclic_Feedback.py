# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/GripperCyclic_Feedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class GripperCyclic_Feedback(genpy.Message):
  _md5sum = "ec3639b6684e8f718fd3128a8215e686"
  _type = "kortex_driver/GripperCyclic_Feedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
GripperCyclic_MessageId feedback_id
uint32 status_flags
uint32 fault_bank_a
uint32 fault_bank_b
uint32 warning_bank_a
uint32 warning_bank_b
MotorFeedback[] motor
================================================================================
MSG: kortex_driver/GripperCyclic_MessageId

uint32 identifier
================================================================================
MSG: kortex_driver/MotorFeedback

uint32 motor_id
float32 position
float32 velocity
float32 current_motor
float32 voltage
float32 temperature_motor"""
  __slots__ = ['feedback_id','status_flags','fault_bank_a','fault_bank_b','warning_bank_a','warning_bank_b','motor']
  _slot_types = ['kortex_driver/GripperCyclic_MessageId','uint32','uint32','uint32','uint32','uint32','kortex_driver/MotorFeedback[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       feedback_id,status_flags,fault_bank_a,fault_bank_b,warning_bank_a,warning_bank_b,motor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GripperCyclic_Feedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.feedback_id is None:
        self.feedback_id = kortex_driver.msg.GripperCyclic_MessageId()
      if self.status_flags is None:
        self.status_flags = 0
      if self.fault_bank_a is None:
        self.fault_bank_a = 0
      if self.fault_bank_b is None:
        self.fault_bank_b = 0
      if self.warning_bank_a is None:
        self.warning_bank_a = 0
      if self.warning_bank_b is None:
        self.warning_bank_b = 0
      if self.motor is None:
        self.motor = []
    else:
      self.feedback_id = kortex_driver.msg.GripperCyclic_MessageId()
      self.status_flags = 0
      self.fault_bank_a = 0
      self.fault_bank_b = 0
      self.warning_bank_a = 0
      self.warning_bank_b = 0
      self.motor = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6I().pack(_x.feedback_id.identifier, _x.status_flags, _x.fault_bank_a, _x.fault_bank_b, _x.warning_bank_a, _x.warning_bank_b))
      length = len(self.motor)
      buff.write(_struct_I.pack(length))
      for val1 in self.motor:
        _x = val1
        buff.write(_get_struct_I5f().pack(_x.motor_id, _x.position, _x.velocity, _x.current_motor, _x.voltage, _x.temperature_motor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.feedback_id is None:
        self.feedback_id = kortex_driver.msg.GripperCyclic_MessageId()
      if self.motor is None:
        self.motor = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.feedback_id.identifier, _x.status_flags, _x.fault_bank_a, _x.fault_bank_b, _x.warning_bank_a, _x.warning_bank_b,) = _get_struct_6I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motor = []
      for i in range(0, length):
        val1 = kortex_driver.msg.MotorFeedback()
        _x = val1
        start = end
        end += 24
        (_x.motor_id, _x.position, _x.velocity, _x.current_motor, _x.voltage, _x.temperature_motor,) = _get_struct_I5f().unpack(str[start:end])
        self.motor.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6I().pack(_x.feedback_id.identifier, _x.status_flags, _x.fault_bank_a, _x.fault_bank_b, _x.warning_bank_a, _x.warning_bank_b))
      length = len(self.motor)
      buff.write(_struct_I.pack(length))
      for val1 in self.motor:
        _x = val1
        buff.write(_get_struct_I5f().pack(_x.motor_id, _x.position, _x.velocity, _x.current_motor, _x.voltage, _x.temperature_motor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.feedback_id is None:
        self.feedback_id = kortex_driver.msg.GripperCyclic_MessageId()
      if self.motor is None:
        self.motor = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.feedback_id.identifier, _x.status_flags, _x.fault_bank_a, _x.fault_bank_b, _x.warning_bank_a, _x.warning_bank_b,) = _get_struct_6I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motor = []
      for i in range(0, length):
        val1 = kortex_driver.msg.MotorFeedback()
        _x = val1
        start = end
        end += 24
        (_x.motor_id, _x.position, _x.velocity, _x.current_motor, _x.voltage, _x.temperature_motor,) = _get_struct_I5f().unpack(str[start:end])
        self.motor.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6I = None
def _get_struct_6I():
    global _struct_6I
    if _struct_6I is None:
        _struct_6I = struct.Struct("<6I")
    return _struct_6I
_struct_I5f = None
def _get_struct_I5f():
    global _struct_I5f
    if _struct_I5f is None:
        _struct_I5f = struct.Struct("<I5f")
    return _struct_I5f
