// Generated by gencpp from file kortex_driver/GetBootloaderVersion.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETBOOTLOADERVERSION_H
#define KORTEX_DRIVER_MESSAGE_GETBOOTLOADERVERSION_H

#include <ros/service_traits.h>


#include <kortex_driver/GetBootloaderVersionRequest.h>
#include <kortex_driver/GetBootloaderVersionResponse.h>


namespace kortex_driver
{

struct GetBootloaderVersion
{

typedef GetBootloaderVersionRequest Request;
typedef GetBootloaderVersionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetBootloaderVersion
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetBootloaderVersion > {
  static const char* value()
  {
    return "e674f344ecc5f8e12f3233bf3b7cbeaa";
  }

  static const char* value(const ::kortex_driver::GetBootloaderVersion&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetBootloaderVersion > {
  static const char* value()
  {
    return "kortex_driver/GetBootloaderVersion";
  }

  static const char* value(const ::kortex_driver::GetBootloaderVersion&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetBootloaderVersionRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetBootloaderVersion >
template<>
struct MD5Sum< ::kortex_driver::GetBootloaderVersionRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetBootloaderVersion >::value();
  }
  static const char* value(const ::kortex_driver::GetBootloaderVersionRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetBootloaderVersionRequest> should match
// service_traits::DataType< ::kortex_driver::GetBootloaderVersion >
template<>
struct DataType< ::kortex_driver::GetBootloaderVersionRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetBootloaderVersion >::value();
  }
  static const char* value(const ::kortex_driver::GetBootloaderVersionRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetBootloaderVersionResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetBootloaderVersion >
template<>
struct MD5Sum< ::kortex_driver::GetBootloaderVersionResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetBootloaderVersion >::value();
  }
  static const char* value(const ::kortex_driver::GetBootloaderVersionResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetBootloaderVersionResponse> should match
// service_traits::DataType< ::kortex_driver::GetBootloaderVersion >
template<>
struct DataType< ::kortex_driver::GetBootloaderVersionResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetBootloaderVersion >::value();
  }
  static const char* value(const ::kortex_driver::GetBootloaderVersionResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETBOOTLOADERVERSION_H
