// Generated by gencpp from file kortex_driver/GetCartesianReferenceFrameResponse.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETCARTESIANREFERENCEFRAMERESPONSE_H
#define KORTEX_DRIVER_MESSAGE_GETCARTESIANREFERENCEFRAMERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/CartesianReferenceFrameInfo.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct GetCartesianReferenceFrameResponse_
{
  typedef GetCartesianReferenceFrameResponse_<ContainerAllocator> Type;

  GetCartesianReferenceFrameResponse_()
    : output()  {
    }
  GetCartesianReferenceFrameResponse_(const ContainerAllocator& _alloc)
    : output(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kortex_driver::CartesianReferenceFrameInfo_<ContainerAllocator>  _output_type;
  _output_type output;





  typedef boost::shared_ptr< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetCartesianReferenceFrameResponse_

typedef ::kortex_driver::GetCartesianReferenceFrameResponse_<std::allocator<void> > GetCartesianReferenceFrameResponse;

typedef boost::shared_ptr< ::kortex_driver::GetCartesianReferenceFrameResponse > GetCartesianReferenceFrameResponsePtr;
typedef boost::shared_ptr< ::kortex_driver::GetCartesianReferenceFrameResponse const> GetCartesianReferenceFrameResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator1> & lhs, const ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator2> & rhs)
{
  return lhs.output == rhs.output;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator1> & lhs, const ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b0d036926318c86039741c2c27bc6fa";
  }

  static const char* value(const ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b0d036926318c86ULL;
  static const uint64_t static_value2 = 0x039741c2c27bc6faULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/GetCartesianReferenceFrameResponse";
  }

  static const char* value(const ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "CartesianReferenceFrameInfo output\n"
"\n"
"================================================================================\n"
"MSG: kortex_driver/CartesianReferenceFrameInfo\n"
"\n"
"uint32 reference_frame\n"
;
  }

  static const char* value(const ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetCartesianReferenceFrameResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::GetCartesianReferenceFrameResponse_<ContainerAllocator>& v)
  {
    s << indent << "output: ";
    s << std::endl;
    Printer< ::kortex_driver::CartesianReferenceFrameInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.output);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETCARTESIANREFERENCEFRAMERESPONSE_H
