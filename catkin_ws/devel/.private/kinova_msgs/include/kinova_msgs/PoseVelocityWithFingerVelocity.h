// Generated by gencpp from file kinova_msgs/PoseVelocityWithFingerVelocity.msg
// DO NOT EDIT!


#ifndef KINOVA_MSGS_MESSAGE_POSEVELOCITYWITHFINGERVELOCITY_H
#define KINOVA_MSGS_MESSAGE_POSEVELOCITYWITHFINGERVELOCITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kinova_msgs
{
template <class ContainerAllocator>
struct PoseVelocityWithFingerVelocity_
{
  typedef PoseVelocityWithFingerVelocity_<ContainerAllocator> Type;

  PoseVelocityWithFingerVelocity_()
    : twist_linear_x(0.0)
    , twist_linear_y(0.0)
    , twist_linear_z(0.0)
    , twist_angular_x(0.0)
    , twist_angular_y(0.0)
    , twist_angular_z(0.0)
    , finger1(0.0)
    , finger2(0.0)
    , finger3(0.0)  {
    }
  PoseVelocityWithFingerVelocity_(const ContainerAllocator& _alloc)
    : twist_linear_x(0.0)
    , twist_linear_y(0.0)
    , twist_linear_z(0.0)
    , twist_angular_x(0.0)
    , twist_angular_y(0.0)
    , twist_angular_z(0.0)
    , finger1(0.0)
    , finger2(0.0)
    , finger3(0.0)  {
  (void)_alloc;
    }



   typedef float _twist_linear_x_type;
  _twist_linear_x_type twist_linear_x;

   typedef float _twist_linear_y_type;
  _twist_linear_y_type twist_linear_y;

   typedef float _twist_linear_z_type;
  _twist_linear_z_type twist_linear_z;

   typedef float _twist_angular_x_type;
  _twist_angular_x_type twist_angular_x;

   typedef float _twist_angular_y_type;
  _twist_angular_y_type twist_angular_y;

   typedef float _twist_angular_z_type;
  _twist_angular_z_type twist_angular_z;

   typedef float _finger1_type;
  _finger1_type finger1;

   typedef float _finger2_type;
  _finger2_type finger2;

   typedef float _finger3_type;
  _finger3_type finger3;





  typedef boost::shared_ptr< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> const> ConstPtr;

}; // struct PoseVelocityWithFingerVelocity_

typedef ::kinova_msgs::PoseVelocityWithFingerVelocity_<std::allocator<void> > PoseVelocityWithFingerVelocity;

typedef boost::shared_ptr< ::kinova_msgs::PoseVelocityWithFingerVelocity > PoseVelocityWithFingerVelocityPtr;
typedef boost::shared_ptr< ::kinova_msgs::PoseVelocityWithFingerVelocity const> PoseVelocityWithFingerVelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator1> & lhs, const ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator2> & rhs)
{
  return lhs.twist_linear_x == rhs.twist_linear_x &&
    lhs.twist_linear_y == rhs.twist_linear_y &&
    lhs.twist_linear_z == rhs.twist_linear_z &&
    lhs.twist_angular_x == rhs.twist_angular_x &&
    lhs.twist_angular_y == rhs.twist_angular_y &&
    lhs.twist_angular_z == rhs.twist_angular_z &&
    lhs.finger1 == rhs.finger1 &&
    lhs.finger2 == rhs.finger2 &&
    lhs.finger3 == rhs.finger3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator1> & lhs, const ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kinova_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8789bad3911d8a482fde371a6b8abac";
  }

  static const char* value(const ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8789bad3911d8a4ULL;
  static const uint64_t static_value2 = 0x82fde371a6b8abacULL;
};

template<class ContainerAllocator>
struct DataType< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kinova_msgs/PoseVelocityWithFingerVelocity";
  }

  static const char* value(const ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 twist_linear_x\n"
"float32 twist_linear_y\n"
"float32 twist_linear_z\n"
"float32 twist_angular_x\n"
"float32 twist_angular_y\n"
"float32 twist_angular_z\n"
"float32 finger1\n"
"float32 finger2\n"
"float32 finger3\n"
;
  }

  static const char* value(const ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.twist_linear_x);
      stream.next(m.twist_linear_y);
      stream.next(m.twist_linear_z);
      stream.next(m.twist_angular_x);
      stream.next(m.twist_angular_y);
      stream.next(m.twist_angular_z);
      stream.next(m.finger1);
      stream.next(m.finger2);
      stream.next(m.finger3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseVelocityWithFingerVelocity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kinova_msgs::PoseVelocityWithFingerVelocity_<ContainerAllocator>& v)
  {
    s << indent << "twist_linear_x: ";
    Printer<float>::stream(s, indent + "  ", v.twist_linear_x);
    s << indent << "twist_linear_y: ";
    Printer<float>::stream(s, indent + "  ", v.twist_linear_y);
    s << indent << "twist_linear_z: ";
    Printer<float>::stream(s, indent + "  ", v.twist_linear_z);
    s << indent << "twist_angular_x: ";
    Printer<float>::stream(s, indent + "  ", v.twist_angular_x);
    s << indent << "twist_angular_y: ";
    Printer<float>::stream(s, indent + "  ", v.twist_angular_y);
    s << indent << "twist_angular_z: ";
    Printer<float>::stream(s, indent + "  ", v.twist_angular_z);
    s << indent << "finger1: ";
    Printer<float>::stream(s, indent + "  ", v.finger1);
    s << indent << "finger2: ";
    Printer<float>::stream(s, indent + "  ", v.finger2);
    s << indent << "finger3: ";
    Printer<float>::stream(s, indent + "  ", v.finger3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINOVA_MSGS_MESSAGE_POSEVELOCITYWITHFINGERVELOCITY_H
