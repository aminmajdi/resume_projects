// Generated by gencpp from file kortex_driver/TransformationRow.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_TRANSFORMATIONROW_H
#define KORTEX_DRIVER_MESSAGE_TRANSFORMATIONROW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct TransformationRow_
{
  typedef TransformationRow_<ContainerAllocator> Type;

  TransformationRow_()
    : c0(0.0)
    , c1(0.0)
    , c2(0.0)
    , c3(0.0)  {
    }
  TransformationRow_(const ContainerAllocator& _alloc)
    : c0(0.0)
    , c1(0.0)
    , c2(0.0)
    , c3(0.0)  {
  (void)_alloc;
    }



   typedef float _c0_type;
  _c0_type c0;

   typedef float _c1_type;
  _c1_type c1;

   typedef float _c2_type;
  _c2_type c2;

   typedef float _c3_type;
  _c3_type c3;





  typedef boost::shared_ptr< ::kortex_driver::TransformationRow_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::TransformationRow_<ContainerAllocator> const> ConstPtr;

}; // struct TransformationRow_

typedef ::kortex_driver::TransformationRow_<std::allocator<void> > TransformationRow;

typedef boost::shared_ptr< ::kortex_driver::TransformationRow > TransformationRowPtr;
typedef boost::shared_ptr< ::kortex_driver::TransformationRow const> TransformationRowConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::TransformationRow_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::TransformationRow_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::TransformationRow_<ContainerAllocator1> & lhs, const ::kortex_driver::TransformationRow_<ContainerAllocator2> & rhs)
{
  return lhs.c0 == rhs.c0 &&
    lhs.c1 == rhs.c1 &&
    lhs.c2 == rhs.c2 &&
    lhs.c3 == rhs.c3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::TransformationRow_<ContainerAllocator1> & lhs, const ::kortex_driver::TransformationRow_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::TransformationRow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::TransformationRow_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::TransformationRow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::TransformationRow_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::TransformationRow_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::TransformationRow_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::TransformationRow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b9e4dcf087a9f1dd44881ce6cb761b8";
  }

  static const char* value(const ::kortex_driver::TransformationRow_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b9e4dcf087a9f1dULL;
  static const uint64_t static_value2 = 0xd44881ce6cb761b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::TransformationRow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/TransformationRow";
  }

  static const char* value(const ::kortex_driver::TransformationRow_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::TransformationRow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float32 c0\n"
"float32 c1\n"
"float32 c2\n"
"float32 c3\n"
;
  }

  static const char* value(const ::kortex_driver::TransformationRow_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::TransformationRow_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.c0);
      stream.next(m.c1);
      stream.next(m.c2);
      stream.next(m.c3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransformationRow_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::TransformationRow_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::TransformationRow_<ContainerAllocator>& v)
  {
    s << indent << "c0: ";
    Printer<float>::stream(s, indent + "  ", v.c0);
    s << indent << "c1: ";
    Printer<float>::stream(s, indent + "  ", v.c1);
    s << indent << "c2: ";
    Printer<float>::stream(s, indent + "  ", v.c2);
    s << indent << "c3: ";
    Printer<float>::stream(s, indent + "  ", v.c3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_TRANSFORMATIONROW_H
