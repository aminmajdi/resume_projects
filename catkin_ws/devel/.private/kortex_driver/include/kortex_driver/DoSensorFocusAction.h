// Generated by gencpp from file kortex_driver/DoSensorFocusAction.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_DOSENSORFOCUSACTION_H
#define KORTEX_DRIVER_MESSAGE_DOSENSORFOCUSACTION_H

#include <ros/service_traits.h>


#include <kortex_driver/DoSensorFocusActionRequest.h>
#include <kortex_driver/DoSensorFocusActionResponse.h>


namespace kortex_driver
{

struct DoSensorFocusAction
{

typedef DoSensorFocusActionRequest Request;
typedef DoSensorFocusActionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct DoSensorFocusAction
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::DoSensorFocusAction > {
  static const char* value()
  {
    return "a727a16574ce67bd4de8fba7da857f9f";
  }

  static const char* value(const ::kortex_driver::DoSensorFocusAction&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::DoSensorFocusAction > {
  static const char* value()
  {
    return "kortex_driver/DoSensorFocusAction";
  }

  static const char* value(const ::kortex_driver::DoSensorFocusAction&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::DoSensorFocusActionRequest> should match
// service_traits::MD5Sum< ::kortex_driver::DoSensorFocusAction >
template<>
struct MD5Sum< ::kortex_driver::DoSensorFocusActionRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::DoSensorFocusAction >::value();
  }
  static const char* value(const ::kortex_driver::DoSensorFocusActionRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::DoSensorFocusActionRequest> should match
// service_traits::DataType< ::kortex_driver::DoSensorFocusAction >
template<>
struct DataType< ::kortex_driver::DoSensorFocusActionRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::DoSensorFocusAction >::value();
  }
  static const char* value(const ::kortex_driver::DoSensorFocusActionRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::DoSensorFocusActionResponse> should match
// service_traits::MD5Sum< ::kortex_driver::DoSensorFocusAction >
template<>
struct MD5Sum< ::kortex_driver::DoSensorFocusActionResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::DoSensorFocusAction >::value();
  }
  static const char* value(const ::kortex_driver::DoSensorFocusActionResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::DoSensorFocusActionResponse> should match
// service_traits::DataType< ::kortex_driver::DoSensorFocusAction >
template<>
struct DataType< ::kortex_driver::DoSensorFocusActionResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::DoSensorFocusAction >::value();
  }
  static const char* value(const ::kortex_driver::DoSensorFocusActionResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_DOSENSORFOCUSACTION_H
