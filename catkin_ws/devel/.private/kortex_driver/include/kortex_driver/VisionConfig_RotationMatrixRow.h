// Generated by gencpp from file kortex_driver/VisionConfig_RotationMatrixRow.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_VISIONCONFIG_ROTATIONMATRIXROW_H
#define KORTEX_DRIVER_MESSAGE_VISIONCONFIG_ROTATIONMATRIXROW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct VisionConfig_RotationMatrixRow_
{
  typedef VisionConfig_RotationMatrixRow_<ContainerAllocator> Type;

  VisionConfig_RotationMatrixRow_()
    : column1(0.0)
    , column2(0.0)
    , column3(0.0)  {
    }
  VisionConfig_RotationMatrixRow_(const ContainerAllocator& _alloc)
    : column1(0.0)
    , column2(0.0)
    , column3(0.0)  {
  (void)_alloc;
    }



   typedef float _column1_type;
  _column1_type column1;

   typedef float _column2_type;
  _column2_type column2;

   typedef float _column3_type;
  _column3_type column3;





  typedef boost::shared_ptr< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> const> ConstPtr;

}; // struct VisionConfig_RotationMatrixRow_

typedef ::kortex_driver::VisionConfig_RotationMatrixRow_<std::allocator<void> > VisionConfig_RotationMatrixRow;

typedef boost::shared_ptr< ::kortex_driver::VisionConfig_RotationMatrixRow > VisionConfig_RotationMatrixRowPtr;
typedef boost::shared_ptr< ::kortex_driver::VisionConfig_RotationMatrixRow const> VisionConfig_RotationMatrixRowConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator1> & lhs, const ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator2> & rhs)
{
  return lhs.column1 == rhs.column1 &&
    lhs.column2 == rhs.column2 &&
    lhs.column3 == rhs.column3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator1> & lhs, const ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7749fbbc183a47c4c30d1e4e586c8b66";
  }

  static const char* value(const ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7749fbbc183a47c4ULL;
  static const uint64_t static_value2 = 0xc30d1e4e586c8b66ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/VisionConfig_RotationMatrixRow";
  }

  static const char* value(const ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float32 column1\n"
"float32 column2\n"
"float32 column3\n"
;
  }

  static const char* value(const ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.column1);
      stream.next(m.column2);
      stream.next(m.column3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VisionConfig_RotationMatrixRow_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::VisionConfig_RotationMatrixRow_<ContainerAllocator>& v)
  {
    s << indent << "column1: ";
    Printer<float>::stream(s, indent + "  ", v.column1);
    s << indent << "column2: ";
    Printer<float>::stream(s, indent + "  ", v.column2);
    s << indent << "column3: ";
    Printer<float>::stream(s, indent + "  ", v.column3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_VISIONCONFIG_ROTATIONMATRIXROW_H
