// Generated by gencpp from file kortex_driver/Unit.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_UNIT_H
#define KORTEX_DRIVER_MESSAGE_UNIT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct Unit_
{
  typedef Unit_<ContainerAllocator> Type;

  Unit_()
    {
    }
  Unit_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSPECIFIED_UNIT)
  #undef UNSPECIFIED_UNIT
#endif
#if defined(_WIN32) && defined(CELSIUS)
  #undef CELSIUS
#endif
#if defined(_WIN32) && defined(AMPERE)
  #undef AMPERE
#endif
#if defined(_WIN32) && defined(VOLT)
  #undef VOLT
#endif
#if defined(_WIN32) && defined(METER_PER_SECOND)
  #undef METER_PER_SECOND
#endif
#if defined(_WIN32) && defined(DEGREE_PER_SECOND)
  #undef DEGREE_PER_SECOND
#endif
#if defined(_WIN32) && defined(METER_PER_SECOND_2)
  #undef METER_PER_SECOND_2
#endif
#if defined(_WIN32) && defined(DEGREE_PER_SECOND_2)
  #undef DEGREE_PER_SECOND_2
#endif
#if defined(_WIN32) && defined(NEWTON)
  #undef NEWTON
#endif
#if defined(_WIN32) && defined(NEWTON_METER)
  #undef NEWTON_METER
#endif
#if defined(_WIN32) && defined(KILOGRAM)
  #undef KILOGRAM
#endif
#if defined(_WIN32) && defined(DEGREE)
  #undef DEGREE
#endif
#if defined(_WIN32) && defined(TICK)
  #undef TICK
#endif
#if defined(_WIN32) && defined(DEGREE_PER_MILLISECOND)
  #undef DEGREE_PER_MILLISECOND
#endif

  enum {
    UNSPECIFIED_UNIT = 0u,
    CELSIUS = 1u,
    AMPERE = 2u,
    VOLT = 3u,
    METER_PER_SECOND = 4u,
    DEGREE_PER_SECOND = 5u,
    METER_PER_SECOND_2 = 6u,
    DEGREE_PER_SECOND_2 = 7u,
    NEWTON = 8u,
    NEWTON_METER = 9u,
    KILOGRAM = 10u,
    DEGREE = 11u,
    TICK = 12u,
    DEGREE_PER_MILLISECOND = 13u,
  };


  typedef boost::shared_ptr< ::kortex_driver::Unit_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::Unit_<ContainerAllocator> const> ConstPtr;

}; // struct Unit_

typedef ::kortex_driver::Unit_<std::allocator<void> > Unit;

typedef boost::shared_ptr< ::kortex_driver::Unit > UnitPtr;
typedef boost::shared_ptr< ::kortex_driver::Unit const> UnitConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::Unit_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::Unit_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::Unit_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::Unit_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::Unit_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::Unit_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::Unit_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::Unit_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::Unit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38eeb5ea9959fe1af60e856b88a5f9a7";
  }

  static const char* value(const ::kortex_driver::Unit_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38eeb5ea9959fe1aULL;
  static const uint64_t static_value2 = 0xf60e856b88a5f9a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::Unit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/Unit";
  }

  static const char* value(const ::kortex_driver::Unit_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::Unit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNSPECIFIED_UNIT = 0\n"
"\n"
"uint32 CELSIUS = 1\n"
"\n"
"uint32 AMPERE = 2\n"
"\n"
"uint32 VOLT = 3\n"
"\n"
"uint32 METER_PER_SECOND = 4\n"
"\n"
"uint32 DEGREE_PER_SECOND = 5\n"
"\n"
"uint32 METER_PER_SECOND_2 = 6\n"
"\n"
"uint32 DEGREE_PER_SECOND_2 = 7\n"
"\n"
"uint32 NEWTON = 8\n"
"\n"
"uint32 NEWTON_METER = 9\n"
"\n"
"uint32 KILOGRAM = 10\n"
"\n"
"uint32 DEGREE = 11\n"
"\n"
"uint32 TICK = 12\n"
"\n"
"uint32 DEGREE_PER_MILLISECOND = 13\n"
;
  }

  static const char* value(const ::kortex_driver::Unit_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::Unit_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Unit_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::Unit_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::Unit_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_UNIT_H
