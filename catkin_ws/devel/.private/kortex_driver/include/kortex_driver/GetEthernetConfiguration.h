// Generated by gencpp from file kortex_driver/GetEthernetConfiguration.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETETHERNETCONFIGURATION_H
#define KORTEX_DRIVER_MESSAGE_GETETHERNETCONFIGURATION_H

#include <ros/service_traits.h>


#include <kortex_driver/GetEthernetConfigurationRequest.h>
#include <kortex_driver/GetEthernetConfigurationResponse.h>


namespace kortex_driver
{

struct GetEthernetConfiguration
{

typedef GetEthernetConfigurationRequest Request;
typedef GetEthernetConfigurationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetEthernetConfiguration
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetEthernetConfiguration > {
  static const char* value()
  {
    return "d50fb352c6ad553c74cb37db16e3d609";
  }

  static const char* value(const ::kortex_driver::GetEthernetConfiguration&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetEthernetConfiguration > {
  static const char* value()
  {
    return "kortex_driver/GetEthernetConfiguration";
  }

  static const char* value(const ::kortex_driver::GetEthernetConfiguration&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetEthernetConfigurationRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetEthernetConfiguration >
template<>
struct MD5Sum< ::kortex_driver::GetEthernetConfigurationRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetEthernetConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::GetEthernetConfigurationRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetEthernetConfigurationRequest> should match
// service_traits::DataType< ::kortex_driver::GetEthernetConfiguration >
template<>
struct DataType< ::kortex_driver::GetEthernetConfigurationRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetEthernetConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::GetEthernetConfigurationRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetEthernetConfigurationResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetEthernetConfiguration >
template<>
struct MD5Sum< ::kortex_driver::GetEthernetConfigurationResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetEthernetConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::GetEthernetConfigurationResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetEthernetConfigurationResponse> should match
// service_traits::DataType< ::kortex_driver::GetEthernetConfiguration >
template<>
struct DataType< ::kortex_driver::GetEthernetConfigurationResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetEthernetConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::GetEthernetConfigurationResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETETHERNETCONFIGURATION_H
