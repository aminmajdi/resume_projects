// Generated by gencpp from file kortex_driver/SetControlLoopParameters.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_SETCONTROLLOOPPARAMETERS_H
#define KORTEX_DRIVER_MESSAGE_SETCONTROLLOOPPARAMETERS_H

#include <ros/service_traits.h>


#include <kortex_driver/SetControlLoopParametersRequest.h>
#include <kortex_driver/SetControlLoopParametersResponse.h>


namespace kortex_driver
{

struct SetControlLoopParameters
{

typedef SetControlLoopParametersRequest Request;
typedef SetControlLoopParametersResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct SetControlLoopParameters
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::SetControlLoopParameters > {
  static const char* value()
  {
    return "233c2c0defb94e1f2d65e518d2df07b0";
  }

  static const char* value(const ::kortex_driver::SetControlLoopParameters&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::SetControlLoopParameters > {
  static const char* value()
  {
    return "kortex_driver/SetControlLoopParameters";
  }

  static const char* value(const ::kortex_driver::SetControlLoopParameters&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::SetControlLoopParametersRequest> should match
// service_traits::MD5Sum< ::kortex_driver::SetControlLoopParameters >
template<>
struct MD5Sum< ::kortex_driver::SetControlLoopParametersRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::SetControlLoopParameters >::value();
  }
  static const char* value(const ::kortex_driver::SetControlLoopParametersRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::SetControlLoopParametersRequest> should match
// service_traits::DataType< ::kortex_driver::SetControlLoopParameters >
template<>
struct DataType< ::kortex_driver::SetControlLoopParametersRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::SetControlLoopParameters >::value();
  }
  static const char* value(const ::kortex_driver::SetControlLoopParametersRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::SetControlLoopParametersResponse> should match
// service_traits::MD5Sum< ::kortex_driver::SetControlLoopParameters >
template<>
struct MD5Sum< ::kortex_driver::SetControlLoopParametersResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::SetControlLoopParameters >::value();
  }
  static const char* value(const ::kortex_driver::SetControlLoopParametersResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::SetControlLoopParametersResponse> should match
// service_traits::DataType< ::kortex_driver::SetControlLoopParameters >
template<>
struct DataType< ::kortex_driver::SetControlLoopParametersResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::SetControlLoopParameters >::value();
  }
  static const char* value(const ::kortex_driver::SetControlLoopParametersResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_SETCONTROLLOOPPARAMETERS_H
