// Generated by gencpp from file kortex_driver/DeviceConfig_CapSenseMode.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_DEVICECONFIG_CAPSENSEMODE_H
#define KORTEX_DRIVER_MESSAGE_DEVICECONFIG_CAPSENSEMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct DeviceConfig_CapSenseMode_
{
  typedef DeviceConfig_CapSenseMode_<ContainerAllocator> Type;

  DeviceConfig_CapSenseMode_()
    {
    }
  DeviceConfig_CapSenseMode_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RESERVED)
  #undef RESERVED
#endif
#if defined(_WIN32) && defined(INACTIVE)
  #undef INACTIVE
#endif
#if defined(_WIN32) && defined(ACTIVE_AUTO_THRESHOLD)
  #undef ACTIVE_AUTO_THRESHOLD
#endif
#if defined(_WIN32) && defined(ACTIVE_NOISE_ATT)
  #undef ACTIVE_NOISE_ATT
#endif
#if defined(_WIN32) && defined(ACTIVE_NORMAL)
  #undef ACTIVE_NORMAL
#endif
#if defined(_WIN32) && defined(CONFIGURATION)
  #undef CONFIGURATION
#endif

  enum {
    RESERVED = 0u,
    INACTIVE = 1u,
    ACTIVE_AUTO_THRESHOLD = 2u,
    ACTIVE_NOISE_ATT = 4u,
    ACTIVE_NORMAL = 5u,
    CONFIGURATION = 6u,
  };


  typedef boost::shared_ptr< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> const> ConstPtr;

}; // struct DeviceConfig_CapSenseMode_

typedef ::kortex_driver::DeviceConfig_CapSenseMode_<std::allocator<void> > DeviceConfig_CapSenseMode;

typedef boost::shared_ptr< ::kortex_driver::DeviceConfig_CapSenseMode > DeviceConfig_CapSenseModePtr;
typedef boost::shared_ptr< ::kortex_driver::DeviceConfig_CapSenseMode const> DeviceConfig_CapSenseModeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab37ae8a57a132b00bf1d50bed534551";
  }

  static const char* value(const ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab37ae8a57a132b0ULL;
  static const uint64_t static_value2 = 0x0bf1d50bed534551ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/DeviceConfig_CapSenseMode";
  }

  static const char* value(const ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 RESERVED = 0\n"
"\n"
"uint32 INACTIVE = 1\n"
"\n"
"uint32 ACTIVE_AUTO_THRESHOLD = 2\n"
"\n"
"uint32 ACTIVE_NOISE_ATT = 4\n"
"\n"
"uint32 ACTIVE_NORMAL = 5\n"
"\n"
"uint32 CONFIGURATION = 6\n"
;
  }

  static const char* value(const ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeviceConfig_CapSenseMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::DeviceConfig_CapSenseMode_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_DEVICECONFIG_CAPSENSEMODE_H
