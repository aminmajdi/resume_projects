// Generated by gencpp from file kortex_driver/ResetTwistAngularSoftLimit.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_RESETTWISTANGULARSOFTLIMIT_H
#define KORTEX_DRIVER_MESSAGE_RESETTWISTANGULARSOFTLIMIT_H

#include <ros/service_traits.h>


#include <kortex_driver/ResetTwistAngularSoftLimitRequest.h>
#include <kortex_driver/ResetTwistAngularSoftLimitResponse.h>


namespace kortex_driver
{

struct ResetTwistAngularSoftLimit
{

typedef ResetTwistAngularSoftLimitRequest Request;
typedef ResetTwistAngularSoftLimitResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct ResetTwistAngularSoftLimit
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::ResetTwistAngularSoftLimit > {
  static const char* value()
  {
    return "24d97d0cfe0dd3c18032abd06a33780b";
  }

  static const char* value(const ::kortex_driver::ResetTwistAngularSoftLimit&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::ResetTwistAngularSoftLimit > {
  static const char* value()
  {
    return "kortex_driver/ResetTwistAngularSoftLimit";
  }

  static const char* value(const ::kortex_driver::ResetTwistAngularSoftLimit&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::ResetTwistAngularSoftLimitRequest> should match
// service_traits::MD5Sum< ::kortex_driver::ResetTwistAngularSoftLimit >
template<>
struct MD5Sum< ::kortex_driver::ResetTwistAngularSoftLimitRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::ResetTwistAngularSoftLimit >::value();
  }
  static const char* value(const ::kortex_driver::ResetTwistAngularSoftLimitRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::ResetTwistAngularSoftLimitRequest> should match
// service_traits::DataType< ::kortex_driver::ResetTwistAngularSoftLimit >
template<>
struct DataType< ::kortex_driver::ResetTwistAngularSoftLimitRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::ResetTwistAngularSoftLimit >::value();
  }
  static const char* value(const ::kortex_driver::ResetTwistAngularSoftLimitRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::ResetTwistAngularSoftLimitResponse> should match
// service_traits::MD5Sum< ::kortex_driver::ResetTwistAngularSoftLimit >
template<>
struct MD5Sum< ::kortex_driver::ResetTwistAngularSoftLimitResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::ResetTwistAngularSoftLimit >::value();
  }
  static const char* value(const ::kortex_driver::ResetTwistAngularSoftLimitResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::ResetTwistAngularSoftLimitResponse> should match
// service_traits::DataType< ::kortex_driver::ResetTwistAngularSoftLimit >
template<>
struct DataType< ::kortex_driver::ResetTwistAngularSoftLimitResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::ResetTwistAngularSoftLimit >::value();
  }
  static const char* value(const ::kortex_driver::ResetTwistAngularSoftLimitResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_RESETTWISTANGULARSOFTLIMIT_H
