// Generated by gencpp from file kortex_driver/ActionEvent.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_ACTIONEVENT_H
#define KORTEX_DRIVER_MESSAGE_ACTIONEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct ActionEvent_
{
  typedef ActionEvent_<ContainerAllocator> Type;

  ActionEvent_()
    {
    }
  ActionEvent_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSPECIFIED_ACTION_EVENT)
  #undef UNSPECIFIED_ACTION_EVENT
#endif
#if defined(_WIN32) && defined(ACTION_END)
  #undef ACTION_END
#endif
#if defined(_WIN32) && defined(ACTION_ABORT)
  #undef ACTION_ABORT
#endif
#if defined(_WIN32) && defined(ACTION_PAUSE)
  #undef ACTION_PAUSE
#endif
#if defined(_WIN32) && defined(ACTION_START)
  #undef ACTION_START
#endif
#if defined(_WIN32) && defined(ACTION_PREPROCESS_START)
  #undef ACTION_PREPROCESS_START
#endif
#if defined(_WIN32) && defined(ACTION_PREPROCESS_ABORT)
  #undef ACTION_PREPROCESS_ABORT
#endif
#if defined(_WIN32) && defined(ACTION_PREPROCESS_END)
  #undef ACTION_PREPROCESS_END
#endif
#if defined(_WIN32) && defined(ACTION_POSTPROCESS_START)
  #undef ACTION_POSTPROCESS_START
#endif
#if defined(_WIN32) && defined(ACTION_POSTPROCESS_ABORT)
  #undef ACTION_POSTPROCESS_ABORT
#endif
#if defined(_WIN32) && defined(ACTION_POSTPROCESS_END)
  #undef ACTION_POSTPROCESS_END
#endif

  enum {
    UNSPECIFIED_ACTION_EVENT = 0u,
    ACTION_END = 1u,
    ACTION_ABORT = 2u,
    ACTION_PAUSE = 3u,
    ACTION_START = 4u,
    ACTION_PREPROCESS_START = 5u,
    ACTION_PREPROCESS_ABORT = 6u,
    ACTION_PREPROCESS_END = 7u,
    ACTION_POSTPROCESS_START = 8u,
    ACTION_POSTPROCESS_ABORT = 9u,
    ACTION_POSTPROCESS_END = 10u,
  };


  typedef boost::shared_ptr< ::kortex_driver::ActionEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::ActionEvent_<ContainerAllocator> const> ConstPtr;

}; // struct ActionEvent_

typedef ::kortex_driver::ActionEvent_<std::allocator<void> > ActionEvent;

typedef boost::shared_ptr< ::kortex_driver::ActionEvent > ActionEventPtr;
typedef boost::shared_ptr< ::kortex_driver::ActionEvent const> ActionEventConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::ActionEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::ActionEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ActionEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ActionEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ActionEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ActionEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ActionEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ActionEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::ActionEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c0e10f0c6e64a798ab960bfa608ac72";
  }

  static const char* value(const ::kortex_driver::ActionEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c0e10f0c6e64a79ULL;
  static const uint64_t static_value2 = 0x8ab960bfa608ac72ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::ActionEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/ActionEvent";
  }

  static const char* value(const ::kortex_driver::ActionEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::ActionEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNSPECIFIED_ACTION_EVENT = 0\n"
"\n"
"uint32 ACTION_END = 1\n"
"\n"
"uint32 ACTION_ABORT = 2\n"
"\n"
"uint32 ACTION_PAUSE = 3\n"
"\n"
"uint32 ACTION_START = 4\n"
"\n"
"uint32 ACTION_PREPROCESS_START = 5\n"
"\n"
"uint32 ACTION_PREPROCESS_ABORT = 6\n"
"\n"
"uint32 ACTION_PREPROCESS_END = 7\n"
"\n"
"uint32 ACTION_POSTPROCESS_START = 8\n"
"\n"
"uint32 ACTION_POSTPROCESS_ABORT = 9\n"
"\n"
"uint32 ACTION_POSTPROCESS_END = 10\n"
;
  }

  static const char* value(const ::kortex_driver::ActionEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::ActionEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::ActionEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::ActionEvent_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_ACTIONEVENT_H
