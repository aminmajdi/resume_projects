// Generated by gencpp from file kortex_driver/Resolution.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_RESOLUTION_H
#define KORTEX_DRIVER_MESSAGE_RESOLUTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct Resolution_
{
  typedef Resolution_<ContainerAllocator> Type;

  Resolution_()
    {
    }
  Resolution_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RESOLUTION_UNSPECIFIED)
  #undef RESOLUTION_UNSPECIFIED
#endif
#if defined(_WIN32) && defined(RESOLUTION_320x240)
  #undef RESOLUTION_320x240
#endif
#if defined(_WIN32) && defined(RESOLUTION_424x240)
  #undef RESOLUTION_424x240
#endif
#if defined(_WIN32) && defined(RESOLUTION_480x270)
  #undef RESOLUTION_480x270
#endif
#if defined(_WIN32) && defined(RESOLUTION_640x480)
  #undef RESOLUTION_640x480
#endif
#if defined(_WIN32) && defined(RESOLUTION_1280x720)
  #undef RESOLUTION_1280x720
#endif
#if defined(_WIN32) && defined(RESOLUTION_1920x1080)
  #undef RESOLUTION_1920x1080
#endif

  enum {
    RESOLUTION_UNSPECIFIED = 0u,
    RESOLUTION_320x240 = 1u,
    RESOLUTION_424x240 = 2u,
    RESOLUTION_480x270 = 3u,
    RESOLUTION_640x480 = 4u,
    RESOLUTION_1280x720 = 5u,
    RESOLUTION_1920x1080 = 6u,
  };


  typedef boost::shared_ptr< ::kortex_driver::Resolution_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::Resolution_<ContainerAllocator> const> ConstPtr;

}; // struct Resolution_

typedef ::kortex_driver::Resolution_<std::allocator<void> > Resolution;

typedef boost::shared_ptr< ::kortex_driver::Resolution > ResolutionPtr;
typedef boost::shared_ptr< ::kortex_driver::Resolution const> ResolutionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::Resolution_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::Resolution_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::Resolution_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::Resolution_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::Resolution_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::Resolution_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::Resolution_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::Resolution_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::Resolution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa3fc86ed5b2ab08e6ab3385eebb39de";
  }

  static const char* value(const ::kortex_driver::Resolution_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa3fc86ed5b2ab08ULL;
  static const uint64_t static_value2 = 0xe6ab3385eebb39deULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::Resolution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/Resolution";
  }

  static const char* value(const ::kortex_driver::Resolution_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::Resolution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 RESOLUTION_UNSPECIFIED = 0\n"
"\n"
"uint32 RESOLUTION_320x240 = 1\n"
"\n"
"uint32 RESOLUTION_424x240 = 2\n"
"\n"
"uint32 RESOLUTION_480x270 = 3\n"
"\n"
"uint32 RESOLUTION_640x480 = 4\n"
"\n"
"uint32 RESOLUTION_1280x720 = 5\n"
"\n"
"uint32 RESOLUTION_1920x1080 = 6\n"
;
  }

  static const char* value(const ::kortex_driver::Resolution_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::Resolution_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Resolution_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::Resolution_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::Resolution_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_RESOLUTION_H
