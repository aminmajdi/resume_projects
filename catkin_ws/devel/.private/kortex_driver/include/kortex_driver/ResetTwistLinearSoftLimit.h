// Generated by gencpp from file kortex_driver/ResetTwistLinearSoftLimit.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_RESETTWISTLINEARSOFTLIMIT_H
#define KORTEX_DRIVER_MESSAGE_RESETTWISTLINEARSOFTLIMIT_H

#include <ros/service_traits.h>


#include <kortex_driver/ResetTwistLinearSoftLimitRequest.h>
#include <kortex_driver/ResetTwistLinearSoftLimitResponse.h>


namespace kortex_driver
{

struct ResetTwistLinearSoftLimit
{

typedef ResetTwistLinearSoftLimitRequest Request;
typedef ResetTwistLinearSoftLimitResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct ResetTwistLinearSoftLimit
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::ResetTwistLinearSoftLimit > {
  static const char* value()
  {
    return "277326cfb7b831ac01de5d007b623790";
  }

  static const char* value(const ::kortex_driver::ResetTwistLinearSoftLimit&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::ResetTwistLinearSoftLimit > {
  static const char* value()
  {
    return "kortex_driver/ResetTwistLinearSoftLimit";
  }

  static const char* value(const ::kortex_driver::ResetTwistLinearSoftLimit&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::ResetTwistLinearSoftLimitRequest> should match
// service_traits::MD5Sum< ::kortex_driver::ResetTwistLinearSoftLimit >
template<>
struct MD5Sum< ::kortex_driver::ResetTwistLinearSoftLimitRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::ResetTwistLinearSoftLimit >::value();
  }
  static const char* value(const ::kortex_driver::ResetTwistLinearSoftLimitRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::ResetTwistLinearSoftLimitRequest> should match
// service_traits::DataType< ::kortex_driver::ResetTwistLinearSoftLimit >
template<>
struct DataType< ::kortex_driver::ResetTwistLinearSoftLimitRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::ResetTwistLinearSoftLimit >::value();
  }
  static const char* value(const ::kortex_driver::ResetTwistLinearSoftLimitRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::ResetTwistLinearSoftLimitResponse> should match
// service_traits::MD5Sum< ::kortex_driver::ResetTwistLinearSoftLimit >
template<>
struct MD5Sum< ::kortex_driver::ResetTwistLinearSoftLimitResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::ResetTwistLinearSoftLimit >::value();
  }
  static const char* value(const ::kortex_driver::ResetTwistLinearSoftLimitResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::ResetTwistLinearSoftLimitResponse> should match
// service_traits::DataType< ::kortex_driver::ResetTwistLinearSoftLimit >
template<>
struct DataType< ::kortex_driver::ResetTwistLinearSoftLimitResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::ResetTwistLinearSoftLimit >::value();
  }
  static const char* value(const ::kortex_driver::ResetTwistLinearSoftLimitResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_RESETTWISTLINEARSOFTLIMIT_H
