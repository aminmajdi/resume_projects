// Generated by gencpp from file kortex_driver/ArmState.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_ARMSTATE_H
#define KORTEX_DRIVER_MESSAGE_ARMSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct ArmState_
{
  typedef ArmState_<ContainerAllocator> Type;

  ArmState_()
    {
    }
  ArmState_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ARMSTATE_UNSPECIFIED)
  #undef ARMSTATE_UNSPECIFIED
#endif
#if defined(_WIN32) && defined(ARMSTATE_BASE_INITIALIZATION)
  #undef ARMSTATE_BASE_INITIALIZATION
#endif
#if defined(_WIN32) && defined(ARMSTATE_IDLE)
  #undef ARMSTATE_IDLE
#endif
#if defined(_WIN32) && defined(ARMSTATE_INITIALIZATION)
  #undef ARMSTATE_INITIALIZATION
#endif
#if defined(_WIN32) && defined(ARMSTATE_IN_FAULT)
  #undef ARMSTATE_IN_FAULT
#endif
#if defined(_WIN32) && defined(ARMSTATE_MAINTENANCE)
  #undef ARMSTATE_MAINTENANCE
#endif
#if defined(_WIN32) && defined(ARMSTATE_SERVOING_LOW_LEVEL)
  #undef ARMSTATE_SERVOING_LOW_LEVEL
#endif
#if defined(_WIN32) && defined(ARMSTATE_SERVOING_READY)
  #undef ARMSTATE_SERVOING_READY
#endif
#if defined(_WIN32) && defined(ARMSTATE_SERVOING_PLAYING_SEQUENCE)
  #undef ARMSTATE_SERVOING_PLAYING_SEQUENCE
#endif
#if defined(_WIN32) && defined(ARMSTATE_SERVOING_MANUALLY_CONTROLLED)
  #undef ARMSTATE_SERVOING_MANUALLY_CONTROLLED
#endif
#if defined(_WIN32) && defined(ARMSTATE_RESERVED)
  #undef ARMSTATE_RESERVED
#endif

  enum {
    ARMSTATE_UNSPECIFIED = 0u,
    ARMSTATE_BASE_INITIALIZATION = 1u,
    ARMSTATE_IDLE = 2u,
    ARMSTATE_INITIALIZATION = 3u,
    ARMSTATE_IN_FAULT = 4u,
    ARMSTATE_MAINTENANCE = 5u,
    ARMSTATE_SERVOING_LOW_LEVEL = 6u,
    ARMSTATE_SERVOING_READY = 7u,
    ARMSTATE_SERVOING_PLAYING_SEQUENCE = 8u,
    ARMSTATE_SERVOING_MANUALLY_CONTROLLED = 9u,
    ARMSTATE_RESERVED = 255u,
  };


  typedef boost::shared_ptr< ::kortex_driver::ArmState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::ArmState_<ContainerAllocator> const> ConstPtr;

}; // struct ArmState_

typedef ::kortex_driver::ArmState_<std::allocator<void> > ArmState;

typedef boost::shared_ptr< ::kortex_driver::ArmState > ArmStatePtr;
typedef boost::shared_ptr< ::kortex_driver::ArmState const> ArmStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::ArmState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::ArmState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ArmState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ArmState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ArmState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ArmState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ArmState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ArmState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::ArmState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4059bbce9572ae5a7aa7be1fed554ee1";
  }

  static const char* value(const ::kortex_driver::ArmState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4059bbce9572ae5aULL;
  static const uint64_t static_value2 = 0x7aa7be1fed554ee1ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::ArmState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/ArmState";
  }

  static const char* value(const ::kortex_driver::ArmState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::ArmState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 ARMSTATE_UNSPECIFIED = 0\n"
"\n"
"uint32 ARMSTATE_BASE_INITIALIZATION = 1\n"
"\n"
"uint32 ARMSTATE_IDLE = 2\n"
"\n"
"uint32 ARMSTATE_INITIALIZATION = 3\n"
"\n"
"uint32 ARMSTATE_IN_FAULT = 4\n"
"\n"
"uint32 ARMSTATE_MAINTENANCE = 5\n"
"\n"
"uint32 ARMSTATE_SERVOING_LOW_LEVEL = 6\n"
"\n"
"uint32 ARMSTATE_SERVOING_READY = 7\n"
"\n"
"uint32 ARMSTATE_SERVOING_PLAYING_SEQUENCE = 8\n"
"\n"
"uint32 ARMSTATE_SERVOING_MANUALLY_CONTROLLED = 9\n"
"\n"
"uint32 ARMSTATE_RESERVED = 255\n"
;
  }

  static const char* value(const ::kortex_driver::ArmState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::ArmState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::ArmState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::ArmState_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_ARMSTATE_H
