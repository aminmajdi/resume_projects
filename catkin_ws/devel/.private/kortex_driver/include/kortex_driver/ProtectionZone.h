// Generated by gencpp from file kortex_driver/ProtectionZone.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_PROTECTIONZONE_H
#define KORTEX_DRIVER_MESSAGE_PROTECTIONZONE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/ProtectionZoneHandle.h>
#include <kortex_driver/ZoneShape.h>
#include <kortex_driver/CartesianLimitation.h>
#include <kortex_driver/CartesianLimitation.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct ProtectionZone_
{
  typedef ProtectionZone_<ContainerAllocator> Type;

  ProtectionZone_()
    : handle()
    , name()
    , application_data()
    , is_enabled(false)
    , shape()
    , limitations()
    , envelope_limitations()  {
    }
  ProtectionZone_(const ContainerAllocator& _alloc)
    : handle(_alloc)
    , name(_alloc)
    , application_data(_alloc)
    , is_enabled(false)
    , shape(_alloc)
    , limitations(_alloc)
    , envelope_limitations(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kortex_driver::ProtectionZoneHandle_<ContainerAllocator>  _handle_type;
  _handle_type handle;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _application_data_type;
  _application_data_type application_data;

   typedef uint8_t _is_enabled_type;
  _is_enabled_type is_enabled;

   typedef  ::kortex_driver::ZoneShape_<ContainerAllocator>  _shape_type;
  _shape_type shape;

   typedef std::vector< ::kortex_driver::CartesianLimitation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::CartesianLimitation_<ContainerAllocator> >::other >  _limitations_type;
  _limitations_type limitations;

   typedef std::vector< ::kortex_driver::CartesianLimitation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::CartesianLimitation_<ContainerAllocator> >::other >  _envelope_limitations_type;
  _envelope_limitations_type envelope_limitations;





  typedef boost::shared_ptr< ::kortex_driver::ProtectionZone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::ProtectionZone_<ContainerAllocator> const> ConstPtr;

}; // struct ProtectionZone_

typedef ::kortex_driver::ProtectionZone_<std::allocator<void> > ProtectionZone;

typedef boost::shared_ptr< ::kortex_driver::ProtectionZone > ProtectionZonePtr;
typedef boost::shared_ptr< ::kortex_driver::ProtectionZone const> ProtectionZoneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::ProtectionZone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::ProtectionZone_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::ProtectionZone_<ContainerAllocator1> & lhs, const ::kortex_driver::ProtectionZone_<ContainerAllocator2> & rhs)
{
  return lhs.handle == rhs.handle &&
    lhs.name == rhs.name &&
    lhs.application_data == rhs.application_data &&
    lhs.is_enabled == rhs.is_enabled &&
    lhs.shape == rhs.shape &&
    lhs.limitations == rhs.limitations &&
    lhs.envelope_limitations == rhs.envelope_limitations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::ProtectionZone_<ContainerAllocator1> & lhs, const ::kortex_driver::ProtectionZone_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ProtectionZone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ProtectionZone_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ProtectionZone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ProtectionZone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ProtectionZone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ProtectionZone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::ProtectionZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9648b3590ddbe012236cdc588d3f6ef8";
  }

  static const char* value(const ::kortex_driver::ProtectionZone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9648b3590ddbe012ULL;
  static const uint64_t static_value2 = 0x236cdc588d3f6ef8ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::ProtectionZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/ProtectionZone";
  }

  static const char* value(const ::kortex_driver::ProtectionZone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::ProtectionZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"ProtectionZoneHandle handle\n"
"string name\n"
"string application_data\n"
"bool is_enabled\n"
"ZoneShape shape\n"
"CartesianLimitation[] limitations\n"
"CartesianLimitation[] envelope_limitations\n"
"================================================================================\n"
"MSG: kortex_driver/ProtectionZoneHandle\n"
"\n"
"uint32 identifier\n"
"uint32 permission\n"
"================================================================================\n"
"MSG: kortex_driver/ZoneShape\n"
"\n"
"uint32 shape_type\n"
"Point origin\n"
"Base_RotationMatrix orientation\n"
"float32[] dimensions\n"
"float32 envelope_thickness\n"
"================================================================================\n"
"MSG: kortex_driver/Point\n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: kortex_driver/Base_RotationMatrix\n"
"\n"
"Base_RotationMatrixRow row1\n"
"Base_RotationMatrixRow row2\n"
"Base_RotationMatrixRow row3\n"
"================================================================================\n"
"MSG: kortex_driver/Base_RotationMatrixRow\n"
"\n"
"float32 column1\n"
"float32 column2\n"
"float32 column3\n"
"================================================================================\n"
"MSG: kortex_driver/CartesianLimitation\n"
"\n"
"uint32 type\n"
"float32 translation\n"
"float32 orientation\n"
;
  }

  static const char* value(const ::kortex_driver::ProtectionZone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::ProtectionZone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.handle);
      stream.next(m.name);
      stream.next(m.application_data);
      stream.next(m.is_enabled);
      stream.next(m.shape);
      stream.next(m.limitations);
      stream.next(m.envelope_limitations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProtectionZone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::ProtectionZone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::ProtectionZone_<ContainerAllocator>& v)
  {
    s << indent << "handle: ";
    s << std::endl;
    Printer< ::kortex_driver::ProtectionZoneHandle_<ContainerAllocator> >::stream(s, indent + "  ", v.handle);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "application_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.application_data);
    s << indent << "is_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_enabled);
    s << indent << "shape: ";
    s << std::endl;
    Printer< ::kortex_driver::ZoneShape_<ContainerAllocator> >::stream(s, indent + "  ", v.shape);
    s << indent << "limitations[]" << std::endl;
    for (size_t i = 0; i < v.limitations.size(); ++i)
    {
      s << indent << "  limitations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::CartesianLimitation_<ContainerAllocator> >::stream(s, indent + "    ", v.limitations[i]);
    }
    s << indent << "envelope_limitations[]" << std::endl;
    for (size_t i = 0; i < v.envelope_limitations.size(); ++i)
    {
      s << indent << "  envelope_limitations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::CartesianLimitation_<ContainerAllocator> >::stream(s, indent + "    ", v.envelope_limitations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_PROTECTIONZONE_H
