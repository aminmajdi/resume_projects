// Generated by gencpp from file kortex_driver/AxisOffsets.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_AXISOFFSETS_H
#define KORTEX_DRIVER_MESSAGE_AXISOFFSETS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct AxisOffsets_
{
  typedef AxisOffsets_<ContainerAllocator> Type;

  AxisOffsets_()
    : absolute_offset(0.0)
    , relative_offset(0.0)  {
    }
  AxisOffsets_(const ContainerAllocator& _alloc)
    : absolute_offset(0.0)
    , relative_offset(0.0)  {
  (void)_alloc;
    }



   typedef float _absolute_offset_type;
  _absolute_offset_type absolute_offset;

   typedef float _relative_offset_type;
  _relative_offset_type relative_offset;





  typedef boost::shared_ptr< ::kortex_driver::AxisOffsets_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::AxisOffsets_<ContainerAllocator> const> ConstPtr;

}; // struct AxisOffsets_

typedef ::kortex_driver::AxisOffsets_<std::allocator<void> > AxisOffsets;

typedef boost::shared_ptr< ::kortex_driver::AxisOffsets > AxisOffsetsPtr;
typedef boost::shared_ptr< ::kortex_driver::AxisOffsets const> AxisOffsetsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::AxisOffsets_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::AxisOffsets_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::AxisOffsets_<ContainerAllocator1> & lhs, const ::kortex_driver::AxisOffsets_<ContainerAllocator2> & rhs)
{
  return lhs.absolute_offset == rhs.absolute_offset &&
    lhs.relative_offset == rhs.relative_offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::AxisOffsets_<ContainerAllocator1> & lhs, const ::kortex_driver::AxisOffsets_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::AxisOffsets_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::AxisOffsets_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::AxisOffsets_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::AxisOffsets_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::AxisOffsets_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::AxisOffsets_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::AxisOffsets_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2cf10c1327fbdc40ecc0a83625568f5b";
  }

  static const char* value(const ::kortex_driver::AxisOffsets_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2cf10c1327fbdc40ULL;
  static const uint64_t static_value2 = 0xecc0a83625568f5bULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::AxisOffsets_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/AxisOffsets";
  }

  static const char* value(const ::kortex_driver::AxisOffsets_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::AxisOffsets_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float32 absolute_offset\n"
"float32 relative_offset\n"
;
  }

  static const char* value(const ::kortex_driver::AxisOffsets_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::AxisOffsets_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.absolute_offset);
      stream.next(m.relative_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AxisOffsets_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::AxisOffsets_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::AxisOffsets_<ContainerAllocator>& v)
  {
    s << indent << "absolute_offset: ";
    Printer<float>::stream(s, indent + "  ", v.absolute_offset);
    s << indent << "relative_offset: ";
    Printer<float>::stream(s, indent + "  ", v.relative_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_AXISOFFSETS_H
