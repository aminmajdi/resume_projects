// Generated by gencpp from file kortex_driver/ServoingModeNotification.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_SERVOINGMODENOTIFICATION_H
#define KORTEX_DRIVER_MESSAGE_SERVOINGMODENOTIFICATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/Timestamp.h>
#include <kortex_driver/UserProfileHandle.h>
#include <kortex_driver/Connection.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct ServoingModeNotification_
{
  typedef ServoingModeNotification_<ContainerAllocator> Type;

  ServoingModeNotification_()
    : servoing_mode(0)
    , timestamp()
    , user_handle()
    , connection()  {
    }
  ServoingModeNotification_(const ContainerAllocator& _alloc)
    : servoing_mode(0)
    , timestamp(_alloc)
    , user_handle(_alloc)
    , connection(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _servoing_mode_type;
  _servoing_mode_type servoing_mode;

   typedef  ::kortex_driver::Timestamp_<ContainerAllocator>  _timestamp_type;
  _timestamp_type timestamp;

   typedef  ::kortex_driver::UserProfileHandle_<ContainerAllocator>  _user_handle_type;
  _user_handle_type user_handle;

   typedef  ::kortex_driver::Connection_<ContainerAllocator>  _connection_type;
  _connection_type connection;





  typedef boost::shared_ptr< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> const> ConstPtr;

}; // struct ServoingModeNotification_

typedef ::kortex_driver::ServoingModeNotification_<std::allocator<void> > ServoingModeNotification;

typedef boost::shared_ptr< ::kortex_driver::ServoingModeNotification > ServoingModeNotificationPtr;
typedef boost::shared_ptr< ::kortex_driver::ServoingModeNotification const> ServoingModeNotificationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::ServoingModeNotification_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::ServoingModeNotification_<ContainerAllocator1> & lhs, const ::kortex_driver::ServoingModeNotification_<ContainerAllocator2> & rhs)
{
  return lhs.servoing_mode == rhs.servoing_mode &&
    lhs.timestamp == rhs.timestamp &&
    lhs.user_handle == rhs.user_handle &&
    lhs.connection == rhs.connection;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::ServoingModeNotification_<ContainerAllocator1> & lhs, const ::kortex_driver::ServoingModeNotification_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbaaac12490fcae846b29cc0756b4494";
  }

  static const char* value(const ::kortex_driver::ServoingModeNotification_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbaaac12490fcae8ULL;
  static const uint64_t static_value2 = 0x46b29cc0756b4494ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/ServoingModeNotification";
  }

  static const char* value(const ::kortex_driver::ServoingModeNotification_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 servoing_mode\n"
"Timestamp timestamp\n"
"UserProfileHandle user_handle\n"
"Connection connection\n"
"================================================================================\n"
"MSG: kortex_driver/Timestamp\n"
"\n"
"uint32 sec\n"
"uint32 usec\n"
"================================================================================\n"
"MSG: kortex_driver/UserProfileHandle\n"
"\n"
"uint32 identifier\n"
"uint32 permission\n"
"================================================================================\n"
"MSG: kortex_driver/Connection\n"
"\n"
"UserProfileHandle user_handle\n"
"string connection_information\n"
"uint32 connection_identifier\n"
;
  }

  static const char* value(const ::kortex_driver::ServoingModeNotification_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servoing_mode);
      stream.next(m.timestamp);
      stream.next(m.user_handle);
      stream.next(m.connection);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoingModeNotification_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::ServoingModeNotification_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::ServoingModeNotification_<ContainerAllocator>& v)
  {
    s << indent << "servoing_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.servoing_mode);
    s << indent << "timestamp: ";
    s << std::endl;
    Printer< ::kortex_driver::Timestamp_<ContainerAllocator> >::stream(s, indent + "  ", v.timestamp);
    s << indent << "user_handle: ";
    s << std::endl;
    Printer< ::kortex_driver::UserProfileHandle_<ContainerAllocator> >::stream(s, indent + "  ", v.user_handle);
    s << indent << "connection: ";
    s << std::endl;
    Printer< ::kortex_driver::Connection_<ContainerAllocator> >::stream(s, indent + "  ", v.connection);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_SERVOINGMODENOTIFICATION_H
