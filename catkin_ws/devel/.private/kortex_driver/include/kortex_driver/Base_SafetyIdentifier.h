// Generated by gencpp from file kortex_driver/Base_SafetyIdentifier.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_BASE_SAFETYIDENTIFIER_H
#define KORTEX_DRIVER_MESSAGE_BASE_SAFETYIDENTIFIER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct Base_SafetyIdentifier_
{
  typedef Base_SafetyIdentifier_<ContainerAllocator> Type;

  Base_SafetyIdentifier_()
    {
    }
  Base_SafetyIdentifier_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSPECIFIED_BASE_SAFETY_IDENTIFIER)
  #undef UNSPECIFIED_BASE_SAFETY_IDENTIFIER
#endif
#if defined(_WIN32) && defined(FIRMWARE_UPDATE_FAILURE)
  #undef FIRMWARE_UPDATE_FAILURE
#endif
#if defined(_WIN32) && defined(EXTERNAL_COMMUNICATION_ERROR)
  #undef EXTERNAL_COMMUNICATION_ERROR
#endif
#if defined(_WIN32) && defined(MAXIMUM_AMBIENT_TEMPERATURE)
  #undef MAXIMUM_AMBIENT_TEMPERATURE
#endif
#if defined(_WIN32) && defined(MAXIMUM_CORE_TEMPERATURE)
  #undef MAXIMUM_CORE_TEMPERATURE
#endif
#if defined(_WIN32) && defined(JOINT_FAULT)
  #undef JOINT_FAULT
#endif
#if defined(_WIN32) && defined(CYCLIC_DATA_JITTER)
  #undef CYCLIC_DATA_JITTER
#endif
#if defined(_WIN32) && defined(REACHED_MAXIMUM_EVENT_LOGS)
  #undef REACHED_MAXIMUM_EVENT_LOGS
#endif
#if defined(_WIN32) && defined(NO_KINEMATICS_SUPPORT)
  #undef NO_KINEMATICS_SUPPORT
#endif
#if defined(_WIN32) && defined(ABOVE_MAXIMUM_DOF)
  #undef ABOVE_MAXIMUM_DOF
#endif
#if defined(_WIN32) && defined(NETWORK_ERROR)
  #undef NETWORK_ERROR
#endif
#if defined(_WIN32) && defined(UNABLE_TO_REACH_POSE)
  #undef UNABLE_TO_REACH_POSE
#endif
#if defined(_WIN32) && defined(JOINT_DETECTION_ERROR)
  #undef JOINT_DETECTION_ERROR
#endif
#if defined(_WIN32) && defined(NETWORK_INITIALIZATION_ERROR)
  #undef NETWORK_INITIALIZATION_ERROR
#endif
#if defined(_WIN32) && defined(MAXIMUM_CURRENT)
  #undef MAXIMUM_CURRENT
#endif
#if defined(_WIN32) && defined(MAXIMUM_VOLTAGE)
  #undef MAXIMUM_VOLTAGE
#endif
#if defined(_WIN32) && defined(MINIMUM_VOLTAGE)
  #undef MINIMUM_VOLTAGE
#endif
#if defined(_WIN32) && defined(MAXIMUM_END_EFFECTOR_TRANSLATION_VELOCITY)
  #undef MAXIMUM_END_EFFECTOR_TRANSLATION_VELOCITY
#endif
#if defined(_WIN32) && defined(MAXIMUM_END_EFFECTOR_ORIENTATION_VELOCITY)
  #undef MAXIMUM_END_EFFECTOR_ORIENTATION_VELOCITY
#endif
#if defined(_WIN32) && defined(MAXIMUM_END_EFFECTOR_TRANSLATION_ACCELERATION)
  #undef MAXIMUM_END_EFFECTOR_TRANSLATION_ACCELERATION
#endif
#if defined(_WIN32) && defined(MAXIMUM_END_EFFECTOR_ORIENTATION_ACCELERATION)
  #undef MAXIMUM_END_EFFECTOR_ORIENTATION_ACCELERATION
#endif
#if defined(_WIN32) && defined(MAXIMUM_END_EFFECTOR_TRANSLATION_FORCE)
  #undef MAXIMUM_END_EFFECTOR_TRANSLATION_FORCE
#endif
#if defined(_WIN32) && defined(MAXIMUM_END_EFFECTOR_ORIENTATION_FORCE)
  #undef MAXIMUM_END_EFFECTOR_ORIENTATION_FORCE
#endif
#if defined(_WIN32) && defined(MAXIMUM_END_EFFECTOR_PAYLOAD)
  #undef MAXIMUM_END_EFFECTOR_PAYLOAD
#endif
#if defined(_WIN32) && defined(EMERGENCY_STOP_ACTIVATED)
  #undef EMERGENCY_STOP_ACTIVATED
#endif
#if defined(_WIN32) && defined(EMERGENCY_LINE_ACTIVATED)
  #undef EMERGENCY_LINE_ACTIVATED
#endif
#if defined(_WIN32) && defined(INRUSH_CURRENT_LIMITER_FAULT)
  #undef INRUSH_CURRENT_LIMITER_FAULT
#endif
#if defined(_WIN32) && defined(NVRAM_CORRUPTED)
  #undef NVRAM_CORRUPTED
#endif
#if defined(_WIN32) && defined(INCOMPATIBLE_FIRMWARE_VERSION)
  #undef INCOMPATIBLE_FIRMWARE_VERSION
#endif
#if defined(_WIN32) && defined(POWERON_SELF_TEST_FAILURE)
  #undef POWERON_SELF_TEST_FAILURE
#endif
#if defined(_WIN32) && defined(DISCRETE_INPUT_STUCK_ACTIVE)
  #undef DISCRETE_INPUT_STUCK_ACTIVE
#endif
#if defined(_WIN32) && defined(ARM_INTO_ILLEGAL_POSITION)
  #undef ARM_INTO_ILLEGAL_POSITION
#endif

  enum {
    UNSPECIFIED_BASE_SAFETY_IDENTIFIER = 0u,
    FIRMWARE_UPDATE_FAILURE = 1u,
    EXTERNAL_COMMUNICATION_ERROR = 2u,
    MAXIMUM_AMBIENT_TEMPERATURE = 4u,
    MAXIMUM_CORE_TEMPERATURE = 8u,
    JOINT_FAULT = 16u,
    CYCLIC_DATA_JITTER = 32u,
    REACHED_MAXIMUM_EVENT_LOGS = 64u,
    NO_KINEMATICS_SUPPORT = 128u,
    ABOVE_MAXIMUM_DOF = 256u,
    NETWORK_ERROR = 512u,
    UNABLE_TO_REACH_POSE = 1024u,
    JOINT_DETECTION_ERROR = 2048u,
    NETWORK_INITIALIZATION_ERROR = 4096u,
    MAXIMUM_CURRENT = 8192u,
    MAXIMUM_VOLTAGE = 16384u,
    MINIMUM_VOLTAGE = 32768u,
    MAXIMUM_END_EFFECTOR_TRANSLATION_VELOCITY = 65536u,
    MAXIMUM_END_EFFECTOR_ORIENTATION_VELOCITY = 131072u,
    MAXIMUM_END_EFFECTOR_TRANSLATION_ACCELERATION = 262144u,
    MAXIMUM_END_EFFECTOR_ORIENTATION_ACCELERATION = 524288u,
    MAXIMUM_END_EFFECTOR_TRANSLATION_FORCE = 1048576u,
    MAXIMUM_END_EFFECTOR_ORIENTATION_FORCE = 2097152u,
    MAXIMUM_END_EFFECTOR_PAYLOAD = 4194304u,
    EMERGENCY_STOP_ACTIVATED = 8388608u,
    EMERGENCY_LINE_ACTIVATED = 16777216u,
    INRUSH_CURRENT_LIMITER_FAULT = 33554432u,
    NVRAM_CORRUPTED = 67108864u,
    INCOMPATIBLE_FIRMWARE_VERSION = 134217728u,
    POWERON_SELF_TEST_FAILURE = 268435456u,
    DISCRETE_INPUT_STUCK_ACTIVE = 536870912u,
    ARM_INTO_ILLEGAL_POSITION = 1073741824u,
  };


  typedef boost::shared_ptr< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> const> ConstPtr;

}; // struct Base_SafetyIdentifier_

typedef ::kortex_driver::Base_SafetyIdentifier_<std::allocator<void> > Base_SafetyIdentifier;

typedef boost::shared_ptr< ::kortex_driver::Base_SafetyIdentifier > Base_SafetyIdentifierPtr;
typedef boost::shared_ptr< ::kortex_driver::Base_SafetyIdentifier const> Base_SafetyIdentifierConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2792acd1b9a60f6127a7d70c0807df25";
  }

  static const char* value(const ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2792acd1b9a60f61ULL;
  static const uint64_t static_value2 = 0x27a7d70c0807df25ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/Base_SafetyIdentifier";
  }

  static const char* value(const ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNSPECIFIED_BASE_SAFETY_IDENTIFIER = 0\n"
"\n"
"uint32 FIRMWARE_UPDATE_FAILURE = 1\n"
"\n"
"uint32 EXTERNAL_COMMUNICATION_ERROR = 2\n"
"\n"
"uint32 MAXIMUM_AMBIENT_TEMPERATURE = 4\n"
"\n"
"uint32 MAXIMUM_CORE_TEMPERATURE = 8\n"
"\n"
"uint32 JOINT_FAULT = 16\n"
"\n"
"uint32 CYCLIC_DATA_JITTER = 32\n"
"\n"
"uint32 REACHED_MAXIMUM_EVENT_LOGS = 64\n"
"\n"
"uint32 NO_KINEMATICS_SUPPORT = 128\n"
"\n"
"uint32 ABOVE_MAXIMUM_DOF = 256\n"
"\n"
"uint32 NETWORK_ERROR = 512\n"
"\n"
"uint32 UNABLE_TO_REACH_POSE = 1024\n"
"\n"
"uint32 JOINT_DETECTION_ERROR = 2048\n"
"\n"
"uint32 NETWORK_INITIALIZATION_ERROR = 4096\n"
"\n"
"uint32 MAXIMUM_CURRENT = 8192\n"
"\n"
"uint32 MAXIMUM_VOLTAGE = 16384\n"
"\n"
"uint32 MINIMUM_VOLTAGE = 32768\n"
"\n"
"uint32 MAXIMUM_END_EFFECTOR_TRANSLATION_VELOCITY = 65536\n"
"\n"
"uint32 MAXIMUM_END_EFFECTOR_ORIENTATION_VELOCITY = 131072\n"
"\n"
"uint32 MAXIMUM_END_EFFECTOR_TRANSLATION_ACCELERATION = 262144\n"
"\n"
"uint32 MAXIMUM_END_EFFECTOR_ORIENTATION_ACCELERATION = 524288\n"
"\n"
"uint32 MAXIMUM_END_EFFECTOR_TRANSLATION_FORCE = 1048576\n"
"\n"
"uint32 MAXIMUM_END_EFFECTOR_ORIENTATION_FORCE = 2097152\n"
"\n"
"uint32 MAXIMUM_END_EFFECTOR_PAYLOAD = 4194304\n"
"\n"
"uint32 EMERGENCY_STOP_ACTIVATED = 8388608\n"
"\n"
"uint32 EMERGENCY_LINE_ACTIVATED = 16777216\n"
"\n"
"uint32 INRUSH_CURRENT_LIMITER_FAULT = 33554432\n"
"\n"
"uint32 NVRAM_CORRUPTED = 67108864\n"
"\n"
"uint32 INCOMPATIBLE_FIRMWARE_VERSION = 134217728\n"
"\n"
"uint32 POWERON_SELF_TEST_FAILURE = 268435456\n"
"\n"
"uint32 DISCRETE_INPUT_STUCK_ACTIVE = 536870912\n"
"\n"
"uint32 ARM_INTO_ILLEGAL_POSITION = 1073741824\n"
;
  }

  static const char* value(const ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Base_SafetyIdentifier_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::Base_SafetyIdentifier_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_BASE_SAFETYIDENTIFIER_H
