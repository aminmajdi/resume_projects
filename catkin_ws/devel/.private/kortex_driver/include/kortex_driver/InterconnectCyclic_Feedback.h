// Generated by gencpp from file kortex_driver/InterconnectCyclic_Feedback.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_INTERCONNECTCYCLIC_FEEDBACK_H
#define KORTEX_DRIVER_MESSAGE_INTERCONNECTCYCLIC_FEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/InterconnectCyclic_MessageId.h>
#include <kortex_driver/InterconnectCyclic_Feedback_tool_feedback.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct InterconnectCyclic_Feedback_
{
  typedef InterconnectCyclic_Feedback_<ContainerAllocator> Type;

  InterconnectCyclic_Feedback_()
    : feedback_id()
    , status_flags(0)
    , jitter_comm(0)
    , imu_acceleration_x(0.0)
    , imu_acceleration_y(0.0)
    , imu_acceleration_z(0.0)
    , imu_angular_velocity_x(0.0)
    , imu_angular_velocity_y(0.0)
    , imu_angular_velocity_z(0.0)
    , voltage(0.0)
    , temperature_core(0.0)
    , fault_bank_a(0)
    , fault_bank_b(0)
    , warning_bank_a(0)
    , warning_bank_b(0)
    , oneof_tool_feedback()  {
    }
  InterconnectCyclic_Feedback_(const ContainerAllocator& _alloc)
    : feedback_id(_alloc)
    , status_flags(0)
    , jitter_comm(0)
    , imu_acceleration_x(0.0)
    , imu_acceleration_y(0.0)
    , imu_acceleration_z(0.0)
    , imu_angular_velocity_x(0.0)
    , imu_angular_velocity_y(0.0)
    , imu_angular_velocity_z(0.0)
    , voltage(0.0)
    , temperature_core(0.0)
    , fault_bank_a(0)
    , fault_bank_b(0)
    , warning_bank_a(0)
    , warning_bank_b(0)
    , oneof_tool_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kortex_driver::InterconnectCyclic_MessageId_<ContainerAllocator>  _feedback_id_type;
  _feedback_id_type feedback_id;

   typedef uint32_t _status_flags_type;
  _status_flags_type status_flags;

   typedef uint32_t _jitter_comm_type;
  _jitter_comm_type jitter_comm;

   typedef float _imu_acceleration_x_type;
  _imu_acceleration_x_type imu_acceleration_x;

   typedef float _imu_acceleration_y_type;
  _imu_acceleration_y_type imu_acceleration_y;

   typedef float _imu_acceleration_z_type;
  _imu_acceleration_z_type imu_acceleration_z;

   typedef float _imu_angular_velocity_x_type;
  _imu_angular_velocity_x_type imu_angular_velocity_x;

   typedef float _imu_angular_velocity_y_type;
  _imu_angular_velocity_y_type imu_angular_velocity_y;

   typedef float _imu_angular_velocity_z_type;
  _imu_angular_velocity_z_type imu_angular_velocity_z;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _temperature_core_type;
  _temperature_core_type temperature_core;

   typedef uint32_t _fault_bank_a_type;
  _fault_bank_a_type fault_bank_a;

   typedef uint32_t _fault_bank_b_type;
  _fault_bank_b_type fault_bank_b;

   typedef uint32_t _warning_bank_a_type;
  _warning_bank_a_type warning_bank_a;

   typedef uint32_t _warning_bank_b_type;
  _warning_bank_b_type warning_bank_b;

   typedef  ::kortex_driver::InterconnectCyclic_Feedback_tool_feedback_<ContainerAllocator>  _oneof_tool_feedback_type;
  _oneof_tool_feedback_type oneof_tool_feedback;





  typedef boost::shared_ptr< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> const> ConstPtr;

}; // struct InterconnectCyclic_Feedback_

typedef ::kortex_driver::InterconnectCyclic_Feedback_<std::allocator<void> > InterconnectCyclic_Feedback;

typedef boost::shared_ptr< ::kortex_driver::InterconnectCyclic_Feedback > InterconnectCyclic_FeedbackPtr;
typedef boost::shared_ptr< ::kortex_driver::InterconnectCyclic_Feedback const> InterconnectCyclic_FeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator1> & lhs, const ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator2> & rhs)
{
  return lhs.feedback_id == rhs.feedback_id &&
    lhs.status_flags == rhs.status_flags &&
    lhs.jitter_comm == rhs.jitter_comm &&
    lhs.imu_acceleration_x == rhs.imu_acceleration_x &&
    lhs.imu_acceleration_y == rhs.imu_acceleration_y &&
    lhs.imu_acceleration_z == rhs.imu_acceleration_z &&
    lhs.imu_angular_velocity_x == rhs.imu_angular_velocity_x &&
    lhs.imu_angular_velocity_y == rhs.imu_angular_velocity_y &&
    lhs.imu_angular_velocity_z == rhs.imu_angular_velocity_z &&
    lhs.voltage == rhs.voltage &&
    lhs.temperature_core == rhs.temperature_core &&
    lhs.fault_bank_a == rhs.fault_bank_a &&
    lhs.fault_bank_b == rhs.fault_bank_b &&
    lhs.warning_bank_a == rhs.warning_bank_a &&
    lhs.warning_bank_b == rhs.warning_bank_b &&
    lhs.oneof_tool_feedback == rhs.oneof_tool_feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator1> & lhs, const ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "927bf07b9c0ece3890499e76c04f37e4";
  }

  static const char* value(const ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x927bf07b9c0ece38ULL;
  static const uint64_t static_value2 = 0x90499e76c04f37e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/InterconnectCyclic_Feedback";
  }

  static const char* value(const ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"InterconnectCyclic_MessageId feedback_id\n"
"uint32 status_flags\n"
"uint32 jitter_comm\n"
"float32 imu_acceleration_x\n"
"float32 imu_acceleration_y\n"
"float32 imu_acceleration_z\n"
"float32 imu_angular_velocity_x\n"
"float32 imu_angular_velocity_y\n"
"float32 imu_angular_velocity_z\n"
"float32 voltage\n"
"float32 temperature_core\n"
"uint32 fault_bank_a\n"
"uint32 fault_bank_b\n"
"uint32 warning_bank_a\n"
"uint32 warning_bank_b\n"
"InterconnectCyclic_Feedback_tool_feedback oneof_tool_feedback\n"
"================================================================================\n"
"MSG: kortex_driver/InterconnectCyclic_MessageId\n"
"\n"
"uint32 identifier\n"
"================================================================================\n"
"MSG: kortex_driver/InterconnectCyclic_Feedback_tool_feedback\n"
"\n"
"GripperCyclic_Feedback[] gripper_feedback\n"
"================================================================================\n"
"MSG: kortex_driver/GripperCyclic_Feedback\n"
"\n"
"GripperCyclic_MessageId feedback_id\n"
"uint32 status_flags\n"
"uint32 fault_bank_a\n"
"uint32 fault_bank_b\n"
"uint32 warning_bank_a\n"
"uint32 warning_bank_b\n"
"MotorFeedback[] motor\n"
"================================================================================\n"
"MSG: kortex_driver/GripperCyclic_MessageId\n"
"\n"
"uint32 identifier\n"
"================================================================================\n"
"MSG: kortex_driver/MotorFeedback\n"
"\n"
"uint32 motor_id\n"
"float32 position\n"
"float32 velocity\n"
"float32 current_motor\n"
"float32 voltage\n"
"float32 temperature_motor\n"
;
  }

  static const char* value(const ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feedback_id);
      stream.next(m.status_flags);
      stream.next(m.jitter_comm);
      stream.next(m.imu_acceleration_x);
      stream.next(m.imu_acceleration_y);
      stream.next(m.imu_acceleration_z);
      stream.next(m.imu_angular_velocity_x);
      stream.next(m.imu_angular_velocity_y);
      stream.next(m.imu_angular_velocity_z);
      stream.next(m.voltage);
      stream.next(m.temperature_core);
      stream.next(m.fault_bank_a);
      stream.next(m.fault_bank_b);
      stream.next(m.warning_bank_a);
      stream.next(m.warning_bank_b);
      stream.next(m.oneof_tool_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InterconnectCyclic_Feedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::InterconnectCyclic_Feedback_<ContainerAllocator>& v)
  {
    s << indent << "feedback_id: ";
    s << std::endl;
    Printer< ::kortex_driver::InterconnectCyclic_MessageId_<ContainerAllocator> >::stream(s, indent + "  ", v.feedback_id);
    s << indent << "status_flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.status_flags);
    s << indent << "jitter_comm: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.jitter_comm);
    s << indent << "imu_acceleration_x: ";
    Printer<float>::stream(s, indent + "  ", v.imu_acceleration_x);
    s << indent << "imu_acceleration_y: ";
    Printer<float>::stream(s, indent + "  ", v.imu_acceleration_y);
    s << indent << "imu_acceleration_z: ";
    Printer<float>::stream(s, indent + "  ", v.imu_acceleration_z);
    s << indent << "imu_angular_velocity_x: ";
    Printer<float>::stream(s, indent + "  ", v.imu_angular_velocity_x);
    s << indent << "imu_angular_velocity_y: ";
    Printer<float>::stream(s, indent + "  ", v.imu_angular_velocity_y);
    s << indent << "imu_angular_velocity_z: ";
    Printer<float>::stream(s, indent + "  ", v.imu_angular_velocity_z);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "temperature_core: ";
    Printer<float>::stream(s, indent + "  ", v.temperature_core);
    s << indent << "fault_bank_a: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.fault_bank_a);
    s << indent << "fault_bank_b: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.fault_bank_b);
    s << indent << "warning_bank_a: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.warning_bank_a);
    s << indent << "warning_bank_b: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.warning_bank_b);
    s << indent << "oneof_tool_feedback: ";
    s << std::endl;
    Printer< ::kortex_driver::InterconnectCyclic_Feedback_tool_feedback_<ContainerAllocator> >::stream(s, indent + "  ", v.oneof_tool_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_INTERCONNECTCYCLIC_FEEDBACK_H
