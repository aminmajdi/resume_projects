// Generated by gencpp from file kortex_driver/ControlConfigurationEvent.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_CONTROLCONFIGURATIONEVENT_H
#define KORTEX_DRIVER_MESSAGE_CONTROLCONFIGURATIONEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct ControlConfigurationEvent_
{
  typedef ControlConfigurationEvent_<ContainerAllocator> Type;

  ControlConfigurationEvent_()
    {
    }
  ControlConfigurationEvent_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSPECIFIED_CONTROL_CONFIGURATION_EVENT)
  #undef UNSPECIFIED_CONTROL_CONFIGURATION_EVENT
#endif
#if defined(_WIN32) && defined(ANGLE_UNIT_CHANGED)
  #undef ANGLE_UNIT_CHANGED
#endif
#if defined(_WIN32) && defined(GRAVITY_VECTOR_CHANGED)
  #undef GRAVITY_VECTOR_CHANGED
#endif
#if defined(_WIN32) && defined(JOINT_ADMITTANCE_CONFIGURATION_CHANGED)
  #undef JOINT_ADMITTANCE_CONFIGURATION_CHANGED
#endif
#if defined(_WIN32) && defined(NULL_ADMITTANCE_CONFIGURATION_CHANGED)
  #undef NULL_ADMITTANCE_CONFIGURATION_CHANGED
#endif
#if defined(_WIN32) && defined(CARTESIAN_ADMITTANCE_CONFIGURATION_CHANGED)
  #undef CARTESIAN_ADMITTANCE_CONFIGURATION_CHANGED
#endif
#if defined(_WIN32) && defined(JOINT_TORQUE_HYBRID_CONFIGURATION_CHANGED)
  #undef JOINT_TORQUE_HYBRID_CONFIGURATION_CHANGED
#endif
#if defined(_WIN32) && defined(WRENCH_COMMAND_NORMAL_CONFIGURATION_CHANGED)
  #undef WRENCH_COMMAND_NORMAL_CONFIGURATION_CHANGED
#endif
#if defined(_WIN32) && defined(WRENCH_COMMAND_RESTRICTED_CONFIGURATION_CHANGED)
  #undef WRENCH_COMMAND_RESTRICTED_CONFIGURATION_CHANGED
#endif
#if defined(_WIN32) && defined(CONTROL_CONFIGURATION_FACTORY_RESTORED)
  #undef CONTROL_CONFIGURATION_FACTORY_RESTORED
#endif
#if defined(_WIN32) && defined(TOOL_CONFIGURATION_CHANGED)
  #undef TOOL_CONFIGURATION_CHANGED
#endif
#if defined(_WIN32) && defined(PAYLOAD_CONFIGURATION_CHANGED)
  #undef PAYLOAD_CONFIGURATION_CHANGED
#endif
#if defined(_WIN32) && defined(CARTESIAN_REFERENCE_CHANGED)
  #undef CARTESIAN_REFERENCE_CHANGED
#endif
#if defined(_WIN32) && defined(CHANGE_CONTROL_MODE_FAILED)
  #undef CHANGE_CONTROL_MODE_FAILED
#endif
#if defined(_WIN32) && defined(JOINT_SPEED_SOFT_LIMITS_CHANGED)
  #undef JOINT_SPEED_SOFT_LIMITS_CHANGED
#endif
#if defined(_WIN32) && defined(TWIST_LINEAR_SOFT_LIMIT_CHANGED)
  #undef TWIST_LINEAR_SOFT_LIMIT_CHANGED
#endif
#if defined(_WIN32) && defined(TWIST_ANGULAR_SOFT_LIMIT_CHANGED)
  #undef TWIST_ANGULAR_SOFT_LIMIT_CHANGED
#endif
#if defined(_WIN32) && defined(JOINT_ACCELERATION_SOFT_LIMITS_CHANGED)
  #undef JOINT_ACCELERATION_SOFT_LIMITS_CHANGED
#endif
#if defined(_WIN32) && defined(DESIRED_TWIST_LINEAR_SPEED_CHANGED)
  #undef DESIRED_TWIST_LINEAR_SPEED_CHANGED
#endif
#if defined(_WIN32) && defined(DESIRED_TWIST_ANGULAR_SPEED_CHANGED)
  #undef DESIRED_TWIST_ANGULAR_SPEED_CHANGED
#endif
#if defined(_WIN32) && defined(DESIRED_JOINT_SPEED_CHANGED)
  #undef DESIRED_JOINT_SPEED_CHANGED
#endif

  enum {
    UNSPECIFIED_CONTROL_CONFIGURATION_EVENT = 0u,
    ANGLE_UNIT_CHANGED = 1u,
    GRAVITY_VECTOR_CHANGED = 2u,
    JOINT_ADMITTANCE_CONFIGURATION_CHANGED = 4u,
    NULL_ADMITTANCE_CONFIGURATION_CHANGED = 5u,
    CARTESIAN_ADMITTANCE_CONFIGURATION_CHANGED = 6u,
    JOINT_TORQUE_HYBRID_CONFIGURATION_CHANGED = 7u,
    WRENCH_COMMAND_NORMAL_CONFIGURATION_CHANGED = 8u,
    WRENCH_COMMAND_RESTRICTED_CONFIGURATION_CHANGED = 9u,
    CONTROL_CONFIGURATION_FACTORY_RESTORED = 10u,
    TOOL_CONFIGURATION_CHANGED = 11u,
    PAYLOAD_CONFIGURATION_CHANGED = 12u,
    CARTESIAN_REFERENCE_CHANGED = 13u,
    CHANGE_CONTROL_MODE_FAILED = 14u,
    JOINT_SPEED_SOFT_LIMITS_CHANGED = 16u,
    TWIST_LINEAR_SOFT_LIMIT_CHANGED = 17u,
    TWIST_ANGULAR_SOFT_LIMIT_CHANGED = 18u,
    JOINT_ACCELERATION_SOFT_LIMITS_CHANGED = 19u,
    DESIRED_TWIST_LINEAR_SPEED_CHANGED = 20u,
    DESIRED_TWIST_ANGULAR_SPEED_CHANGED = 21u,
    DESIRED_JOINT_SPEED_CHANGED = 22u,
  };


  typedef boost::shared_ptr< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> const> ConstPtr;

}; // struct ControlConfigurationEvent_

typedef ::kortex_driver::ControlConfigurationEvent_<std::allocator<void> > ControlConfigurationEvent;

typedef boost::shared_ptr< ::kortex_driver::ControlConfigurationEvent > ControlConfigurationEventPtr;
typedef boost::shared_ptr< ::kortex_driver::ControlConfigurationEvent const> ControlConfigurationEventConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5aa2a442ccb0c93e20aaef58c6149541";
  }

  static const char* value(const ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5aa2a442ccb0c93eULL;
  static const uint64_t static_value2 = 0x20aaef58c6149541ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/ControlConfigurationEvent";
  }

  static const char* value(const ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNSPECIFIED_CONTROL_CONFIGURATION_EVENT = 0\n"
"\n"
"uint32 ANGLE_UNIT_CHANGED = 1\n"
"\n"
"uint32 GRAVITY_VECTOR_CHANGED = 2\n"
"\n"
"uint32 JOINT_ADMITTANCE_CONFIGURATION_CHANGED = 4\n"
"\n"
"uint32 NULL_ADMITTANCE_CONFIGURATION_CHANGED = 5\n"
"\n"
"uint32 CARTESIAN_ADMITTANCE_CONFIGURATION_CHANGED = 6\n"
"\n"
"uint32 JOINT_TORQUE_HYBRID_CONFIGURATION_CHANGED = 7\n"
"\n"
"uint32 WRENCH_COMMAND_NORMAL_CONFIGURATION_CHANGED = 8\n"
"\n"
"uint32 WRENCH_COMMAND_RESTRICTED_CONFIGURATION_CHANGED = 9\n"
"\n"
"uint32 CONTROL_CONFIGURATION_FACTORY_RESTORED = 10\n"
"\n"
"uint32 TOOL_CONFIGURATION_CHANGED = 11\n"
"\n"
"uint32 PAYLOAD_CONFIGURATION_CHANGED = 12\n"
"\n"
"uint32 CARTESIAN_REFERENCE_CHANGED = 13\n"
"\n"
"uint32 CHANGE_CONTROL_MODE_FAILED = 14\n"
"\n"
"uint32 JOINT_SPEED_SOFT_LIMITS_CHANGED = 16\n"
"\n"
"uint32 TWIST_LINEAR_SOFT_LIMIT_CHANGED = 17\n"
"\n"
"uint32 TWIST_ANGULAR_SOFT_LIMIT_CHANGED = 18\n"
"\n"
"uint32 JOINT_ACCELERATION_SOFT_LIMITS_CHANGED = 19\n"
"\n"
"uint32 DESIRED_TWIST_LINEAR_SPEED_CHANGED = 20\n"
"\n"
"uint32 DESIRED_TWIST_ANGULAR_SPEED_CHANGED = 21\n"
"\n"
"uint32 DESIRED_JOINT_SPEED_CHANGED = 22\n"
;
  }

  static const char* value(const ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlConfigurationEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::ControlConfigurationEvent_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_CONTROLCONFIGURATIONEVENT_H
