// Generated by gencpp from file kortex_driver/FirmwareBundleVersions.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_FIRMWAREBUNDLEVERSIONS_H
#define KORTEX_DRIVER_MESSAGE_FIRMWAREBUNDLEVERSIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/FirmwareComponentVersion.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct FirmwareBundleVersions_
{
  typedef FirmwareBundleVersions_<ContainerAllocator> Type;

  FirmwareBundleVersions_()
    : main_bundle_version()
    , components_versions()  {
    }
  FirmwareBundleVersions_(const ContainerAllocator& _alloc)
    : main_bundle_version(_alloc)
    , components_versions(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _main_bundle_version_type;
  _main_bundle_version_type main_bundle_version;

   typedef std::vector< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> >::other >  _components_versions_type;
  _components_versions_type components_versions;





  typedef boost::shared_ptr< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> const> ConstPtr;

}; // struct FirmwareBundleVersions_

typedef ::kortex_driver::FirmwareBundleVersions_<std::allocator<void> > FirmwareBundleVersions;

typedef boost::shared_ptr< ::kortex_driver::FirmwareBundleVersions > FirmwareBundleVersionsPtr;
typedef boost::shared_ptr< ::kortex_driver::FirmwareBundleVersions const> FirmwareBundleVersionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator1> & lhs, const ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator2> & rhs)
{
  return lhs.main_bundle_version == rhs.main_bundle_version &&
    lhs.components_versions == rhs.components_versions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator1> & lhs, const ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4f9de789ae8af0bd7b668a4f8f7ed49";
  }

  static const char* value(const ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4f9de789ae8af0bULL;
  static const uint64_t static_value2 = 0xd7b668a4f8f7ed49ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/FirmwareBundleVersions";
  }

  static const char* value(const ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string main_bundle_version\n"
"FirmwareComponentVersion[] components_versions\n"
"================================================================================\n"
"MSG: kortex_driver/FirmwareComponentVersion\n"
"\n"
"string name\n"
"string version\n"
"uint32 device_id\n"
;
  }

  static const char* value(const ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.main_bundle_version);
      stream.next(m.components_versions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FirmwareBundleVersions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::FirmwareBundleVersions_<ContainerAllocator>& v)
  {
    s << indent << "main_bundle_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.main_bundle_version);
    s << indent << "components_versions[]" << std::endl;
    for (size_t i = 0; i < v.components_versions.size(); ++i)
    {
      s << indent << "  components_versions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> >::stream(s, indent + "    ", v.components_versions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_FIRMWAREBUNDLEVERSIONS_H
