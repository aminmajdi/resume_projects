// Generated by gencpp from file kortex_driver/ControllerElementHandle_identifier.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_CONTROLLERELEMENTHANDLE_IDENTIFIER_H
#define KORTEX_DRIVER_MESSAGE_CONTROLLERELEMENTHANDLE_IDENTIFIER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct ControllerElementHandle_identifier_
{
  typedef ControllerElementHandle_identifier_<ContainerAllocator> Type;

  ControllerElementHandle_identifier_()
    : button()
    , axis()  {
    }
  ControllerElementHandle_identifier_(const ContainerAllocator& _alloc)
    : button(_alloc)
    , axis(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _button_type;
  _button_type button;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _axis_type;
  _axis_type axis;





  typedef boost::shared_ptr< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerElementHandle_identifier_

typedef ::kortex_driver::ControllerElementHandle_identifier_<std::allocator<void> > ControllerElementHandle_identifier;

typedef boost::shared_ptr< ::kortex_driver::ControllerElementHandle_identifier > ControllerElementHandle_identifierPtr;
typedef boost::shared_ptr< ::kortex_driver::ControllerElementHandle_identifier const> ControllerElementHandle_identifierConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator1> & lhs, const ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator2> & rhs)
{
  return lhs.button == rhs.button &&
    lhs.axis == rhs.axis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator1> & lhs, const ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41dfd5b8a1f2350cdbaae4a32c67f201";
  }

  static const char* value(const ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41dfd5b8a1f2350cULL;
  static const uint64_t static_value2 = 0xdbaae4a32c67f201ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/ControllerElementHandle_identifier";
  }

  static const char* value(const ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32[] button\n"
"uint32[] axis\n"
;
  }

  static const char* value(const ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.button);
      stream.next(m.axis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerElementHandle_identifier_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::ControllerElementHandle_identifier_<ContainerAllocator>& v)
  {
    s << indent << "button[]" << std::endl;
    for (size_t i = 0; i < v.button.size(); ++i)
    {
      s << indent << "  button[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.button[i]);
    }
    s << indent << "axis[]" << std::endl;
    for (size_t i = 0; i < v.axis.size(); ++i)
    {
      s << indent << "  axis[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.axis[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_CONTROLLERELEMENTHANDLE_IDENTIFIER_H
