// Generated by gencpp from file kortex_driver/OnNotificationVisionTopic.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_ONNOTIFICATIONVISIONTOPIC_H
#define KORTEX_DRIVER_MESSAGE_ONNOTIFICATIONVISIONTOPIC_H

#include <ros/service_traits.h>


#include <kortex_driver/OnNotificationVisionTopicRequest.h>
#include <kortex_driver/OnNotificationVisionTopicResponse.h>


namespace kortex_driver
{

struct OnNotificationVisionTopic
{

typedef OnNotificationVisionTopicRequest Request;
typedef OnNotificationVisionTopicResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct OnNotificationVisionTopic
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::OnNotificationVisionTopic > {
  static const char* value()
  {
    return "6fefdd07c6cb63a94f7b48e7e07e815b";
  }

  static const char* value(const ::kortex_driver::OnNotificationVisionTopic&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::OnNotificationVisionTopic > {
  static const char* value()
  {
    return "kortex_driver/OnNotificationVisionTopic";
  }

  static const char* value(const ::kortex_driver::OnNotificationVisionTopic&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::OnNotificationVisionTopicRequest> should match
// service_traits::MD5Sum< ::kortex_driver::OnNotificationVisionTopic >
template<>
struct MD5Sum< ::kortex_driver::OnNotificationVisionTopicRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::OnNotificationVisionTopic >::value();
  }
  static const char* value(const ::kortex_driver::OnNotificationVisionTopicRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::OnNotificationVisionTopicRequest> should match
// service_traits::DataType< ::kortex_driver::OnNotificationVisionTopic >
template<>
struct DataType< ::kortex_driver::OnNotificationVisionTopicRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::OnNotificationVisionTopic >::value();
  }
  static const char* value(const ::kortex_driver::OnNotificationVisionTopicRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::OnNotificationVisionTopicResponse> should match
// service_traits::MD5Sum< ::kortex_driver::OnNotificationVisionTopic >
template<>
struct MD5Sum< ::kortex_driver::OnNotificationVisionTopicResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::OnNotificationVisionTopic >::value();
  }
  static const char* value(const ::kortex_driver::OnNotificationVisionTopicResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::OnNotificationVisionTopicResponse> should match
// service_traits::DataType< ::kortex_driver::OnNotificationVisionTopic >
template<>
struct DataType< ::kortex_driver::OnNotificationVisionTopicResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::OnNotificationVisionTopic >::value();
  }
  static const char* value(const ::kortex_driver::OnNotificationVisionTopicResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_ONNOTIFICATIONVISIONTOPIC_H
