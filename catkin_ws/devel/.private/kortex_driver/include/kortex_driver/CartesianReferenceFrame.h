// Generated by gencpp from file kortex_driver/CartesianReferenceFrame.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_CARTESIANREFERENCEFRAME_H
#define KORTEX_DRIVER_MESSAGE_CARTESIANREFERENCEFRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct CartesianReferenceFrame_
{
  typedef CartesianReferenceFrame_<ContainerAllocator> Type;

  CartesianReferenceFrame_()
    {
    }
  CartesianReferenceFrame_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CARTESIAN_REFERENCE_FRAME_UNSPECIFIED)
  #undef CARTESIAN_REFERENCE_FRAME_UNSPECIFIED
#endif
#if defined(_WIN32) && defined(CARTESIAN_REFERENCE_FRAME_MIXED)
  #undef CARTESIAN_REFERENCE_FRAME_MIXED
#endif
#if defined(_WIN32) && defined(CARTESIAN_REFERENCE_FRAME_TOOL)
  #undef CARTESIAN_REFERENCE_FRAME_TOOL
#endif
#if defined(_WIN32) && defined(CARTESIAN_REFERENCE_FRAME_BASE)
  #undef CARTESIAN_REFERENCE_FRAME_BASE
#endif

  enum {
    CARTESIAN_REFERENCE_FRAME_UNSPECIFIED = 0u,
    CARTESIAN_REFERENCE_FRAME_MIXED = 1u,
    CARTESIAN_REFERENCE_FRAME_TOOL = 2u,
    CARTESIAN_REFERENCE_FRAME_BASE = 3u,
  };


  typedef boost::shared_ptr< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianReferenceFrame_

typedef ::kortex_driver::CartesianReferenceFrame_<std::allocator<void> > CartesianReferenceFrame;

typedef boost::shared_ptr< ::kortex_driver::CartesianReferenceFrame > CartesianReferenceFramePtr;
typedef boost::shared_ptr< ::kortex_driver::CartesianReferenceFrame const> CartesianReferenceFrameConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82b14912eebdea49eac0f3e20689bea8";
  }

  static const char* value(const ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82b14912eebdea49ULL;
  static const uint64_t static_value2 = 0xeac0f3e20689bea8ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/CartesianReferenceFrame";
  }

  static const char* value(const ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 CARTESIAN_REFERENCE_FRAME_UNSPECIFIED = 0\n"
"\n"
"uint32 CARTESIAN_REFERENCE_FRAME_MIXED = 1\n"
"\n"
"uint32 CARTESIAN_REFERENCE_FRAME_TOOL = 2\n"
"\n"
"uint32 CARTESIAN_REFERENCE_FRAME_BASE = 3\n"
;
  }

  static const char* value(const ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianReferenceFrame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::CartesianReferenceFrame_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_CARTESIANREFERENCEFRAME_H
