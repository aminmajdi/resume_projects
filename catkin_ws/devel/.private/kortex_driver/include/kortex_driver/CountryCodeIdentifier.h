// Generated by gencpp from file kortex_driver/CountryCodeIdentifier.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_COUNTRYCODEIDENTIFIER_H
#define KORTEX_DRIVER_MESSAGE_COUNTRYCODEIDENTIFIER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct CountryCodeIdentifier_
{
  typedef CountryCodeIdentifier_<ContainerAllocator> Type;

  CountryCodeIdentifier_()
    {
    }
  CountryCodeIdentifier_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSPECIFIED_COUNTRY_CODE)
  #undef UNSPECIFIED_COUNTRY_CODE
#endif
#if defined(_WIN32) && defined(UNITED_ARAB_EMIRATES_AE)
  #undef UNITED_ARAB_EMIRATES_AE
#endif
#if defined(_WIN32) && defined(ANTIGUA_AND_BARBUDA_AG)
  #undef ANTIGUA_AND_BARBUDA_AG
#endif
#if defined(_WIN32) && defined(ANGUILLA_AI)
  #undef ANGUILLA_AI
#endif
#if defined(_WIN32) && defined(ALBANIA_AL)
  #undef ALBANIA_AL
#endif
#if defined(_WIN32) && defined(AMERICAN_SAMOA_AS)
  #undef AMERICAN_SAMOA_AS
#endif
#if defined(_WIN32) && defined(AUSTRIA_AT)
  #undef AUSTRIA_AT
#endif
#if defined(_WIN32) && defined(AUSTRALIA_AU)
  #undef AUSTRALIA_AU
#endif
#if defined(_WIN32) && defined(ARUBA_AW)
  #undef ARUBA_AW
#endif
#if defined(_WIN32) && defined(AZERBAIJAN_AZ)
  #undef AZERBAIJAN_AZ
#endif
#if defined(_WIN32) && defined(BOSNIA_AND_HERZEGOVINA_BA)
  #undef BOSNIA_AND_HERZEGOVINA_BA
#endif
#if defined(_WIN32) && defined(BANGLADESH_BD)
  #undef BANGLADESH_BD
#endif
#if defined(_WIN32) && defined(BELGIUM_BE)
  #undef BELGIUM_BE
#endif
#if defined(_WIN32) && defined(BULGARIA_BG)
  #undef BULGARIA_BG
#endif
#if defined(_WIN32) && defined(BAHRAIN_BH)
  #undef BAHRAIN_BH
#endif
#if defined(_WIN32) && defined(BERMUDA_BM)
  #undef BERMUDA_BM
#endif
#if defined(_WIN32) && defined(BRUNEI_DARUSSALAM_BN)
  #undef BRUNEI_DARUSSALAM_BN
#endif
#if defined(_WIN32) && defined(BRAZIL_BR)
  #undef BRAZIL_BR
#endif
#if defined(_WIN32) && defined(BAHAMAS_BS)
  #undef BAHAMAS_BS
#endif
#if defined(_WIN32) && defined(BELARUS_BY)
  #undef BELARUS_BY
#endif
#if defined(_WIN32) && defined(SWITZERLAND_CH)
  #undef SWITZERLAND_CH
#endif
#if defined(_WIN32) && defined(CANADA_CA)
  #undef CANADA_CA
#endif
#if defined(_WIN32) && defined(CHINA_CN)
  #undef CHINA_CN
#endif
#if defined(_WIN32) && defined(COLOMBIA_CO)
  #undef COLOMBIA_CO
#endif
#if defined(_WIN32) && defined(COSTA_RICA_CR)
  #undef COSTA_RICA_CR
#endif
#if defined(_WIN32) && defined(CYPRUS_CY)
  #undef CYPRUS_CY
#endif
#if defined(_WIN32) && defined(CZECH_REPUBLIC_CZ)
  #undef CZECH_REPUBLIC_CZ
#endif
#if defined(_WIN32) && defined(GERMANY_DE)
  #undef GERMANY_DE
#endif
#if defined(_WIN32) && defined(DENMARK_DK)
  #undef DENMARK_DK
#endif
#if defined(_WIN32) && defined(ECUADOR_EC)
  #undef ECUADOR_EC
#endif
#if defined(_WIN32) && defined(ESTONIA_EE)
  #undef ESTONIA_EE
#endif
#if defined(_WIN32) && defined(EGYPT_EG)
  #undef EGYPT_EG
#endif
#if defined(_WIN32) && defined(SPAIN_ES)
  #undef SPAIN_ES
#endif
#if defined(_WIN32) && defined(ETHIOPIA_ET)
  #undef ETHIOPIA_ET
#endif
#if defined(_WIN32) && defined(FINLAND_FI)
  #undef FINLAND_FI
#endif
#if defined(_WIN32) && defined(FRANCE_FR)
  #undef FRANCE_FR
#endif
#if defined(_WIN32) && defined(UNITED_KINGDOM_GB)
  #undef UNITED_KINGDOM_GB
#endif
#if defined(_WIN32) && defined(GRENADA_GD)
  #undef GRENADA_GD
#endif
#if defined(_WIN32) && defined(FRENCH_GUIANA_GF)
  #undef FRENCH_GUIANA_GF
#endif
#if defined(_WIN32) && defined(GUADELOUPE_GP)
  #undef GUADELOUPE_GP
#endif
#if defined(_WIN32) && defined(GREECE_GR)
  #undef GREECE_GR
#endif
#if defined(_WIN32) && defined(GUATEMALA_GT)
  #undef GUATEMALA_GT
#endif
#if defined(_WIN32) && defined(GUAM_GU)
  #undef GUAM_GU
#endif
#if defined(_WIN32) && defined(HONG_KONG_HK)
  #undef HONG_KONG_HK
#endif
#if defined(_WIN32) && defined(CROATIA_HR)
  #undef CROATIA_HR
#endif
#if defined(_WIN32) && defined(HUNGARY_HU)
  #undef HUNGARY_HU
#endif
#if defined(_WIN32) && defined(INDIA_IN)
  #undef INDIA_IN
#endif
#if defined(_WIN32) && defined(INDONESIA_ID)
  #undef INDONESIA_ID
#endif
#if defined(_WIN32) && defined(IRELAND_IE)
  #undef IRELAND_IE
#endif
#if defined(_WIN32) && defined(ISRAEL_IL)
  #undef ISRAEL_IL
#endif
#if defined(_WIN32) && defined(ICELAND_IS)
  #undef ICELAND_IS
#endif
#if defined(_WIN32) && defined(ITALY_IT)
  #undef ITALY_IT
#endif
#if defined(_WIN32) && defined(JORDAN_JO)
  #undef JORDAN_JO
#endif
#if defined(_WIN32) && defined(JAPAN_JP)
  #undef JAPAN_JP
#endif
#if defined(_WIN32) && defined(CAMBODIA_KH)
  #undef CAMBODIA_KH
#endif
#if defined(_WIN32) && defined(REPUBLIC_OF_KOREA_KR)
  #undef REPUBLIC_OF_KOREA_KR
#endif
#if defined(_WIN32) && defined(KUWAIT_KW)
  #undef KUWAIT_KW
#endif
#if defined(_WIN32) && defined(CAYMAN_ISLANDS_KY)
  #undef CAYMAN_ISLANDS_KY
#endif
#if defined(_WIN32) && defined(LAO_PDR_LA)
  #undef LAO_PDR_LA
#endif
#if defined(_WIN32) && defined(LEBANON_LB)
  #undef LEBANON_LB
#endif
#if defined(_WIN32) && defined(LIECHTENSTEIN_LI)
  #undef LIECHTENSTEIN_LI
#endif
#if defined(_WIN32) && defined(SRI_LANKA_LK)
  #undef SRI_LANKA_LK
#endif
#if defined(_WIN32) && defined(LESOTHO_LS)
  #undef LESOTHO_LS
#endif
#if defined(_WIN32) && defined(LITHUANIA_LT)
  #undef LITHUANIA_LT
#endif
#if defined(_WIN32) && defined(LUXEMBOURG_LU)
  #undef LUXEMBOURG_LU
#endif
#if defined(_WIN32) && defined(LATVIA_LV)
  #undef LATVIA_LV
#endif
#if defined(_WIN32) && defined(MOROCCO_MA)
  #undef MOROCCO_MA
#endif
#if defined(_WIN32) && defined(MONACO_MC)
  #undef MONACO_MC
#endif
#if defined(_WIN32) && defined(MOLDOVA_MD)
  #undef MOLDOVA_MD
#endif
#if defined(_WIN32) && defined(MONTENEGRO_ME)
  #undef MONTENEGRO_ME
#endif
#if defined(_WIN32) && defined(REPUBLIC_OF_MACEDONIA_MK)
  #undef REPUBLIC_OF_MACEDONIA_MK
#endif
#if defined(_WIN32) && defined(MONGOLIA_MN)
  #undef MONGOLIA_MN
#endif
#if defined(_WIN32) && defined(MARTINIQUE_MQ)
  #undef MARTINIQUE_MQ
#endif
#if defined(_WIN32) && defined(MAURITANIA_MR)
  #undef MAURITANIA_MR
#endif
#if defined(_WIN32) && defined(MALTA_MT)
  #undef MALTA_MT
#endif
#if defined(_WIN32) && defined(MAURITIUS_MU)
  #undef MAURITIUS_MU
#endif
#if defined(_WIN32) && defined(MALDIVES_MV)
  #undef MALDIVES_MV
#endif
#if defined(_WIN32) && defined(MALAWI_MW)
  #undef MALAWI_MW
#endif
#if defined(_WIN32) && defined(MEXICO_MX)
  #undef MEXICO_MX
#endif
#if defined(_WIN32) && defined(MALAYSIA_MY)
  #undef MALAYSIA_MY
#endif
#if defined(_WIN32) && defined(NICARAGUA_NI)
  #undef NICARAGUA_NI
#endif
#if defined(_WIN32) && defined(NETHERLANDS_NL)
  #undef NETHERLANDS_NL
#endif
#if defined(_WIN32) && defined(NORWAY_NO)
  #undef NORWAY_NO
#endif
#if defined(_WIN32) && defined(NEW_ZEALAND_NZ)
  #undef NEW_ZEALAND_NZ
#endif
#if defined(_WIN32) && defined(OMAN_OM)
  #undef OMAN_OM
#endif
#if defined(_WIN32) && defined(PANAMA_PA)
  #undef PANAMA_PA
#endif
#if defined(_WIN32) && defined(PERU_PE)
  #undef PERU_PE
#endif
#if defined(_WIN32) && defined(PHILIPPINES_PH)
  #undef PHILIPPINES_PH
#endif
#if defined(_WIN32) && defined(POLAND_PL)
  #undef POLAND_PL
#endif
#if defined(_WIN32) && defined(PUERTO_RICO_PR)
  #undef PUERTO_RICO_PR
#endif
#if defined(_WIN32) && defined(PORTUGAL_PT)
  #undef PORTUGAL_PT
#endif
#if defined(_WIN32) && defined(PARAGUAY_PY)
  #undef PARAGUAY_PY
#endif
#if defined(_WIN32) && defined(REUNION_RE)
  #undef REUNION_RE
#endif
#if defined(_WIN32) && defined(ROMANIA_RO)
  #undef ROMANIA_RO
#endif
#if defined(_WIN32) && defined(SERBIA_RS)
  #undef SERBIA_RS
#endif
#if defined(_WIN32) && defined(RUSSIAN_FEDERATION_RU)
  #undef RUSSIAN_FEDERATION_RU
#endif
#if defined(_WIN32) && defined(SWEDEN_SE)
  #undef SWEDEN_SE
#endif
#if defined(_WIN32) && defined(SINGAPORE_SI)
  #undef SINGAPORE_SI
#endif
#if defined(_WIN32) && defined(SLOVAKIA_SK)
  #undef SLOVAKIA_SK
#endif
#if defined(_WIN32) && defined(EL_SALVADOR_SV)
  #undef EL_SALVADOR_SV
#endif
#if defined(_WIN32) && defined(THAILAND_TH)
  #undef THAILAND_TH
#endif
#if defined(_WIN32) && defined(TUNISIA_TN)
  #undef TUNISIA_TN
#endif
#if defined(_WIN32) && defined(TURKEY_TR)
  #undef TURKEY_TR
#endif
#if defined(_WIN32) && defined(TRINIDAD_AND_TOBAGO_TT)
  #undef TRINIDAD_AND_TOBAGO_TT
#endif
#if defined(_WIN32) && defined(TAIWAN_PROVINCE_OF_CHINA_TW)
  #undef TAIWAN_PROVINCE_OF_CHINA_TW
#endif
#if defined(_WIN32) && defined(UKRAINE_UA)
  #undef UKRAINE_UA
#endif
#if defined(_WIN32) && defined(UNITED_STATES_US)
  #undef UNITED_STATES_US
#endif
#if defined(_WIN32) && defined(HOLY_SEE_VATICAN_CITY_STATE_VA)
  #undef HOLY_SEE_VATICAN_CITY_STATE_VA
#endif
#if defined(_WIN32) && defined(BOLIVARIAN_REPUBLIC_OF_VENEZUELA_VE)
  #undef BOLIVARIAN_REPUBLIC_OF_VENEZUELA_VE
#endif
#if defined(_WIN32) && defined(BRITISH_VIRGIN_ISLANDS_VG)
  #undef BRITISH_VIRGIN_ISLANDS_VG
#endif
#if defined(_WIN32) && defined(VIETNAM_VN)
  #undef VIETNAM_VN
#endif
#if defined(_WIN32) && defined(MAYOTTE_YT)
  #undef MAYOTTE_YT
#endif
#if defined(_WIN32) && defined(SOUTH_AFRICA_ZA)
  #undef SOUTH_AFRICA_ZA
#endif

  enum {
    UNSPECIFIED_COUNTRY_CODE = 0u,
    UNITED_ARAB_EMIRATES_AE = 1u,
    ANTIGUA_AND_BARBUDA_AG = 2u,
    ANGUILLA_AI = 3u,
    ALBANIA_AL = 4u,
    AMERICAN_SAMOA_AS = 5u,
    AUSTRIA_AT = 6u,
    AUSTRALIA_AU = 7u,
    ARUBA_AW = 8u,
    AZERBAIJAN_AZ = 9u,
    BOSNIA_AND_HERZEGOVINA_BA = 10u,
    BANGLADESH_BD = 11u,
    BELGIUM_BE = 12u,
    BULGARIA_BG = 13u,
    BAHRAIN_BH = 14u,
    BERMUDA_BM = 15u,
    BRUNEI_DARUSSALAM_BN = 16u,
    BRAZIL_BR = 17u,
    BAHAMAS_BS = 18u,
    BELARUS_BY = 19u,
    SWITZERLAND_CH = 20u,
    CANADA_CA = 21u,
    CHINA_CN = 22u,
    COLOMBIA_CO = 23u,
    COSTA_RICA_CR = 24u,
    CYPRUS_CY = 25u,
    CZECH_REPUBLIC_CZ = 26u,
    GERMANY_DE = 27u,
    DENMARK_DK = 28u,
    ECUADOR_EC = 29u,
    ESTONIA_EE = 30u,
    EGYPT_EG = 31u,
    SPAIN_ES = 32u,
    ETHIOPIA_ET = 33u,
    FINLAND_FI = 34u,
    FRANCE_FR = 35u,
    UNITED_KINGDOM_GB = 36u,
    GRENADA_GD = 37u,
    FRENCH_GUIANA_GF = 38u,
    GUADELOUPE_GP = 39u,
    GREECE_GR = 40u,
    GUATEMALA_GT = 41u,
    GUAM_GU = 42u,
    HONG_KONG_HK = 43u,
    CROATIA_HR = 44u,
    HUNGARY_HU = 45u,
    INDIA_IN = 46u,
    INDONESIA_ID = 47u,
    IRELAND_IE = 48u,
    ISRAEL_IL = 49u,
    ICELAND_IS = 50u,
    ITALY_IT = 51u,
    JORDAN_JO = 52u,
    JAPAN_JP = 53u,
    CAMBODIA_KH = 54u,
    REPUBLIC_OF_KOREA_KR = 55u,
    KUWAIT_KW = 56u,
    CAYMAN_ISLANDS_KY = 57u,
    LAO_PDR_LA = 58u,
    LEBANON_LB = 59u,
    LIECHTENSTEIN_LI = 60u,
    SRI_LANKA_LK = 61u,
    LESOTHO_LS = 62u,
    LITHUANIA_LT = 63u,
    LUXEMBOURG_LU = 64u,
    LATVIA_LV = 65u,
    MOROCCO_MA = 66u,
    MONACO_MC = 67u,
    MOLDOVA_MD = 68u,
    MONTENEGRO_ME = 69u,
    REPUBLIC_OF_MACEDONIA_MK = 70u,
    MONGOLIA_MN = 71u,
    MARTINIQUE_MQ = 72u,
    MAURITANIA_MR = 73u,
    MALTA_MT = 74u,
    MAURITIUS_MU = 75u,
    MALDIVES_MV = 76u,
    MALAWI_MW = 77u,
    MEXICO_MX = 78u,
    MALAYSIA_MY = 79u,
    NICARAGUA_NI = 80u,
    NETHERLANDS_NL = 81u,
    NORWAY_NO = 82u,
    NEW_ZEALAND_NZ = 83u,
    OMAN_OM = 84u,
    PANAMA_PA = 85u,
    PERU_PE = 86u,
    PHILIPPINES_PH = 87u,
    POLAND_PL = 88u,
    PUERTO_RICO_PR = 89u,
    PORTUGAL_PT = 90u,
    PARAGUAY_PY = 91u,
    REUNION_RE = 92u,
    ROMANIA_RO = 93u,
    SERBIA_RS = 94u,
    RUSSIAN_FEDERATION_RU = 95u,
    SWEDEN_SE = 96u,
    SINGAPORE_SI = 97u,
    SLOVAKIA_SK = 98u,
    EL_SALVADOR_SV = 99u,
    THAILAND_TH = 100u,
    TUNISIA_TN = 101u,
    TURKEY_TR = 102u,
    TRINIDAD_AND_TOBAGO_TT = 103u,
    TAIWAN_PROVINCE_OF_CHINA_TW = 104u,
    UKRAINE_UA = 105u,
    UNITED_STATES_US = 106u,
    HOLY_SEE_VATICAN_CITY_STATE_VA = 107u,
    BOLIVARIAN_REPUBLIC_OF_VENEZUELA_VE = 108u,
    BRITISH_VIRGIN_ISLANDS_VG = 109u,
    VIETNAM_VN = 110u,
    MAYOTTE_YT = 111u,
    SOUTH_AFRICA_ZA = 112u,
  };


  typedef boost::shared_ptr< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> const> ConstPtr;

}; // struct CountryCodeIdentifier_

typedef ::kortex_driver::CountryCodeIdentifier_<std::allocator<void> > CountryCodeIdentifier;

typedef boost::shared_ptr< ::kortex_driver::CountryCodeIdentifier > CountryCodeIdentifierPtr;
typedef boost::shared_ptr< ::kortex_driver::CountryCodeIdentifier const> CountryCodeIdentifierConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4fbc3beb3b770b1abd5a62fb78a51afe";
  }

  static const char* value(const ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4fbc3beb3b770b1aULL;
  static const uint64_t static_value2 = 0xbd5a62fb78a51afeULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/CountryCodeIdentifier";
  }

  static const char* value(const ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNSPECIFIED_COUNTRY_CODE = 0\n"
"\n"
"uint32 UNITED_ARAB_EMIRATES_AE = 1\n"
"\n"
"uint32 ANTIGUA_AND_BARBUDA_AG = 2\n"
"\n"
"uint32 ANGUILLA_AI = 3\n"
"\n"
"uint32 ALBANIA_AL = 4\n"
"\n"
"uint32 AMERICAN_SAMOA_AS = 5\n"
"\n"
"uint32 AUSTRIA_AT = 6\n"
"\n"
"uint32 AUSTRALIA_AU = 7\n"
"\n"
"uint32 ARUBA_AW = 8\n"
"\n"
"uint32 AZERBAIJAN_AZ = 9\n"
"\n"
"uint32 BOSNIA_AND_HERZEGOVINA_BA = 10\n"
"\n"
"uint32 BANGLADESH_BD = 11\n"
"\n"
"uint32 BELGIUM_BE = 12\n"
"\n"
"uint32 BULGARIA_BG = 13\n"
"\n"
"uint32 BAHRAIN_BH = 14\n"
"\n"
"uint32 BERMUDA_BM = 15\n"
"\n"
"uint32 BRUNEI_DARUSSALAM_BN = 16\n"
"\n"
"uint32 BRAZIL_BR = 17\n"
"\n"
"uint32 BAHAMAS_BS = 18\n"
"\n"
"uint32 BELARUS_BY = 19\n"
"\n"
"uint32 SWITZERLAND_CH = 20\n"
"\n"
"uint32 CANADA_CA = 21\n"
"\n"
"uint32 CHINA_CN = 22\n"
"\n"
"uint32 COLOMBIA_CO = 23\n"
"\n"
"uint32 COSTA_RICA_CR = 24\n"
"\n"
"uint32 CYPRUS_CY = 25\n"
"\n"
"uint32 CZECH_REPUBLIC_CZ = 26\n"
"\n"
"uint32 GERMANY_DE = 27\n"
"\n"
"uint32 DENMARK_DK = 28\n"
"\n"
"uint32 ECUADOR_EC = 29\n"
"\n"
"uint32 ESTONIA_EE = 30\n"
"\n"
"uint32 EGYPT_EG = 31\n"
"\n"
"uint32 SPAIN_ES = 32\n"
"\n"
"uint32 ETHIOPIA_ET = 33\n"
"\n"
"uint32 FINLAND_FI = 34\n"
"\n"
"uint32 FRANCE_FR = 35\n"
"\n"
"uint32 UNITED_KINGDOM_GB = 36\n"
"\n"
"uint32 GRENADA_GD = 37\n"
"\n"
"uint32 FRENCH_GUIANA_GF = 38\n"
"\n"
"uint32 GUADELOUPE_GP = 39\n"
"\n"
"uint32 GREECE_GR = 40\n"
"\n"
"uint32 GUATEMALA_GT = 41\n"
"\n"
"uint32 GUAM_GU = 42\n"
"\n"
"uint32 HONG_KONG_HK = 43\n"
"\n"
"uint32 CROATIA_HR = 44\n"
"\n"
"uint32 HUNGARY_HU = 45\n"
"\n"
"uint32 INDIA_IN = 46\n"
"\n"
"uint32 INDONESIA_ID = 47\n"
"\n"
"uint32 IRELAND_IE = 48\n"
"\n"
"uint32 ISRAEL_IL = 49\n"
"\n"
"uint32 ICELAND_IS = 50\n"
"\n"
"uint32 ITALY_IT = 51\n"
"\n"
"uint32 JORDAN_JO = 52\n"
"\n"
"uint32 JAPAN_JP = 53\n"
"\n"
"uint32 CAMBODIA_KH = 54\n"
"\n"
"uint32 REPUBLIC_OF_KOREA_KR = 55\n"
"\n"
"uint32 KUWAIT_KW = 56\n"
"\n"
"uint32 CAYMAN_ISLANDS_KY = 57\n"
"\n"
"uint32 LAO_PDR_LA = 58\n"
"\n"
"uint32 LEBANON_LB = 59\n"
"\n"
"uint32 LIECHTENSTEIN_LI = 60\n"
"\n"
"uint32 SRI_LANKA_LK = 61\n"
"\n"
"uint32 LESOTHO_LS = 62\n"
"\n"
"uint32 LITHUANIA_LT = 63\n"
"\n"
"uint32 LUXEMBOURG_LU = 64\n"
"\n"
"uint32 LATVIA_LV = 65\n"
"\n"
"uint32 MOROCCO_MA = 66\n"
"\n"
"uint32 MONACO_MC = 67\n"
"\n"
"uint32 MOLDOVA_MD = 68\n"
"\n"
"uint32 MONTENEGRO_ME = 69\n"
"\n"
"uint32 REPUBLIC_OF_MACEDONIA_MK = 70\n"
"\n"
"uint32 MONGOLIA_MN = 71\n"
"\n"
"uint32 MARTINIQUE_MQ = 72\n"
"\n"
"uint32 MAURITANIA_MR = 73\n"
"\n"
"uint32 MALTA_MT = 74\n"
"\n"
"uint32 MAURITIUS_MU = 75\n"
"\n"
"uint32 MALDIVES_MV = 76\n"
"\n"
"uint32 MALAWI_MW = 77\n"
"\n"
"uint32 MEXICO_MX = 78\n"
"\n"
"uint32 MALAYSIA_MY = 79\n"
"\n"
"uint32 NICARAGUA_NI = 80\n"
"\n"
"uint32 NETHERLANDS_NL = 81\n"
"\n"
"uint32 NORWAY_NO = 82\n"
"\n"
"uint32 NEW_ZEALAND_NZ = 83\n"
"\n"
"uint32 OMAN_OM = 84\n"
"\n"
"uint32 PANAMA_PA = 85\n"
"\n"
"uint32 PERU_PE = 86\n"
"\n"
"uint32 PHILIPPINES_PH = 87\n"
"\n"
"uint32 POLAND_PL = 88\n"
"\n"
"uint32 PUERTO_RICO_PR = 89\n"
"\n"
"uint32 PORTUGAL_PT = 90\n"
"\n"
"uint32 PARAGUAY_PY = 91\n"
"\n"
"uint32 REUNION_RE = 92\n"
"\n"
"uint32 ROMANIA_RO = 93\n"
"\n"
"uint32 SERBIA_RS = 94\n"
"\n"
"uint32 RUSSIAN_FEDERATION_RU = 95\n"
"\n"
"uint32 SWEDEN_SE = 96\n"
"\n"
"uint32 SINGAPORE_SI = 97\n"
"\n"
"uint32 SLOVAKIA_SK = 98\n"
"\n"
"uint32 EL_SALVADOR_SV = 99\n"
"\n"
"uint32 THAILAND_TH = 100\n"
"\n"
"uint32 TUNISIA_TN = 101\n"
"\n"
"uint32 TURKEY_TR = 102\n"
"\n"
"uint32 TRINIDAD_AND_TOBAGO_TT = 103\n"
"\n"
"uint32 TAIWAN_PROVINCE_OF_CHINA_TW = 104\n"
"\n"
"uint32 UKRAINE_UA = 105\n"
"\n"
"uint32 UNITED_STATES_US = 106\n"
"\n"
"uint32 HOLY_SEE_VATICAN_CITY_STATE_VA = 107\n"
"\n"
"uint32 BOLIVARIAN_REPUBLIC_OF_VENEZUELA_VE = 108\n"
"\n"
"uint32 BRITISH_VIRGIN_ISLANDS_VG = 109\n"
"\n"
"uint32 VIETNAM_VN = 110\n"
"\n"
"uint32 MAYOTTE_YT = 111\n"
"\n"
"uint32 SOUTH_AFRICA_ZA = 112\n"
;
  }

  static const char* value(const ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CountryCodeIdentifier_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::CountryCodeIdentifier_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_COUNTRYCODEIDENTIFIER_H
