# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ConfigurationChangeNotification_configuration_change.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class ConfigurationChangeNotification_configuration_change(genpy.Message):
  _md5sum = "da6a00bf2364ba1e44afbbbd7c77db5b"
  _type = "kortex_driver/ConfigurationChangeNotification_configuration_change"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
SequenceHandle[] sequence_handle
ActionHandle[] action_handle
MappingHandle[] mapping_handle
MapGroupHandle[] map_group_handle
MapHandle[] map_handle
UserProfileHandle[] user_profile_handle
ProtectionZoneHandle[] protection_zone_handle
SafetyHandle[] safety_handle
NetworkHandle[] network_handle
Ssid[] ssid
ControllerHandle[] controller_handle
================================================================================
MSG: kortex_driver/SequenceHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/ActionHandle

uint32 identifier
uint32 action_type
uint32 permission
================================================================================
MSG: kortex_driver/MappingHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/MapGroupHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/MapHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/UserProfileHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/ProtectionZoneHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/SafetyHandle

uint32 identifier
================================================================================
MSG: kortex_driver/NetworkHandle

uint32 type
================================================================================
MSG: kortex_driver/Ssid

string identifier
================================================================================
MSG: kortex_driver/ControllerHandle

uint32 type
uint32 controller_identifier"""
  __slots__ = ['sequence_handle','action_handle','mapping_handle','map_group_handle','map_handle','user_profile_handle','protection_zone_handle','safety_handle','network_handle','ssid','controller_handle']
  _slot_types = ['kortex_driver/SequenceHandle[]','kortex_driver/ActionHandle[]','kortex_driver/MappingHandle[]','kortex_driver/MapGroupHandle[]','kortex_driver/MapHandle[]','kortex_driver/UserProfileHandle[]','kortex_driver/ProtectionZoneHandle[]','kortex_driver/SafetyHandle[]','kortex_driver/NetworkHandle[]','kortex_driver/Ssid[]','kortex_driver/ControllerHandle[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sequence_handle,action_handle,mapping_handle,map_group_handle,map_handle,user_profile_handle,protection_zone_handle,safety_handle,network_handle,ssid,controller_handle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConfigurationChangeNotification_configuration_change, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sequence_handle is None:
        self.sequence_handle = []
      if self.action_handle is None:
        self.action_handle = []
      if self.mapping_handle is None:
        self.mapping_handle = []
      if self.map_group_handle is None:
        self.map_group_handle = []
      if self.map_handle is None:
        self.map_handle = []
      if self.user_profile_handle is None:
        self.user_profile_handle = []
      if self.protection_zone_handle is None:
        self.protection_zone_handle = []
      if self.safety_handle is None:
        self.safety_handle = []
      if self.network_handle is None:
        self.network_handle = []
      if self.ssid is None:
        self.ssid = []
      if self.controller_handle is None:
        self.controller_handle = []
    else:
      self.sequence_handle = []
      self.action_handle = []
      self.mapping_handle = []
      self.map_group_handle = []
      self.map_handle = []
      self.user_profile_handle = []
      self.protection_zone_handle = []
      self.safety_handle = []
      self.network_handle = []
      self.ssid = []
      self.controller_handle = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.sequence_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.sequence_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.action_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_handle:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.identifier, _x.action_type, _x.permission))
      length = len(self.mapping_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.mapping_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.map_group_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.map_group_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.map_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.map_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.user_profile_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.user_profile_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.protection_zone_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.protection_zone_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.safety_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.safety_handle:
        _x = val1.identifier
        buff.write(_get_struct_I().pack(_x))
      length = len(self.network_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.network_handle:
        _x = val1.type
        buff.write(_get_struct_I().pack(_x))
      length = len(self.ssid)
      buff.write(_struct_I.pack(length))
      for val1 in self.ssid:
        _x = val1.identifier
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.controller_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.controller_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.type, _x.controller_identifier))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sequence_handle is None:
        self.sequence_handle = None
      if self.action_handle is None:
        self.action_handle = None
      if self.mapping_handle is None:
        self.mapping_handle = None
      if self.map_group_handle is None:
        self.map_group_handle = None
      if self.map_handle is None:
        self.map_handle = None
      if self.user_profile_handle is None:
        self.user_profile_handle = None
      if self.protection_zone_handle is None:
        self.protection_zone_handle = None
      if self.safety_handle is None:
        self.safety_handle = None
      if self.network_handle is None:
        self.network_handle = None
      if self.ssid is None:
        self.ssid = None
      if self.controller_handle is None:
        self.controller_handle = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sequence_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.SequenceHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.sequence_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ActionHandle()
        _x = val1
        start = end
        end += 12
        (_x.identifier, _x.action_type, _x.permission,) = _get_struct_3I().unpack(str[start:end])
        self.action_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mapping_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.MappingHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.mapping_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map_group_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.MapGroupHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.map_group_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.MapHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.map_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.user_profile_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.UserProfileHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.user_profile_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.protection_zone_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ProtectionZoneHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.protection_zone_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.safety_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.SafetyHandle()
        start = end
        end += 4
        (val1.identifier,) = _get_struct_I().unpack(str[start:end])
        self.safety_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.network_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.NetworkHandle()
        start = end
        end += 4
        (val1.type,) = _get_struct_I().unpack(str[start:end])
        self.network_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ssid = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Ssid()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.identifier = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.identifier = str[start:end]
        self.ssid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controller_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ControllerHandle()
        _x = val1
        start = end
        end += 8
        (_x.type, _x.controller_identifier,) = _get_struct_2I().unpack(str[start:end])
        self.controller_handle.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.sequence_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.sequence_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.action_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_handle:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.identifier, _x.action_type, _x.permission))
      length = len(self.mapping_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.mapping_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.map_group_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.map_group_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.map_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.map_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.user_profile_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.user_profile_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.protection_zone_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.protection_zone_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.safety_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.safety_handle:
        _x = val1.identifier
        buff.write(_get_struct_I().pack(_x))
      length = len(self.network_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.network_handle:
        _x = val1.type
        buff.write(_get_struct_I().pack(_x))
      length = len(self.ssid)
      buff.write(_struct_I.pack(length))
      for val1 in self.ssid:
        _x = val1.identifier
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.controller_handle)
      buff.write(_struct_I.pack(length))
      for val1 in self.controller_handle:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.type, _x.controller_identifier))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sequence_handle is None:
        self.sequence_handle = None
      if self.action_handle is None:
        self.action_handle = None
      if self.mapping_handle is None:
        self.mapping_handle = None
      if self.map_group_handle is None:
        self.map_group_handle = None
      if self.map_handle is None:
        self.map_handle = None
      if self.user_profile_handle is None:
        self.user_profile_handle = None
      if self.protection_zone_handle is None:
        self.protection_zone_handle = None
      if self.safety_handle is None:
        self.safety_handle = None
      if self.network_handle is None:
        self.network_handle = None
      if self.ssid is None:
        self.ssid = None
      if self.controller_handle is None:
        self.controller_handle = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sequence_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.SequenceHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.sequence_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ActionHandle()
        _x = val1
        start = end
        end += 12
        (_x.identifier, _x.action_type, _x.permission,) = _get_struct_3I().unpack(str[start:end])
        self.action_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mapping_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.MappingHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.mapping_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map_group_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.MapGroupHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.map_group_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.MapHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.map_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.user_profile_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.UserProfileHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.user_profile_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.protection_zone_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ProtectionZoneHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.protection_zone_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.safety_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.SafetyHandle()
        start = end
        end += 4
        (val1.identifier,) = _get_struct_I().unpack(str[start:end])
        self.safety_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.network_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.NetworkHandle()
        start = end
        end += 4
        (val1.type,) = _get_struct_I().unpack(str[start:end])
        self.network_handle.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ssid = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Ssid()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.identifier = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.identifier = str[start:end]
        self.ssid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controller_handle = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ControllerHandle()
        _x = val1
        start = end
        end += 8
        (_x.type, _x.controller_identifier,) = _get_struct_2I().unpack(str[start:end])
        self.controller_handle.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
