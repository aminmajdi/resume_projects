// Generated by gencpp from file kortex_driver/SetOperatingMode.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_SETOPERATINGMODE_H
#define KORTEX_DRIVER_MESSAGE_SETOPERATINGMODE_H

#include <ros/service_traits.h>


#include <kortex_driver/SetOperatingModeRequest.h>
#include <kortex_driver/SetOperatingModeResponse.h>


namespace kortex_driver
{

struct SetOperatingMode
{

typedef SetOperatingModeRequest Request;
typedef SetOperatingModeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct SetOperatingMode
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::SetOperatingMode > {
  static const char* value()
  {
    return "c4131bf69b8a60653e5e053fa2ce9151";
  }

  static const char* value(const ::kortex_driver::SetOperatingMode&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::SetOperatingMode > {
  static const char* value()
  {
    return "kortex_driver/SetOperatingMode";
  }

  static const char* value(const ::kortex_driver::SetOperatingMode&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::SetOperatingModeRequest> should match
// service_traits::MD5Sum< ::kortex_driver::SetOperatingMode >
template<>
struct MD5Sum< ::kortex_driver::SetOperatingModeRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::SetOperatingMode >::value();
  }
  static const char* value(const ::kortex_driver::SetOperatingModeRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::SetOperatingModeRequest> should match
// service_traits::DataType< ::kortex_driver::SetOperatingMode >
template<>
struct DataType< ::kortex_driver::SetOperatingModeRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::SetOperatingMode >::value();
  }
  static const char* value(const ::kortex_driver::SetOperatingModeRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::SetOperatingModeResponse> should match
// service_traits::MD5Sum< ::kortex_driver::SetOperatingMode >
template<>
struct MD5Sum< ::kortex_driver::SetOperatingModeResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::SetOperatingMode >::value();
  }
  static const char* value(const ::kortex_driver::SetOperatingModeResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::SetOperatingModeResponse> should match
// service_traits::DataType< ::kortex_driver::SetOperatingMode >
template<>
struct DataType< ::kortex_driver::SetOperatingModeResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::SetOperatingMode >::value();
  }
  static const char* value(const ::kortex_driver::SetOperatingModeResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_SETOPERATINGMODE_H
