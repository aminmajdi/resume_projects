# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/I2CWriteRegisterParameter.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class I2CWriteRegisterParameter(genpy.Message):
  _md5sum = "347168899c8760463d3fc21c4d811648"
  _type = "kortex_driver/I2CWriteRegisterParameter"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint32 device
uint32 device_address
uint32 register_address
uint32 register_address_size
uint32 timeout
I2CData data
================================================================================
MSG: kortex_driver/I2CData

uint8[] data
uint32 size"""
  __slots__ = ['device','device_address','register_address','register_address_size','timeout','data']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','kortex_driver/I2CData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       device,device_address,register_address,register_address_size,timeout,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(I2CWriteRegisterParameter, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.device is None:
        self.device = 0
      if self.device_address is None:
        self.device_address = 0
      if self.register_address is None:
        self.register_address = 0
      if self.register_address_size is None:
        self.register_address_size = 0
      if self.timeout is None:
        self.timeout = 0
      if self.data is None:
        self.data = kortex_driver.msg.I2CData()
    else:
      self.device = 0
      self.device_address = 0
      self.register_address = 0
      self.register_address_size = 0
      self.timeout = 0
      self.data = kortex_driver.msg.I2CData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5I().pack(_x.device, _x.device_address, _x.register_address, _x.register_address_size, _x.timeout))
      _x = self.data.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.data.size
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.data is None:
        self.data = kortex_driver.msg.I2CData()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.device, _x.device_address, _x.register_address, _x.register_address_size, _x.timeout,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data.data = str[start:end]
      start = end
      end += 4
      (self.data.size,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5I().pack(_x.device, _x.device_address, _x.register_address, _x.register_address_size, _x.timeout))
      _x = self.data.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.data.size
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.data is None:
        self.data = kortex_driver.msg.I2CData()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.device, _x.device_address, _x.register_address, _x.register_address_size, _x.timeout,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data.data = str[start:end]
      start = end
      end += 4
      (self.data.size,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5I = None
def _get_struct_5I():
    global _struct_5I
    if _struct_5I is None:
        _struct_5I = struct.Struct("<5I")
    return _struct_5I
