// Generated by gencpp from file kortex_driver/GetCalibrationResult.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETCALIBRATIONRESULT_H
#define KORTEX_DRIVER_MESSAGE_GETCALIBRATIONRESULT_H

#include <ros/service_traits.h>


#include <kortex_driver/GetCalibrationResultRequest.h>
#include <kortex_driver/GetCalibrationResultResponse.h>


namespace kortex_driver
{

struct GetCalibrationResult
{

typedef GetCalibrationResultRequest Request;
typedef GetCalibrationResultResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetCalibrationResult
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetCalibrationResult > {
  static const char* value()
  {
    return "77b1f6ef7f1d5eace34aa81cf1772705";
  }

  static const char* value(const ::kortex_driver::GetCalibrationResult&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetCalibrationResult > {
  static const char* value()
  {
    return "kortex_driver/GetCalibrationResult";
  }

  static const char* value(const ::kortex_driver::GetCalibrationResult&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetCalibrationResultRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetCalibrationResult >
template<>
struct MD5Sum< ::kortex_driver::GetCalibrationResultRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetCalibrationResult >::value();
  }
  static const char* value(const ::kortex_driver::GetCalibrationResultRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetCalibrationResultRequest> should match
// service_traits::DataType< ::kortex_driver::GetCalibrationResult >
template<>
struct DataType< ::kortex_driver::GetCalibrationResultRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetCalibrationResult >::value();
  }
  static const char* value(const ::kortex_driver::GetCalibrationResultRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetCalibrationResultResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetCalibrationResult >
template<>
struct MD5Sum< ::kortex_driver::GetCalibrationResultResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetCalibrationResult >::value();
  }
  static const char* value(const ::kortex_driver::GetCalibrationResultResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetCalibrationResultResponse> should match
// service_traits::DataType< ::kortex_driver::GetCalibrationResult >
template<>
struct DataType< ::kortex_driver::GetCalibrationResultResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetCalibrationResult >::value();
  }
  static const char* value(const ::kortex_driver::GetCalibrationResultResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETCALIBRATIONRESULT_H
