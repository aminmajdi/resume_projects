// Generated by gencpp from file kortex_driver/ControllerBehavior.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_CONTROLLERBEHAVIOR_H
#define KORTEX_DRIVER_MESSAGE_CONTROLLERBEHAVIOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct ControllerBehavior_
{
  typedef ControllerBehavior_<ContainerAllocator> Type;

  ControllerBehavior_()
    {
    }
  ControllerBehavior_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSPECIFIED_CONTROLLER_BEHAVIOR)
  #undef UNSPECIFIED_CONTROLLER_BEHAVIOR
#endif
#if defined(_WIN32) && defined(CONTROLLER_BUTTON_DOWN)
  #undef CONTROLLER_BUTTON_DOWN
#endif
#if defined(_WIN32) && defined(CONTROLLER_BUTTON_UP)
  #undef CONTROLLER_BUTTON_UP
#endif
#if defined(_WIN32) && defined(CONTROLLER_AXIS_POSITIVE)
  #undef CONTROLLER_AXIS_POSITIVE
#endif
#if defined(_WIN32) && defined(CONTROLLER_AXIS_NEGATIVE)
  #undef CONTROLLER_AXIS_NEGATIVE
#endif
#if defined(_WIN32) && defined(CONTROLLER_BUTTON_CLICK)
  #undef CONTROLLER_BUTTON_CLICK
#endif

  enum {
    UNSPECIFIED_CONTROLLER_BEHAVIOR = 0u,
    CONTROLLER_BUTTON_DOWN = 1u,
    CONTROLLER_BUTTON_UP = 2u,
    CONTROLLER_AXIS_POSITIVE = 3u,
    CONTROLLER_AXIS_NEGATIVE = 4u,
    CONTROLLER_BUTTON_CLICK = 5u,
  };


  typedef boost::shared_ptr< ::kortex_driver::ControllerBehavior_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::ControllerBehavior_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerBehavior_

typedef ::kortex_driver::ControllerBehavior_<std::allocator<void> > ControllerBehavior;

typedef boost::shared_ptr< ::kortex_driver::ControllerBehavior > ControllerBehaviorPtr;
typedef boost::shared_ptr< ::kortex_driver::ControllerBehavior const> ControllerBehaviorConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::ControllerBehavior_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::ControllerBehavior_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ControllerBehavior_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ControllerBehavior_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ControllerBehavior_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ControllerBehavior_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ControllerBehavior_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ControllerBehavior_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::ControllerBehavior_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12553caa8500dc92a4c4cfda3f89fc6d";
  }

  static const char* value(const ::kortex_driver::ControllerBehavior_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12553caa8500dc92ULL;
  static const uint64_t static_value2 = 0xa4c4cfda3f89fc6dULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::ControllerBehavior_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/ControllerBehavior";
  }

  static const char* value(const ::kortex_driver::ControllerBehavior_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::ControllerBehavior_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNSPECIFIED_CONTROLLER_BEHAVIOR = 0\n"
"\n"
"uint32 CONTROLLER_BUTTON_DOWN = 1\n"
"\n"
"uint32 CONTROLLER_BUTTON_UP = 2\n"
"\n"
"uint32 CONTROLLER_AXIS_POSITIVE = 3\n"
"\n"
"uint32 CONTROLLER_AXIS_NEGATIVE = 4\n"
"\n"
"uint32 CONTROLLER_BUTTON_CLICK = 5\n"
;
  }

  static const char* value(const ::kortex_driver::ControllerBehavior_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::ControllerBehavior_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerBehavior_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::ControllerBehavior_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::ControllerBehavior_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_CONTROLLERBEHAVIOR_H
