# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/SafetyIdentifierBankA.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SafetyIdentifierBankA(genpy.Message):
  _md5sum = "b1876cb37822156652f9b965a67d4838"
  _type = "kortex_driver/SafetyIdentifierBankA"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint32 UNSPECIFIED_ACTUATOR_SAFETY_IDENTIFIER_BANK_A = 0

uint32 FOLLOWING_ERROR = 1

uint32 MAXIMUM_VELOCITY = 2

uint32 JOINT_LIMIT_HIGH = 4

uint32 JOINT_LIMIT_LOW = 8

uint32 STRAIN_GAUGE_MISMATCH = 16

uint32 MAXIMUM_TORQUE = 32

uint32 UNRELIABLE_ABSOLUTE_POSITION = 64

uint32 MAGNETIC_POSITION = 128

uint32 HALL_POSITION = 256

uint32 HALL_SEQUENCE = 512

uint32 INPUT_ENCODER_HALL_MISMATCH = 1024

uint32 INPUT_ENCODER_INDEX_MISMATCH = 2048

uint32 INPUT_ENCODER_MAGNETIC_MISMATCH = 4096

uint32 MAXIMUM_MOTOR_CURRENT = 8192

uint32 MOTOR_CURRENT_MISMATCH = 16384

uint32 MAXIMUM_VOLTAGE = 32768

uint32 MINIMUM_VOLTAGE = 65536

uint32 MAXIMUM_MOTOR_TEMPERATURE = 131072

uint32 MAXIMUM_CORE_TEMPERATURE = 262144

uint32 NON_VOLATILE_MEMORY_CORRUPTED = 524288

uint32 MOTOR_DRIVER_FAULT = 1048576

uint32 EMERGENCY_LINE_ASSERTED = 2097152

uint32 COMMUNICATION_TICK_LOST = 4194304

uint32 WATCHDOG_TRIGGERED = 8388608

uint32 UNRELIABLE_CAPACITIVE_SENSOR = 16777216

uint32 UNEXPECTED_GEAR_RATIO = 33554432

uint32 HALL_MAGNETIC_MISMATCH = 67108864
"""
  # Pseudo-constants
  UNSPECIFIED_ACTUATOR_SAFETY_IDENTIFIER_BANK_A = 0
  FOLLOWING_ERROR = 1
  MAXIMUM_VELOCITY = 2
  JOINT_LIMIT_HIGH = 4
  JOINT_LIMIT_LOW = 8
  STRAIN_GAUGE_MISMATCH = 16
  MAXIMUM_TORQUE = 32
  UNRELIABLE_ABSOLUTE_POSITION = 64
  MAGNETIC_POSITION = 128
  HALL_POSITION = 256
  HALL_SEQUENCE = 512
  INPUT_ENCODER_HALL_MISMATCH = 1024
  INPUT_ENCODER_INDEX_MISMATCH = 2048
  INPUT_ENCODER_MAGNETIC_MISMATCH = 4096
  MAXIMUM_MOTOR_CURRENT = 8192
  MOTOR_CURRENT_MISMATCH = 16384
  MAXIMUM_VOLTAGE = 32768
  MINIMUM_VOLTAGE = 65536
  MAXIMUM_MOTOR_TEMPERATURE = 131072
  MAXIMUM_CORE_TEMPERATURE = 262144
  NON_VOLATILE_MEMORY_CORRUPTED = 524288
  MOTOR_DRIVER_FAULT = 1048576
  EMERGENCY_LINE_ASSERTED = 2097152
  COMMUNICATION_TICK_LOST = 4194304
  WATCHDOG_TRIGGERED = 8388608
  UNRELIABLE_CAPACITIVE_SENSOR = 16777216
  UNEXPECTED_GEAR_RATIO = 33554432
  HALL_MAGNETIC_MISMATCH = 67108864

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SafetyIdentifierBankA, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
