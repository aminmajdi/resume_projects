// Generated by gencpp from file kortex_driver/SafetyIdentifierBankA.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_SAFETYIDENTIFIERBANKA_H
#define KORTEX_DRIVER_MESSAGE_SAFETYIDENTIFIERBANKA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct SafetyIdentifierBankA_
{
  typedef SafetyIdentifierBankA_<ContainerAllocator> Type;

  SafetyIdentifierBankA_()
    {
    }
  SafetyIdentifierBankA_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSPECIFIED_ACTUATOR_SAFETY_IDENTIFIER_BANK_A)
  #undef UNSPECIFIED_ACTUATOR_SAFETY_IDENTIFIER_BANK_A
#endif
#if defined(_WIN32) && defined(FOLLOWING_ERROR)
  #undef FOLLOWING_ERROR
#endif
#if defined(_WIN32) && defined(MAXIMUM_VELOCITY)
  #undef MAXIMUM_VELOCITY
#endif
#if defined(_WIN32) && defined(JOINT_LIMIT_HIGH)
  #undef JOINT_LIMIT_HIGH
#endif
#if defined(_WIN32) && defined(JOINT_LIMIT_LOW)
  #undef JOINT_LIMIT_LOW
#endif
#if defined(_WIN32) && defined(STRAIN_GAUGE_MISMATCH)
  #undef STRAIN_GAUGE_MISMATCH
#endif
#if defined(_WIN32) && defined(MAXIMUM_TORQUE)
  #undef MAXIMUM_TORQUE
#endif
#if defined(_WIN32) && defined(UNRELIABLE_ABSOLUTE_POSITION)
  #undef UNRELIABLE_ABSOLUTE_POSITION
#endif
#if defined(_WIN32) && defined(MAGNETIC_POSITION)
  #undef MAGNETIC_POSITION
#endif
#if defined(_WIN32) && defined(HALL_POSITION)
  #undef HALL_POSITION
#endif
#if defined(_WIN32) && defined(HALL_SEQUENCE)
  #undef HALL_SEQUENCE
#endif
#if defined(_WIN32) && defined(INPUT_ENCODER_HALL_MISMATCH)
  #undef INPUT_ENCODER_HALL_MISMATCH
#endif
#if defined(_WIN32) && defined(INPUT_ENCODER_INDEX_MISMATCH)
  #undef INPUT_ENCODER_INDEX_MISMATCH
#endif
#if defined(_WIN32) && defined(INPUT_ENCODER_MAGNETIC_MISMATCH)
  #undef INPUT_ENCODER_MAGNETIC_MISMATCH
#endif
#if defined(_WIN32) && defined(MAXIMUM_MOTOR_CURRENT)
  #undef MAXIMUM_MOTOR_CURRENT
#endif
#if defined(_WIN32) && defined(MOTOR_CURRENT_MISMATCH)
  #undef MOTOR_CURRENT_MISMATCH
#endif
#if defined(_WIN32) && defined(MAXIMUM_VOLTAGE)
  #undef MAXIMUM_VOLTAGE
#endif
#if defined(_WIN32) && defined(MINIMUM_VOLTAGE)
  #undef MINIMUM_VOLTAGE
#endif
#if defined(_WIN32) && defined(MAXIMUM_MOTOR_TEMPERATURE)
  #undef MAXIMUM_MOTOR_TEMPERATURE
#endif
#if defined(_WIN32) && defined(MAXIMUM_CORE_TEMPERATURE)
  #undef MAXIMUM_CORE_TEMPERATURE
#endif
#if defined(_WIN32) && defined(NON_VOLATILE_MEMORY_CORRUPTED)
  #undef NON_VOLATILE_MEMORY_CORRUPTED
#endif
#if defined(_WIN32) && defined(MOTOR_DRIVER_FAULT)
  #undef MOTOR_DRIVER_FAULT
#endif
#if defined(_WIN32) && defined(EMERGENCY_LINE_ASSERTED)
  #undef EMERGENCY_LINE_ASSERTED
#endif
#if defined(_WIN32) && defined(COMMUNICATION_TICK_LOST)
  #undef COMMUNICATION_TICK_LOST
#endif
#if defined(_WIN32) && defined(WATCHDOG_TRIGGERED)
  #undef WATCHDOG_TRIGGERED
#endif
#if defined(_WIN32) && defined(UNRELIABLE_CAPACITIVE_SENSOR)
  #undef UNRELIABLE_CAPACITIVE_SENSOR
#endif
#if defined(_WIN32) && defined(UNEXPECTED_GEAR_RATIO)
  #undef UNEXPECTED_GEAR_RATIO
#endif
#if defined(_WIN32) && defined(HALL_MAGNETIC_MISMATCH)
  #undef HALL_MAGNETIC_MISMATCH
#endif

  enum {
    UNSPECIFIED_ACTUATOR_SAFETY_IDENTIFIER_BANK_A = 0u,
    FOLLOWING_ERROR = 1u,
    MAXIMUM_VELOCITY = 2u,
    JOINT_LIMIT_HIGH = 4u,
    JOINT_LIMIT_LOW = 8u,
    STRAIN_GAUGE_MISMATCH = 16u,
    MAXIMUM_TORQUE = 32u,
    UNRELIABLE_ABSOLUTE_POSITION = 64u,
    MAGNETIC_POSITION = 128u,
    HALL_POSITION = 256u,
    HALL_SEQUENCE = 512u,
    INPUT_ENCODER_HALL_MISMATCH = 1024u,
    INPUT_ENCODER_INDEX_MISMATCH = 2048u,
    INPUT_ENCODER_MAGNETIC_MISMATCH = 4096u,
    MAXIMUM_MOTOR_CURRENT = 8192u,
    MOTOR_CURRENT_MISMATCH = 16384u,
    MAXIMUM_VOLTAGE = 32768u,
    MINIMUM_VOLTAGE = 65536u,
    MAXIMUM_MOTOR_TEMPERATURE = 131072u,
    MAXIMUM_CORE_TEMPERATURE = 262144u,
    NON_VOLATILE_MEMORY_CORRUPTED = 524288u,
    MOTOR_DRIVER_FAULT = 1048576u,
    EMERGENCY_LINE_ASSERTED = 2097152u,
    COMMUNICATION_TICK_LOST = 4194304u,
    WATCHDOG_TRIGGERED = 8388608u,
    UNRELIABLE_CAPACITIVE_SENSOR = 16777216u,
    UNEXPECTED_GEAR_RATIO = 33554432u,
    HALL_MAGNETIC_MISMATCH = 67108864u,
  };


  typedef boost::shared_ptr< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> const> ConstPtr;

}; // struct SafetyIdentifierBankA_

typedef ::kortex_driver::SafetyIdentifierBankA_<std::allocator<void> > SafetyIdentifierBankA;

typedef boost::shared_ptr< ::kortex_driver::SafetyIdentifierBankA > SafetyIdentifierBankAPtr;
typedef boost::shared_ptr< ::kortex_driver::SafetyIdentifierBankA const> SafetyIdentifierBankAConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1876cb37822156652f9b965a67d4838";
  }

  static const char* value(const ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1876cb378221566ULL;
  static const uint64_t static_value2 = 0x52f9b965a67d4838ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/SafetyIdentifierBankA";
  }

  static const char* value(const ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNSPECIFIED_ACTUATOR_SAFETY_IDENTIFIER_BANK_A = 0\n"
"\n"
"uint32 FOLLOWING_ERROR = 1\n"
"\n"
"uint32 MAXIMUM_VELOCITY = 2\n"
"\n"
"uint32 JOINT_LIMIT_HIGH = 4\n"
"\n"
"uint32 JOINT_LIMIT_LOW = 8\n"
"\n"
"uint32 STRAIN_GAUGE_MISMATCH = 16\n"
"\n"
"uint32 MAXIMUM_TORQUE = 32\n"
"\n"
"uint32 UNRELIABLE_ABSOLUTE_POSITION = 64\n"
"\n"
"uint32 MAGNETIC_POSITION = 128\n"
"\n"
"uint32 HALL_POSITION = 256\n"
"\n"
"uint32 HALL_SEQUENCE = 512\n"
"\n"
"uint32 INPUT_ENCODER_HALL_MISMATCH = 1024\n"
"\n"
"uint32 INPUT_ENCODER_INDEX_MISMATCH = 2048\n"
"\n"
"uint32 INPUT_ENCODER_MAGNETIC_MISMATCH = 4096\n"
"\n"
"uint32 MAXIMUM_MOTOR_CURRENT = 8192\n"
"\n"
"uint32 MOTOR_CURRENT_MISMATCH = 16384\n"
"\n"
"uint32 MAXIMUM_VOLTAGE = 32768\n"
"\n"
"uint32 MINIMUM_VOLTAGE = 65536\n"
"\n"
"uint32 MAXIMUM_MOTOR_TEMPERATURE = 131072\n"
"\n"
"uint32 MAXIMUM_CORE_TEMPERATURE = 262144\n"
"\n"
"uint32 NON_VOLATILE_MEMORY_CORRUPTED = 524288\n"
"\n"
"uint32 MOTOR_DRIVER_FAULT = 1048576\n"
"\n"
"uint32 EMERGENCY_LINE_ASSERTED = 2097152\n"
"\n"
"uint32 COMMUNICATION_TICK_LOST = 4194304\n"
"\n"
"uint32 WATCHDOG_TRIGGERED = 8388608\n"
"\n"
"uint32 UNRELIABLE_CAPACITIVE_SENSOR = 16777216\n"
"\n"
"uint32 UNEXPECTED_GEAR_RATIO = 33554432\n"
"\n"
"uint32 HALL_MAGNETIC_MISMATCH = 67108864\n"
;
  }

  static const char* value(const ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SafetyIdentifierBankA_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::SafetyIdentifierBankA_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_SAFETYIDENTIFIERBANKA_H
