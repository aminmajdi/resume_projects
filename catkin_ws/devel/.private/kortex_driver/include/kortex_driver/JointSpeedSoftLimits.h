// Generated by gencpp from file kortex_driver/JointSpeedSoftLimits.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_JOINTSPEEDSOFTLIMITS_H
#define KORTEX_DRIVER_MESSAGE_JOINTSPEEDSOFTLIMITS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct JointSpeedSoftLimits_
{
  typedef JointSpeedSoftLimits_<ContainerAllocator> Type;

  JointSpeedSoftLimits_()
    : control_mode(0)
    , joint_speed_soft_limits()  {
    }
  JointSpeedSoftLimits_(const ContainerAllocator& _alloc)
    : control_mode(0)
    , joint_speed_soft_limits(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _control_mode_type;
  _control_mode_type control_mode;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _joint_speed_soft_limits_type;
  _joint_speed_soft_limits_type joint_speed_soft_limits;





  typedef boost::shared_ptr< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> const> ConstPtr;

}; // struct JointSpeedSoftLimits_

typedef ::kortex_driver::JointSpeedSoftLimits_<std::allocator<void> > JointSpeedSoftLimits;

typedef boost::shared_ptr< ::kortex_driver::JointSpeedSoftLimits > JointSpeedSoftLimitsPtr;
typedef boost::shared_ptr< ::kortex_driver::JointSpeedSoftLimits const> JointSpeedSoftLimitsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator1> & lhs, const ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator2> & rhs)
{
  return lhs.control_mode == rhs.control_mode &&
    lhs.joint_speed_soft_limits == rhs.joint_speed_soft_limits;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator1> & lhs, const ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22ed0d6bb6d41947458b1c26c3248289";
  }

  static const char* value(const ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22ed0d6bb6d41947ULL;
  static const uint64_t static_value2 = 0x458b1c26c3248289ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/JointSpeedSoftLimits";
  }

  static const char* value(const ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 control_mode\n"
"float32[] joint_speed_soft_limits\n"
;
  }

  static const char* value(const ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_mode);
      stream.next(m.joint_speed_soft_limits);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointSpeedSoftLimits_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::JointSpeedSoftLimits_<ContainerAllocator>& v)
  {
    s << indent << "control_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "joint_speed_soft_limits[]" << std::endl;
    for (size_t i = 0; i < v.joint_speed_soft_limits.size(); ++i)
    {
      s << indent << "  joint_speed_soft_limits[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_speed_soft_limits[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_JOINTSPEEDSOFTLIMITS_H
