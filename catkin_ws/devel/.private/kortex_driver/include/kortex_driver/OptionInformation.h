// Generated by gencpp from file kortex_driver/OptionInformation.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_OPTIONINFORMATION_H
#define KORTEX_DRIVER_MESSAGE_OPTIONINFORMATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct OptionInformation_
{
  typedef OptionInformation_<ContainerAllocator> Type;

  OptionInformation_()
    : sensor(0)
    , option(0)
    , supported(false)
    , read_only(false)
    , minimum(0.0)
    , maximum(0.0)
    , step(0.0)
    , default_value(0.0)  {
    }
  OptionInformation_(const ContainerAllocator& _alloc)
    : sensor(0)
    , option(0)
    , supported(false)
    , read_only(false)
    , minimum(0.0)
    , maximum(0.0)
    , step(0.0)
    , default_value(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _sensor_type;
  _sensor_type sensor;

   typedef uint32_t _option_type;
  _option_type option;

   typedef uint8_t _supported_type;
  _supported_type supported;

   typedef uint8_t _read_only_type;
  _read_only_type read_only;

   typedef float _minimum_type;
  _minimum_type minimum;

   typedef float _maximum_type;
  _maximum_type maximum;

   typedef float _step_type;
  _step_type step;

   typedef float _default_value_type;
  _default_value_type default_value;





  typedef boost::shared_ptr< ::kortex_driver::OptionInformation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::OptionInformation_<ContainerAllocator> const> ConstPtr;

}; // struct OptionInformation_

typedef ::kortex_driver::OptionInformation_<std::allocator<void> > OptionInformation;

typedef boost::shared_ptr< ::kortex_driver::OptionInformation > OptionInformationPtr;
typedef boost::shared_ptr< ::kortex_driver::OptionInformation const> OptionInformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::OptionInformation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::OptionInformation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::OptionInformation_<ContainerAllocator1> & lhs, const ::kortex_driver::OptionInformation_<ContainerAllocator2> & rhs)
{
  return lhs.sensor == rhs.sensor &&
    lhs.option == rhs.option &&
    lhs.supported == rhs.supported &&
    lhs.read_only == rhs.read_only &&
    lhs.minimum == rhs.minimum &&
    lhs.maximum == rhs.maximum &&
    lhs.step == rhs.step &&
    lhs.default_value == rhs.default_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::OptionInformation_<ContainerAllocator1> & lhs, const ::kortex_driver::OptionInformation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::OptionInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::OptionInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::OptionInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::OptionInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::OptionInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::OptionInformation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::OptionInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a9212bde4d95812b702827b151ff2e7";
  }

  static const char* value(const ::kortex_driver::OptionInformation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a9212bde4d95812ULL;
  static const uint64_t static_value2 = 0xb702827b151ff2e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::OptionInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/OptionInformation";
  }

  static const char* value(const ::kortex_driver::OptionInformation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::OptionInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 sensor\n"
"uint32 option\n"
"bool supported\n"
"bool read_only\n"
"float32 minimum\n"
"float32 maximum\n"
"float32 step\n"
"float32 default_value\n"
;
  }

  static const char* value(const ::kortex_driver::OptionInformation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::OptionInformation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor);
      stream.next(m.option);
      stream.next(m.supported);
      stream.next(m.read_only);
      stream.next(m.minimum);
      stream.next(m.maximum);
      stream.next(m.step);
      stream.next(m.default_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OptionInformation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::OptionInformation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::OptionInformation_<ContainerAllocator>& v)
  {
    s << indent << "sensor: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sensor);
    s << indent << "option: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.option);
    s << indent << "supported: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supported);
    s << indent << "read_only: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.read_only);
    s << indent << "minimum: ";
    Printer<float>::stream(s, indent + "  ", v.minimum);
    s << indent << "maximum: ";
    Printer<float>::stream(s, indent + "  ", v.maximum);
    s << indent << "step: ";
    Printer<float>::stream(s, indent + "  ", v.step);
    s << indent << "default_value: ";
    Printer<float>::stream(s, indent + "  ", v.default_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_OPTIONINFORMATION_H
