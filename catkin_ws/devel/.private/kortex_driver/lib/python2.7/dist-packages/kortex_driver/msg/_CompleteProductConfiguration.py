# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/CompleteProductConfiguration.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class CompleteProductConfiguration(genpy.Message):
  _md5sum = "2d8085e7089e183b063713a6b28e2220"
  _type = "kortex_driver/CompleteProductConfiguration"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
string kin
uint32 model
CountryCode country_code
string assembly_plant
string model_year
uint32 degree_of_freedom
uint32 base_type
uint32 end_effector_type
uint32 vision_module_type
uint32 interface_module_type
uint32 arm_laterality
uint32 wrist_type
================================================================================
MSG: kortex_driver/CountryCode

uint32 identifier"""
  __slots__ = ['kin','model','country_code','assembly_plant','model_year','degree_of_freedom','base_type','end_effector_type','vision_module_type','interface_module_type','arm_laterality','wrist_type']
  _slot_types = ['string','uint32','kortex_driver/CountryCode','string','string','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       kin,model,country_code,assembly_plant,model_year,degree_of_freedom,base_type,end_effector_type,vision_module_type,interface_module_type,arm_laterality,wrist_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CompleteProductConfiguration, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.kin is None:
        self.kin = ''
      if self.model is None:
        self.model = 0
      if self.country_code is None:
        self.country_code = kortex_driver.msg.CountryCode()
      if self.assembly_plant is None:
        self.assembly_plant = ''
      if self.model_year is None:
        self.model_year = ''
      if self.degree_of_freedom is None:
        self.degree_of_freedom = 0
      if self.base_type is None:
        self.base_type = 0
      if self.end_effector_type is None:
        self.end_effector_type = 0
      if self.vision_module_type is None:
        self.vision_module_type = 0
      if self.interface_module_type is None:
        self.interface_module_type = 0
      if self.arm_laterality is None:
        self.arm_laterality = 0
      if self.wrist_type is None:
        self.wrist_type = 0
    else:
      self.kin = ''
      self.model = 0
      self.country_code = kortex_driver.msg.CountryCode()
      self.assembly_plant = ''
      self.model_year = ''
      self.degree_of_freedom = 0
      self.base_type = 0
      self.end_effector_type = 0
      self.vision_module_type = 0
      self.interface_module_type = 0
      self.arm_laterality = 0
      self.wrist_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.kin
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.model, _x.country_code.identifier))
      _x = self.assembly_plant
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.model_year
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7I().pack(_x.degree_of_freedom, _x.base_type, _x.end_effector_type, _x.vision_module_type, _x.interface_module_type, _x.arm_laterality, _x.wrist_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.country_code is None:
        self.country_code = kortex_driver.msg.CountryCode()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kin = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kin = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.model, _x.country_code.identifier,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.assembly_plant = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.assembly_plant = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_year = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.model_year = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.degree_of_freedom, _x.base_type, _x.end_effector_type, _x.vision_module_type, _x.interface_module_type, _x.arm_laterality, _x.wrist_type,) = _get_struct_7I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.kin
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.model, _x.country_code.identifier))
      _x = self.assembly_plant
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.model_year
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7I().pack(_x.degree_of_freedom, _x.base_type, _x.end_effector_type, _x.vision_module_type, _x.interface_module_type, _x.arm_laterality, _x.wrist_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.country_code is None:
        self.country_code = kortex_driver.msg.CountryCode()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kin = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kin = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.model, _x.country_code.identifier,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.assembly_plant = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.assembly_plant = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_year = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.model_year = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.degree_of_freedom, _x.base_type, _x.end_effector_type, _x.vision_module_type, _x.interface_module_type, _x.arm_laterality, _x.wrist_type,) = _get_struct_7I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_7I = None
def _get_struct_7I():
    global _struct_7I
    if _struct_7I is None:
        _struct_7I = struct.Struct("<7I")
    return _struct_7I
