// Generated by gencpp from file kortex_driver/GripperCyclic_CustomData.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GRIPPERCYCLIC_CUSTOMDATA_H
#define KORTEX_DRIVER_MESSAGE_GRIPPERCYCLIC_CUSTOMDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/GripperCyclic_MessageId.h>
#include <kortex_driver/CustomDataUnit.h>
#include <kortex_driver/CustomDataUnit.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct GripperCyclic_CustomData_
{
  typedef GripperCyclic_CustomData_<ContainerAllocator> Type;

  GripperCyclic_CustomData_()
    : custom_data_id()
    , gripper_custom_data()
    , motor_custom_data()  {
    }
  GripperCyclic_CustomData_(const ContainerAllocator& _alloc)
    : custom_data_id(_alloc)
    , gripper_custom_data(_alloc)
    , motor_custom_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kortex_driver::GripperCyclic_MessageId_<ContainerAllocator>  _custom_data_id_type;
  _custom_data_id_type custom_data_id;

   typedef  ::kortex_driver::CustomDataUnit_<ContainerAllocator>  _gripper_custom_data_type;
  _gripper_custom_data_type gripper_custom_data;

   typedef std::vector< ::kortex_driver::CustomDataUnit_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::CustomDataUnit_<ContainerAllocator> >::other >  _motor_custom_data_type;
  _motor_custom_data_type motor_custom_data;





  typedef boost::shared_ptr< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> const> ConstPtr;

}; // struct GripperCyclic_CustomData_

typedef ::kortex_driver::GripperCyclic_CustomData_<std::allocator<void> > GripperCyclic_CustomData;

typedef boost::shared_ptr< ::kortex_driver::GripperCyclic_CustomData > GripperCyclic_CustomDataPtr;
typedef boost::shared_ptr< ::kortex_driver::GripperCyclic_CustomData const> GripperCyclic_CustomDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator1> & lhs, const ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator2> & rhs)
{
  return lhs.custom_data_id == rhs.custom_data_id &&
    lhs.gripper_custom_data == rhs.gripper_custom_data &&
    lhs.motor_custom_data == rhs.motor_custom_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator1> & lhs, const ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccb37c7f71598724d847a97b3a0c62f5";
  }

  static const char* value(const ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xccb37c7f71598724ULL;
  static const uint64_t static_value2 = 0xd847a97b3a0c62f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/GripperCyclic_CustomData";
  }

  static const char* value(const ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"GripperCyclic_MessageId custom_data_id\n"
"CustomDataUnit gripper_custom_data\n"
"CustomDataUnit[] motor_custom_data\n"
"================================================================================\n"
"MSG: kortex_driver/GripperCyclic_MessageId\n"
"\n"
"uint32 identifier\n"
"================================================================================\n"
"MSG: kortex_driver/CustomDataUnit\n"
"\n"
"uint32 custom_data_0\n"
"uint32 custom_data_1\n"
"uint32 custom_data_2\n"
"uint32 custom_data_3\n"
"uint32 custom_data_4\n"
"uint32 custom_data_5\n"
"uint32 custom_data_6\n"
"uint32 custom_data_7\n"
"uint32 custom_data_8\n"
"uint32 custom_data_9\n"
"uint32 custom_data_10\n"
"uint32 custom_data_11\n"
"uint32 custom_data_12\n"
"uint32 custom_data_13\n"
"uint32 custom_data_14\n"
"uint32 custom_data_15\n"
;
  }

  static const char* value(const ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.custom_data_id);
      stream.next(m.gripper_custom_data);
      stream.next(m.motor_custom_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperCyclic_CustomData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::GripperCyclic_CustomData_<ContainerAllocator>& v)
  {
    s << indent << "custom_data_id: ";
    s << std::endl;
    Printer< ::kortex_driver::GripperCyclic_MessageId_<ContainerAllocator> >::stream(s, indent + "  ", v.custom_data_id);
    s << indent << "gripper_custom_data: ";
    s << std::endl;
    Printer< ::kortex_driver::CustomDataUnit_<ContainerAllocator> >::stream(s, indent + "  ", v.gripper_custom_data);
    s << indent << "motor_custom_data[]" << std::endl;
    for (size_t i = 0; i < v.motor_custom_data.size(); ++i)
    {
      s << indent << "  motor_custom_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::CustomDataUnit_<ContainerAllocator> >::stream(s, indent + "    ", v.motor_custom_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GRIPPERCYCLIC_CUSTOMDATA_H
