// Generated by gencpp from file kortex_driver/ActuatorCommand.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_ACTUATORCOMMAND_H
#define KORTEX_DRIVER_MESSAGE_ACTUATORCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct ActuatorCommand_
{
  typedef ActuatorCommand_<ContainerAllocator> Type;

  ActuatorCommand_()
    : command_id(0)
    , flags(0)
    , position(0.0)
    , velocity(0.0)
    , torque_joint(0.0)
    , current_motor(0.0)  {
    }
  ActuatorCommand_(const ContainerAllocator& _alloc)
    : command_id(0)
    , flags(0)
    , position(0.0)
    , velocity(0.0)
    , torque_joint(0.0)
    , current_motor(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _command_id_type;
  _command_id_type command_id;

   typedef uint32_t _flags_type;
  _flags_type flags;

   typedef float _position_type;
  _position_type position;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _torque_joint_type;
  _torque_joint_type torque_joint;

   typedef float _current_motor_type;
  _current_motor_type current_motor;





  typedef boost::shared_ptr< ::kortex_driver::ActuatorCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::ActuatorCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ActuatorCommand_

typedef ::kortex_driver::ActuatorCommand_<std::allocator<void> > ActuatorCommand;

typedef boost::shared_ptr< ::kortex_driver::ActuatorCommand > ActuatorCommandPtr;
typedef boost::shared_ptr< ::kortex_driver::ActuatorCommand const> ActuatorCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::ActuatorCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::ActuatorCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::ActuatorCommand_<ContainerAllocator1> & lhs, const ::kortex_driver::ActuatorCommand_<ContainerAllocator2> & rhs)
{
  return lhs.command_id == rhs.command_id &&
    lhs.flags == rhs.flags &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.torque_joint == rhs.torque_joint &&
    lhs.current_motor == rhs.current_motor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::ActuatorCommand_<ContainerAllocator1> & lhs, const ::kortex_driver::ActuatorCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ActuatorCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ActuatorCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ActuatorCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ActuatorCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ActuatorCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ActuatorCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::ActuatorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d6d46bc48110c570d5a382cb600d4f7";
  }

  static const char* value(const ::kortex_driver::ActuatorCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d6d46bc48110c57ULL;
  static const uint64_t static_value2 = 0x0d5a382cb600d4f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::ActuatorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/ActuatorCommand";
  }

  static const char* value(const ::kortex_driver::ActuatorCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::ActuatorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 command_id\n"
"uint32 flags\n"
"float32 position\n"
"float32 velocity\n"
"float32 torque_joint\n"
"float32 current_motor\n"
;
  }

  static const char* value(const ::kortex_driver::ActuatorCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::ActuatorCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command_id);
      stream.next(m.flags);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.torque_joint);
      stream.next(m.current_motor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuatorCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::ActuatorCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::ActuatorCommand_<ContainerAllocator>& v)
  {
    s << indent << "command_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.command_id);
    s << indent << "flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.flags);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "torque_joint: ";
    Printer<float>::stream(s, indent + "  ", v.torque_joint);
    s << indent << "current_motor: ";
    Printer<float>::stream(s, indent + "  ", v.current_motor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_ACTUATORCOMMAND_H
