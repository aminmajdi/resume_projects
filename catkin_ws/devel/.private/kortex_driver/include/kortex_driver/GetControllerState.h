// Generated by gencpp from file kortex_driver/GetControllerState.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETCONTROLLERSTATE_H
#define KORTEX_DRIVER_MESSAGE_GETCONTROLLERSTATE_H

#include <ros/service_traits.h>


#include <kortex_driver/GetControllerStateRequest.h>
#include <kortex_driver/GetControllerStateResponse.h>


namespace kortex_driver
{

struct GetControllerState
{

typedef GetControllerStateRequest Request;
typedef GetControllerStateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetControllerState
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetControllerState > {
  static const char* value()
  {
    return "c3a3b583b8a6198c6f61bb7c1bde10f0";
  }

  static const char* value(const ::kortex_driver::GetControllerState&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetControllerState > {
  static const char* value()
  {
    return "kortex_driver/GetControllerState";
  }

  static const char* value(const ::kortex_driver::GetControllerState&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetControllerStateRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetControllerState >
template<>
struct MD5Sum< ::kortex_driver::GetControllerStateRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetControllerState >::value();
  }
  static const char* value(const ::kortex_driver::GetControllerStateRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetControllerStateRequest> should match
// service_traits::DataType< ::kortex_driver::GetControllerState >
template<>
struct DataType< ::kortex_driver::GetControllerStateRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetControllerState >::value();
  }
  static const char* value(const ::kortex_driver::GetControllerStateRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetControllerStateResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetControllerState >
template<>
struct MD5Sum< ::kortex_driver::GetControllerStateResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetControllerState >::value();
  }
  static const char* value(const ::kortex_driver::GetControllerStateResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetControllerStateResponse> should match
// service_traits::DataType< ::kortex_driver::GetControllerState >
template<>
struct DataType< ::kortex_driver::GetControllerStateResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetControllerState >::value();
  }
  static const char* value(const ::kortex_driver::GetControllerStateResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETCONTROLLERSTATE_H
