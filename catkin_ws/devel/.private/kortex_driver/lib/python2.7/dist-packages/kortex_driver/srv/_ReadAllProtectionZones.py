# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ReadAllProtectionZonesRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class ReadAllProtectionZonesRequest(genpy.Message):
  _md5sum = "fa3403cd5897c9698bc0fdcb2a453fbc"
  _type = "kortex_driver/ReadAllProtectionZonesRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Empty input

================================================================================
MSG: kortex_driver/Empty
"""
  __slots__ = ['input']
  _slot_types = ['kortex_driver/Empty']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReadAllProtectionZonesRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.input is None:
        self.input = kortex_driver.msg.Empty()
    else:
      self.input = kortex_driver.msg.Empty()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input is None:
        self.input = kortex_driver.msg.Empty()
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input is None:
        self.input = kortex_driver.msg.Empty()
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ReadAllProtectionZonesResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class ReadAllProtectionZonesResponse(genpy.Message):
  _md5sum = "d8334fb0dbc5a4fdae35c676ee015197"
  _type = "kortex_driver/ReadAllProtectionZonesResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ProtectionZoneList output

================================================================================
MSG: kortex_driver/ProtectionZoneList

ProtectionZone[] protection_zones
================================================================================
MSG: kortex_driver/ProtectionZone

ProtectionZoneHandle handle
string name
string application_data
bool is_enabled
ZoneShape shape
CartesianLimitation[] limitations
CartesianLimitation[] envelope_limitations
================================================================================
MSG: kortex_driver/ProtectionZoneHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/ZoneShape

uint32 shape_type
Point origin
Base_RotationMatrix orientation
float32[] dimensions
float32 envelope_thickness
================================================================================
MSG: kortex_driver/Point

float32 x
float32 y
float32 z
================================================================================
MSG: kortex_driver/Base_RotationMatrix

Base_RotationMatrixRow row1
Base_RotationMatrixRow row2
Base_RotationMatrixRow row3
================================================================================
MSG: kortex_driver/Base_RotationMatrixRow

float32 column1
float32 column2
float32 column3
================================================================================
MSG: kortex_driver/CartesianLimitation

uint32 type
float32 translation
float32 orientation"""
  __slots__ = ['output']
  _slot_types = ['kortex_driver/ProtectionZoneList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       output

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReadAllProtectionZonesResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.output is None:
        self.output = kortex_driver.msg.ProtectionZoneList()
    else:
      self.output = kortex_driver.msg.ProtectionZoneList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.output.protection_zones)
      buff.write(_struct_I.pack(length))
      for val1 in self.output.protection_zones:
        _v1 = val1.handle
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.application_data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.is_enabled
        buff.write(_get_struct_B().pack(_x))
        _v2 = val1.shape
        _x = _v2.shape_type
        buff.write(_get_struct_I().pack(_x))
        _v3 = _v2.origin
        _x = _v3
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v4 = _v2.orientation
        _v5 = _v4.row1
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.column1, _x.column2, _x.column3))
        _v6 = _v4.row2
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.column1, _x.column2, _x.column3))
        _v7 = _v4.row3
        _x = _v7
        buff.write(_get_struct_3f().pack(_x.column1, _x.column2, _x.column3))
        length = len(_v2.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v2.dimensions))
        _x = _v2.envelope_thickness
        buff.write(_get_struct_f().pack(_x))
        length = len(val1.limitations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.limitations:
          _x = val2
          buff.write(_get_struct_I2f().pack(_x.type, _x.translation, _x.orientation))
        length = len(val1.envelope_limitations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.envelope_limitations:
          _x = val2
          buff.write(_get_struct_I2f().pack(_x.type, _x.translation, _x.orientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.output is None:
        self.output = kortex_driver.msg.ProtectionZoneList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.output.protection_zones = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ProtectionZone()
        _v8 = val1.handle
        _x = _v8
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.application_data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.application_data = str[start:end]
        start = end
        end += 1
        (val1.is_enabled,) = _get_struct_B().unpack(str[start:end])
        val1.is_enabled = bool(val1.is_enabled)
        _v9 = val1.shape
        start = end
        end += 4
        (_v9.shape_type,) = _get_struct_I().unpack(str[start:end])
        _v10 = _v9.origin
        _x = _v10
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v11 = _v9.orientation
        _v12 = _v11.row1
        _x = _v12
        start = end
        end += 12
        (_x.column1, _x.column2, _x.column3,) = _get_struct_3f().unpack(str[start:end])
        _v13 = _v11.row2
        _x = _v13
        start = end
        end += 12
        (_x.column1, _x.column2, _x.column3,) = _get_struct_3f().unpack(str[start:end])
        _v14 = _v11.row3
        _x = _v14
        start = end
        end += 12
        (_x.column1, _x.column2, _x.column3,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v9.dimensions = s.unpack(str[start:end])
        start = end
        end += 4
        (_v9.envelope_thickness,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.limitations = []
        for i in range(0, length):
          val2 = kortex_driver.msg.CartesianLimitation()
          _x = val2
          start = end
          end += 12
          (_x.type, _x.translation, _x.orientation,) = _get_struct_I2f().unpack(str[start:end])
          val1.limitations.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.envelope_limitations = []
        for i in range(0, length):
          val2 = kortex_driver.msg.CartesianLimitation()
          _x = val2
          start = end
          end += 12
          (_x.type, _x.translation, _x.orientation,) = _get_struct_I2f().unpack(str[start:end])
          val1.envelope_limitations.append(val2)
        self.output.protection_zones.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.output.protection_zones)
      buff.write(_struct_I.pack(length))
      for val1 in self.output.protection_zones:
        _v15 = val1.handle
        _x = _v15
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.application_data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.is_enabled
        buff.write(_get_struct_B().pack(_x))
        _v16 = val1.shape
        _x = _v16.shape_type
        buff.write(_get_struct_I().pack(_x))
        _v17 = _v16.origin
        _x = _v17
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v18 = _v16.orientation
        _v19 = _v18.row1
        _x = _v19
        buff.write(_get_struct_3f().pack(_x.column1, _x.column2, _x.column3))
        _v20 = _v18.row2
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.column1, _x.column2, _x.column3))
        _v21 = _v18.row3
        _x = _v21
        buff.write(_get_struct_3f().pack(_x.column1, _x.column2, _x.column3))
        length = len(_v16.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v16.dimensions.tostring())
        _x = _v16.envelope_thickness
        buff.write(_get_struct_f().pack(_x))
        length = len(val1.limitations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.limitations:
          _x = val2
          buff.write(_get_struct_I2f().pack(_x.type, _x.translation, _x.orientation))
        length = len(val1.envelope_limitations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.envelope_limitations:
          _x = val2
          buff.write(_get_struct_I2f().pack(_x.type, _x.translation, _x.orientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.output is None:
        self.output = kortex_driver.msg.ProtectionZoneList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.output.protection_zones = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ProtectionZone()
        _v22 = val1.handle
        _x = _v22
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.application_data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.application_data = str[start:end]
        start = end
        end += 1
        (val1.is_enabled,) = _get_struct_B().unpack(str[start:end])
        val1.is_enabled = bool(val1.is_enabled)
        _v23 = val1.shape
        start = end
        end += 4
        (_v23.shape_type,) = _get_struct_I().unpack(str[start:end])
        _v24 = _v23.origin
        _x = _v24
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v25 = _v23.orientation
        _v26 = _v25.row1
        _x = _v26
        start = end
        end += 12
        (_x.column1, _x.column2, _x.column3,) = _get_struct_3f().unpack(str[start:end])
        _v27 = _v25.row2
        _x = _v27
        start = end
        end += 12
        (_x.column1, _x.column2, _x.column3,) = _get_struct_3f().unpack(str[start:end])
        _v28 = _v25.row3
        _x = _v28
        start = end
        end += 12
        (_x.column1, _x.column2, _x.column3,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v23.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (_v23.envelope_thickness,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.limitations = []
        for i in range(0, length):
          val2 = kortex_driver.msg.CartesianLimitation()
          _x = val2
          start = end
          end += 12
          (_x.type, _x.translation, _x.orientation,) = _get_struct_I2f().unpack(str[start:end])
          val1.limitations.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.envelope_limitations = []
        for i in range(0, length):
          val2 = kortex_driver.msg.CartesianLimitation()
          _x = val2
          start = end
          end += 12
          (_x.type, _x.translation, _x.orientation,) = _get_struct_I2f().unpack(str[start:end])
          val1.envelope_limitations.append(val2)
        self.output.protection_zones.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_I2f = None
def _get_struct_I2f():
    global _struct_I2f
    if _struct_I2f is None:
        _struct_I2f = struct.Struct("<I2f")
    return _struct_I2f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
class ReadAllProtectionZones(object):
  _type          = 'kortex_driver/ReadAllProtectionZones'
  _md5sum = '26bc18c08c1b8389444ea1d92e6c8745'
  _request_class  = ReadAllProtectionZonesRequest
  _response_class = ReadAllProtectionZonesResponse
