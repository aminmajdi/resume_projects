# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ControllerElementState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class ControllerElementState(genpy.Message):
  _md5sum = "522b5634710ce23afc015e933c822f1e"
  _type = "kortex_driver/ControllerElementState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
ControllerElementHandle handle
uint32 event_type
float32 axis_value
================================================================================
MSG: kortex_driver/ControllerElementHandle

ControllerHandle controller_handle
ControllerElementHandle_identifier oneof_identifier
================================================================================
MSG: kortex_driver/ControllerHandle

uint32 type
uint32 controller_identifier
================================================================================
MSG: kortex_driver/ControllerElementHandle_identifier

uint32[] button
uint32[] axis"""
  __slots__ = ['handle','event_type','axis_value']
  _slot_types = ['kortex_driver/ControllerElementHandle','uint32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       handle,event_type,axis_value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControllerElementState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.handle is None:
        self.handle = kortex_driver.msg.ControllerElementHandle()
      if self.event_type is None:
        self.event_type = 0
      if self.axis_value is None:
        self.axis_value = 0.
    else:
      self.handle = kortex_driver.msg.ControllerElementHandle()
      self.event_type = 0
      self.axis_value = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.handle.controller_handle.type, _x.handle.controller_handle.controller_identifier))
      length = len(self.handle.oneof_identifier.button)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.handle.oneof_identifier.button))
      length = len(self.handle.oneof_identifier.axis)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.handle.oneof_identifier.axis))
      _x = self
      buff.write(_get_struct_If().pack(_x.event_type, _x.axis_value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.handle is None:
        self.handle = kortex_driver.msg.ControllerElementHandle()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.handle.controller_handle.type, _x.handle.controller_handle.controller_identifier,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.handle.oneof_identifier.button = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.handle.oneof_identifier.axis = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.event_type, _x.axis_value,) = _get_struct_If().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.handle.controller_handle.type, _x.handle.controller_handle.controller_identifier))
      length = len(self.handle.oneof_identifier.button)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.handle.oneof_identifier.button.tostring())
      length = len(self.handle.oneof_identifier.axis)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.handle.oneof_identifier.axis.tostring())
      _x = self
      buff.write(_get_struct_If().pack(_x.event_type, _x.axis_value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.handle is None:
        self.handle = kortex_driver.msg.ControllerElementHandle()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.handle.controller_handle.type, _x.handle.controller_handle.controller_identifier,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.handle.oneof_identifier.button = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.handle.oneof_identifier.axis = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 8
      (_x.event_type, _x.axis_value,) = _get_struct_If().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
