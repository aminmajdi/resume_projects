# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/Mapping.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class Mapping(genpy.Message):
  _md5sum = "fda005d3531fdfb82d459bb0078389d2"
  _type = "kortex_driver/Mapping"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
MappingHandle handle
string name
uint32 controller_identifier
MapGroupHandle active_map_group_handle
MapGroupHandle[] map_group_handles
MapHandle active_map_handle
MapHandle[] map_handles
string application_data
================================================================================
MSG: kortex_driver/MappingHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/MapGroupHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/MapHandle

uint32 identifier
uint32 permission"""
  __slots__ = ['handle','name','controller_identifier','active_map_group_handle','map_group_handles','active_map_handle','map_handles','application_data']
  _slot_types = ['kortex_driver/MappingHandle','string','uint32','kortex_driver/MapGroupHandle','kortex_driver/MapGroupHandle[]','kortex_driver/MapHandle','kortex_driver/MapHandle[]','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       handle,name,controller_identifier,active_map_group_handle,map_group_handles,active_map_handle,map_handles,application_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Mapping, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.handle is None:
        self.handle = kortex_driver.msg.MappingHandle()
      if self.name is None:
        self.name = ''
      if self.controller_identifier is None:
        self.controller_identifier = 0
      if self.active_map_group_handle is None:
        self.active_map_group_handle = kortex_driver.msg.MapGroupHandle()
      if self.map_group_handles is None:
        self.map_group_handles = []
      if self.active_map_handle is None:
        self.active_map_handle = kortex_driver.msg.MapHandle()
      if self.map_handles is None:
        self.map_handles = []
      if self.application_data is None:
        self.application_data = ''
    else:
      self.handle = kortex_driver.msg.MappingHandle()
      self.name = ''
      self.controller_identifier = 0
      self.active_map_group_handle = kortex_driver.msg.MapGroupHandle()
      self.map_group_handles = []
      self.active_map_handle = kortex_driver.msg.MapHandle()
      self.map_handles = []
      self.application_data = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.handle.identifier, _x.handle.permission))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.controller_identifier, _x.active_map_group_handle.identifier, _x.active_map_group_handle.permission))
      length = len(self.map_group_handles)
      buff.write(_struct_I.pack(length))
      for val1 in self.map_group_handles:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      _x = self
      buff.write(_get_struct_2I().pack(_x.active_map_handle.identifier, _x.active_map_handle.permission))
      length = len(self.map_handles)
      buff.write(_struct_I.pack(length))
      for val1 in self.map_handles:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      _x = self.application_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.handle is None:
        self.handle = kortex_driver.msg.MappingHandle()
      if self.active_map_group_handle is None:
        self.active_map_group_handle = kortex_driver.msg.MapGroupHandle()
      if self.map_group_handles is None:
        self.map_group_handles = None
      if self.active_map_handle is None:
        self.active_map_handle = kortex_driver.msg.MapHandle()
      if self.map_handles is None:
        self.map_handles = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.handle.identifier, _x.handle.permission,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.controller_identifier, _x.active_map_group_handle.identifier, _x.active_map_group_handle.permission,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map_group_handles = []
      for i in range(0, length):
        val1 = kortex_driver.msg.MapGroupHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.map_group_handles.append(val1)
      _x = self
      start = end
      end += 8
      (_x.active_map_handle.identifier, _x.active_map_handle.permission,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map_handles = []
      for i in range(0, length):
        val1 = kortex_driver.msg.MapHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.map_handles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.application_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.application_data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.handle.identifier, _x.handle.permission))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.controller_identifier, _x.active_map_group_handle.identifier, _x.active_map_group_handle.permission))
      length = len(self.map_group_handles)
      buff.write(_struct_I.pack(length))
      for val1 in self.map_group_handles:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      _x = self
      buff.write(_get_struct_2I().pack(_x.active_map_handle.identifier, _x.active_map_handle.permission))
      length = len(self.map_handles)
      buff.write(_struct_I.pack(length))
      for val1 in self.map_handles:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      _x = self.application_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.handle is None:
        self.handle = kortex_driver.msg.MappingHandle()
      if self.active_map_group_handle is None:
        self.active_map_group_handle = kortex_driver.msg.MapGroupHandle()
      if self.map_group_handles is None:
        self.map_group_handles = None
      if self.active_map_handle is None:
        self.active_map_handle = kortex_driver.msg.MapHandle()
      if self.map_handles is None:
        self.map_handles = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.handle.identifier, _x.handle.permission,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.controller_identifier, _x.active_map_group_handle.identifier, _x.active_map_group_handle.permission,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map_group_handles = []
      for i in range(0, length):
        val1 = kortex_driver.msg.MapGroupHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.map_group_handles.append(val1)
      _x = self
      start = end
      end += 8
      (_x.active_map_handle.identifier, _x.active_map_handle.permission,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map_handles = []
      for i in range(0, length):
        val1 = kortex_driver.msg.MapHandle()
        _x = val1
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.map_handles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.application_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.application_data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
