# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ServoingModeNotificationList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class ServoingModeNotificationList(genpy.Message):
  _md5sum = "9daed8664816c4fde5542358c286e2a2"
  _type = "kortex_driver/ServoingModeNotificationList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
ServoingModeNotification[] notifications
================================================================================
MSG: kortex_driver/ServoingModeNotification

uint32 servoing_mode
Timestamp timestamp
UserProfileHandle user_handle
Connection connection
================================================================================
MSG: kortex_driver/Timestamp

uint32 sec
uint32 usec
================================================================================
MSG: kortex_driver/UserProfileHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/Connection

UserProfileHandle user_handle
string connection_information
uint32 connection_identifier"""
  __slots__ = ['notifications']
  _slot_types = ['kortex_driver/ServoingModeNotification[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       notifications

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ServoingModeNotificationList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.notifications is None:
        self.notifications = []
    else:
      self.notifications = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.notifications)
      buff.write(_struct_I.pack(length))
      for val1 in self.notifications:
        _x = val1.servoing_mode
        buff.write(_get_struct_I().pack(_x))
        _v1 = val1.timestamp
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.sec, _x.usec))
        _v2 = val1.user_handle
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
        _v3 = val1.connection
        _v4 = _v3.user_handle
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
        _x = _v3.connection_information
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v3.connection_identifier
        buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.notifications is None:
        self.notifications = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.notifications = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ServoingModeNotification()
        start = end
        end += 4
        (val1.servoing_mode,) = _get_struct_I().unpack(str[start:end])
        _v5 = val1.timestamp
        _x = _v5
        start = end
        end += 8
        (_x.sec, _x.usec,) = _get_struct_2I().unpack(str[start:end])
        _v6 = val1.user_handle
        _x = _v6
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        _v7 = val1.connection
        _v8 = _v7.user_handle
        _x = _v8
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.connection_information = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.connection_information = str[start:end]
        start = end
        end += 4
        (_v7.connection_identifier,) = _get_struct_I().unpack(str[start:end])
        self.notifications.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.notifications)
      buff.write(_struct_I.pack(length))
      for val1 in self.notifications:
        _x = val1.servoing_mode
        buff.write(_get_struct_I().pack(_x))
        _v9 = val1.timestamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.sec, _x.usec))
        _v10 = val1.user_handle
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
        _v11 = val1.connection
        _v12 = _v11.user_handle
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
        _x = _v11.connection_information
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v11.connection_identifier
        buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.notifications is None:
        self.notifications = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.notifications = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ServoingModeNotification()
        start = end
        end += 4
        (val1.servoing_mode,) = _get_struct_I().unpack(str[start:end])
        _v13 = val1.timestamp
        _x = _v13
        start = end
        end += 8
        (_x.sec, _x.usec,) = _get_struct_2I().unpack(str[start:end])
        _v14 = val1.user_handle
        _x = _v14
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        _v15 = val1.connection
        _v16 = _v15.user_handle
        _x = _v16
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.connection_information = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v15.connection_information = str[start:end]
        start = end
        end += 4
        (_v15.connection_identifier,) = _get_struct_I().unpack(str[start:end])
        self.notifications.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
