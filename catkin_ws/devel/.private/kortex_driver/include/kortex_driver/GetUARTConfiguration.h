// Generated by gencpp from file kortex_driver/GetUARTConfiguration.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETUARTCONFIGURATION_H
#define KORTEX_DRIVER_MESSAGE_GETUARTCONFIGURATION_H

#include <ros/service_traits.h>


#include <kortex_driver/GetUARTConfigurationRequest.h>
#include <kortex_driver/GetUARTConfigurationResponse.h>


namespace kortex_driver
{

struct GetUARTConfiguration
{

typedef GetUARTConfigurationRequest Request;
typedef GetUARTConfigurationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetUARTConfiguration
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetUARTConfiguration > {
  static const char* value()
  {
    return "d041631488869c35b5eb142c6744c8a7";
  }

  static const char* value(const ::kortex_driver::GetUARTConfiguration&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetUARTConfiguration > {
  static const char* value()
  {
    return "kortex_driver/GetUARTConfiguration";
  }

  static const char* value(const ::kortex_driver::GetUARTConfiguration&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetUARTConfigurationRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetUARTConfiguration >
template<>
struct MD5Sum< ::kortex_driver::GetUARTConfigurationRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetUARTConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::GetUARTConfigurationRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetUARTConfigurationRequest> should match
// service_traits::DataType< ::kortex_driver::GetUARTConfiguration >
template<>
struct DataType< ::kortex_driver::GetUARTConfigurationRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetUARTConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::GetUARTConfigurationRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetUARTConfigurationResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetUARTConfiguration >
template<>
struct MD5Sum< ::kortex_driver::GetUARTConfigurationResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetUARTConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::GetUARTConfigurationResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetUARTConfigurationResponse> should match
// service_traits::DataType< ::kortex_driver::GetUARTConfiguration >
template<>
struct DataType< ::kortex_driver::GetUARTConfigurationResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetUARTConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::GetUARTConfigurationResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETUARTCONFIGURATION_H
