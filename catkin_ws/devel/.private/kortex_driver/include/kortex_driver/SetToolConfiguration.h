// Generated by gencpp from file kortex_driver/SetToolConfiguration.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_SETTOOLCONFIGURATION_H
#define KORTEX_DRIVER_MESSAGE_SETTOOLCONFIGURATION_H

#include <ros/service_traits.h>


#include <kortex_driver/SetToolConfigurationRequest.h>
#include <kortex_driver/SetToolConfigurationResponse.h>


namespace kortex_driver
{

struct SetToolConfiguration
{

typedef SetToolConfigurationRequest Request;
typedef SetToolConfigurationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct SetToolConfiguration
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::SetToolConfiguration > {
  static const char* value()
  {
    return "d0f38c8ed77e0310c120105db58e4900";
  }

  static const char* value(const ::kortex_driver::SetToolConfiguration&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::SetToolConfiguration > {
  static const char* value()
  {
    return "kortex_driver/SetToolConfiguration";
  }

  static const char* value(const ::kortex_driver::SetToolConfiguration&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::SetToolConfigurationRequest> should match
// service_traits::MD5Sum< ::kortex_driver::SetToolConfiguration >
template<>
struct MD5Sum< ::kortex_driver::SetToolConfigurationRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::SetToolConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::SetToolConfigurationRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::SetToolConfigurationRequest> should match
// service_traits::DataType< ::kortex_driver::SetToolConfiguration >
template<>
struct DataType< ::kortex_driver::SetToolConfigurationRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::SetToolConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::SetToolConfigurationRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::SetToolConfigurationResponse> should match
// service_traits::MD5Sum< ::kortex_driver::SetToolConfiguration >
template<>
struct MD5Sum< ::kortex_driver::SetToolConfigurationResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::SetToolConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::SetToolConfigurationResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::SetToolConfigurationResponse> should match
// service_traits::DataType< ::kortex_driver::SetToolConfiguration >
template<>
struct DataType< ::kortex_driver::SetToolConfigurationResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::SetToolConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::SetToolConfigurationResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_SETTOOLCONFIGURATION_H
