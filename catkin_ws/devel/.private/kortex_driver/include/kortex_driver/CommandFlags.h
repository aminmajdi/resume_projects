// Generated by gencpp from file kortex_driver/CommandFlags.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_COMMANDFLAGS_H
#define KORTEX_DRIVER_MESSAGE_COMMANDFLAGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct CommandFlags_
{
  typedef CommandFlags_<ContainerAllocator> Type;

  CommandFlags_()
    {
    }
  CommandFlags_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NO_COMMAND)
  #undef NO_COMMAND
#endif
#if defined(_WIN32) && defined(SERVO_ENABLE)
  #undef SERVO_ENABLE
#endif
#if defined(_WIN32) && defined(BRAKE_DISABLE)
  #undef BRAKE_DISABLE
#endif
#if defined(_WIN32) && defined(CLEAR_MAJOR_FAULT)
  #undef CLEAR_MAJOR_FAULT
#endif
#if defined(_WIN32) && defined(CLEAR_MINOR_FAULT)
  #undef CLEAR_MINOR_FAULT
#endif
#if defined(_WIN32) && defined(PROTECTIVE_STOP)
  #undef PROTECTIVE_STOP
#endif
#if defined(_WIN32) && defined(FORCE_BRAKE_RELEASE)
  #undef FORCE_BRAKE_RELEASE
#endif
#if defined(_WIN32) && defined(IGNORE)
  #undef IGNORE
#endif
#if defined(_WIN32) && defined(LOW_GAINS)
  #undef LOW_GAINS
#endif
#if defined(_WIN32) && defined(LED_0)
  #undef LED_0
#endif
#if defined(_WIN32) && defined(LED_1)
  #undef LED_1
#endif

  enum {
    NO_COMMAND = 0u,
    SERVO_ENABLE = 1u,
    BRAKE_DISABLE = 2u,
    CLEAR_MAJOR_FAULT = 4u,
    CLEAR_MINOR_FAULT = 8u,
    PROTECTIVE_STOP = 16u,
    FORCE_BRAKE_RELEASE = 32u,
    IGNORE = 64u,
    LOW_GAINS = 128u,
    LED_0 = 256u,
    LED_1 = 512u,
  };


  typedef boost::shared_ptr< ::kortex_driver::CommandFlags_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::CommandFlags_<ContainerAllocator> const> ConstPtr;

}; // struct CommandFlags_

typedef ::kortex_driver::CommandFlags_<std::allocator<void> > CommandFlags;

typedef boost::shared_ptr< ::kortex_driver::CommandFlags > CommandFlagsPtr;
typedef boost::shared_ptr< ::kortex_driver::CommandFlags const> CommandFlagsConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::CommandFlags_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::CommandFlags_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::CommandFlags_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::CommandFlags_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::CommandFlags_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::CommandFlags_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::CommandFlags_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::CommandFlags_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::CommandFlags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e51ff7d8ad00c576e3aaa1ef0c879bf9";
  }

  static const char* value(const ::kortex_driver::CommandFlags_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe51ff7d8ad00c576ULL;
  static const uint64_t static_value2 = 0xe3aaa1ef0c879bf9ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::CommandFlags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/CommandFlags";
  }

  static const char* value(const ::kortex_driver::CommandFlags_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::CommandFlags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 NO_COMMAND = 0\n"
"\n"
"uint32 SERVO_ENABLE = 1\n"
"\n"
"uint32 BRAKE_DISABLE = 2\n"
"\n"
"uint32 CLEAR_MAJOR_FAULT = 4\n"
"\n"
"uint32 CLEAR_MINOR_FAULT = 8\n"
"\n"
"uint32 PROTECTIVE_STOP = 16\n"
"\n"
"uint32 FORCE_BRAKE_RELEASE = 32\n"
"\n"
"uint32 IGNORE = 64\n"
"\n"
"uint32 LOW_GAINS = 128\n"
"\n"
"uint32 LED_0 = 256\n"
"\n"
"uint32 LED_1 = 512\n"
;
  }

  static const char* value(const ::kortex_driver::CommandFlags_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::CommandFlags_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommandFlags_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::CommandFlags_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::CommandFlags_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_COMMANDFLAGS_H
