// Generated by gencpp from file kortex_driver/UARTSpeed.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_UARTSPEED_H
#define KORTEX_DRIVER_MESSAGE_UARTSPEED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct UARTSpeed_
{
  typedef UARTSpeed_<ContainerAllocator> Type;

  UARTSpeed_()
    {
    }
  UARTSpeed_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UART_SPEED_UNSPECIFIED)
  #undef UART_SPEED_UNSPECIFIED
#endif
#if defined(_WIN32) && defined(UART_SPEED_4800)
  #undef UART_SPEED_4800
#endif
#if defined(_WIN32) && defined(UART_SPEED_9600)
  #undef UART_SPEED_9600
#endif
#if defined(_WIN32) && defined(UART_SPEED_19200)
  #undef UART_SPEED_19200
#endif
#if defined(_WIN32) && defined(UART_SPEED_38400)
  #undef UART_SPEED_38400
#endif
#if defined(_WIN32) && defined(UART_SPEED_57600)
  #undef UART_SPEED_57600
#endif
#if defined(_WIN32) && defined(UART_SPEED_115200)
  #undef UART_SPEED_115200
#endif
#if defined(_WIN32) && defined(UART_SPEED_230400)
  #undef UART_SPEED_230400
#endif
#if defined(_WIN32) && defined(UART_SPEED_460800)
  #undef UART_SPEED_460800
#endif
#if defined(_WIN32) && defined(UART_SPEED_921600)
  #undef UART_SPEED_921600
#endif
#if defined(_WIN32) && defined(UART_SPEED_1382400)
  #undef UART_SPEED_1382400
#endif
#if defined(_WIN32) && defined(UART_SPEED_1612800)
  #undef UART_SPEED_1612800
#endif
#if defined(_WIN32) && defined(UART_SPEED_1843200)
  #undef UART_SPEED_1843200
#endif
#if defined(_WIN32) && defined(UART_SPEED_2073600)
  #undef UART_SPEED_2073600
#endif
#if defined(_WIN32) && defined(UART_SPEED_2188800)
  #undef UART_SPEED_2188800
#endif
#if defined(_WIN32) && defined(UART_SPEED_2246400)
  #undef UART_SPEED_2246400
#endif

  enum {
    UART_SPEED_UNSPECIFIED = 0u,
    UART_SPEED_4800 = 1u,
    UART_SPEED_9600 = 2u,
    UART_SPEED_19200 = 3u,
    UART_SPEED_38400 = 4u,
    UART_SPEED_57600 = 5u,
    UART_SPEED_115200 = 6u,
    UART_SPEED_230400 = 7u,
    UART_SPEED_460800 = 8u,
    UART_SPEED_921600 = 9u,
    UART_SPEED_1382400 = 10u,
    UART_SPEED_1612800 = 11u,
    UART_SPEED_1843200 = 12u,
    UART_SPEED_2073600 = 13u,
    UART_SPEED_2188800 = 14u,
    UART_SPEED_2246400 = 15u,
  };


  typedef boost::shared_ptr< ::kortex_driver::UARTSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::UARTSpeed_<ContainerAllocator> const> ConstPtr;

}; // struct UARTSpeed_

typedef ::kortex_driver::UARTSpeed_<std::allocator<void> > UARTSpeed;

typedef boost::shared_ptr< ::kortex_driver::UARTSpeed > UARTSpeedPtr;
typedef boost::shared_ptr< ::kortex_driver::UARTSpeed const> UARTSpeedConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::UARTSpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::UARTSpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::UARTSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::UARTSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::UARTSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::UARTSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::UARTSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::UARTSpeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::UARTSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75fb3218a247fa4c93b3a9a066077af5";
  }

  static const char* value(const ::kortex_driver::UARTSpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75fb3218a247fa4cULL;
  static const uint64_t static_value2 = 0x93b3a9a066077af5ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::UARTSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/UARTSpeed";
  }

  static const char* value(const ::kortex_driver::UARTSpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::UARTSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UART_SPEED_UNSPECIFIED = 0\n"
"\n"
"uint32 UART_SPEED_4800 = 1\n"
"\n"
"uint32 UART_SPEED_9600 = 2\n"
"\n"
"uint32 UART_SPEED_19200 = 3\n"
"\n"
"uint32 UART_SPEED_38400 = 4\n"
"\n"
"uint32 UART_SPEED_57600 = 5\n"
"\n"
"uint32 UART_SPEED_115200 = 6\n"
"\n"
"uint32 UART_SPEED_230400 = 7\n"
"\n"
"uint32 UART_SPEED_460800 = 8\n"
"\n"
"uint32 UART_SPEED_921600 = 9\n"
"\n"
"uint32 UART_SPEED_1382400 = 10\n"
"\n"
"uint32 UART_SPEED_1612800 = 11\n"
"\n"
"uint32 UART_SPEED_1843200 = 12\n"
"\n"
"uint32 UART_SPEED_2073600 = 13\n"
"\n"
"uint32 UART_SPEED_2188800 = 14\n"
"\n"
"uint32 UART_SPEED_2246400 = 15\n"
;
  }

  static const char* value(const ::kortex_driver::UARTSpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::UARTSpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UARTSpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::UARTSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::UARTSpeed_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_UARTSPEED_H
