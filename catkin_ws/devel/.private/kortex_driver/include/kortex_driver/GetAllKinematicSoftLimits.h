// Generated by gencpp from file kortex_driver/GetAllKinematicSoftLimits.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETALLKINEMATICSOFTLIMITS_H
#define KORTEX_DRIVER_MESSAGE_GETALLKINEMATICSOFTLIMITS_H

#include <ros/service_traits.h>


#include <kortex_driver/GetAllKinematicSoftLimitsRequest.h>
#include <kortex_driver/GetAllKinematicSoftLimitsResponse.h>


namespace kortex_driver
{

struct GetAllKinematicSoftLimits
{

typedef GetAllKinematicSoftLimitsRequest Request;
typedef GetAllKinematicSoftLimitsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetAllKinematicSoftLimits
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetAllKinematicSoftLimits > {
  static const char* value()
  {
    return "82a8454ad50f9bddae049fa61b8b3c3d";
  }

  static const char* value(const ::kortex_driver::GetAllKinematicSoftLimits&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetAllKinematicSoftLimits > {
  static const char* value()
  {
    return "kortex_driver/GetAllKinematicSoftLimits";
  }

  static const char* value(const ::kortex_driver::GetAllKinematicSoftLimits&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetAllKinematicSoftLimitsRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetAllKinematicSoftLimits >
template<>
struct MD5Sum< ::kortex_driver::GetAllKinematicSoftLimitsRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetAllKinematicSoftLimits >::value();
  }
  static const char* value(const ::kortex_driver::GetAllKinematicSoftLimitsRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetAllKinematicSoftLimitsRequest> should match
// service_traits::DataType< ::kortex_driver::GetAllKinematicSoftLimits >
template<>
struct DataType< ::kortex_driver::GetAllKinematicSoftLimitsRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetAllKinematicSoftLimits >::value();
  }
  static const char* value(const ::kortex_driver::GetAllKinematicSoftLimitsRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetAllKinematicSoftLimitsResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetAllKinematicSoftLimits >
template<>
struct MD5Sum< ::kortex_driver::GetAllKinematicSoftLimitsResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetAllKinematicSoftLimits >::value();
  }
  static const char* value(const ::kortex_driver::GetAllKinematicSoftLimitsResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetAllKinematicSoftLimitsResponse> should match
// service_traits::DataType< ::kortex_driver::GetAllKinematicSoftLimits >
template<>
struct DataType< ::kortex_driver::GetAllKinematicSoftLimitsResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetAllKinematicSoftLimits >::value();
  }
  static const char* value(const ::kortex_driver::GetAllKinematicSoftLimitsResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETALLKINEMATICSOFTLIMITS_H
