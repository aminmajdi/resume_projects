// Generated by gencpp from file kortex_driver/I2CReadRegister.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_I2CREADREGISTER_H
#define KORTEX_DRIVER_MESSAGE_I2CREADREGISTER_H

#include <ros/service_traits.h>


#include <kortex_driver/I2CReadRegisterRequest.h>
#include <kortex_driver/I2CReadRegisterResponse.h>


namespace kortex_driver
{

struct I2CReadRegister
{

typedef I2CReadRegisterRequest Request;
typedef I2CReadRegisterResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct I2CReadRegister
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::I2CReadRegister > {
  static const char* value()
  {
    return "4bdf02ffe8fd0ef6ff8749422c787f42";
  }

  static const char* value(const ::kortex_driver::I2CReadRegister&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::I2CReadRegister > {
  static const char* value()
  {
    return "kortex_driver/I2CReadRegister";
  }

  static const char* value(const ::kortex_driver::I2CReadRegister&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::I2CReadRegisterRequest> should match
// service_traits::MD5Sum< ::kortex_driver::I2CReadRegister >
template<>
struct MD5Sum< ::kortex_driver::I2CReadRegisterRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::I2CReadRegister >::value();
  }
  static const char* value(const ::kortex_driver::I2CReadRegisterRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::I2CReadRegisterRequest> should match
// service_traits::DataType< ::kortex_driver::I2CReadRegister >
template<>
struct DataType< ::kortex_driver::I2CReadRegisterRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::I2CReadRegister >::value();
  }
  static const char* value(const ::kortex_driver::I2CReadRegisterRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::I2CReadRegisterResponse> should match
// service_traits::MD5Sum< ::kortex_driver::I2CReadRegister >
template<>
struct MD5Sum< ::kortex_driver::I2CReadRegisterResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::I2CReadRegister >::value();
  }
  static const char* value(const ::kortex_driver::I2CReadRegisterResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::I2CReadRegisterResponse> should match
// service_traits::DataType< ::kortex_driver::I2CReadRegister >
template<>
struct DataType< ::kortex_driver::I2CReadRegisterResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::I2CReadRegister >::value();
  }
  static const char* value(const ::kortex_driver::I2CReadRegisterResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_I2CREADREGISTER_H
