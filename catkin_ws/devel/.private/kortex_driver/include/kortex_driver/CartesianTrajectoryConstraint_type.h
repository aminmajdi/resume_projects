// Generated by gencpp from file kortex_driver/CartesianTrajectoryConstraint_type.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_CARTESIANTRAJECTORYCONSTRAINT_TYPE_H
#define KORTEX_DRIVER_MESSAGE_CARTESIANTRAJECTORYCONSTRAINT_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/CartesianSpeed.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct CartesianTrajectoryConstraint_type_
{
  typedef CartesianTrajectoryConstraint_type_<ContainerAllocator> Type;

  CartesianTrajectoryConstraint_type_()
    : speed()
    , duration()  {
    }
  CartesianTrajectoryConstraint_type_(const ContainerAllocator& _alloc)
    : speed(_alloc)
    , duration(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::kortex_driver::CartesianSpeed_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::CartesianSpeed_<ContainerAllocator> >::other >  _speed_type;
  _speed_type speed;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianTrajectoryConstraint_type_

typedef ::kortex_driver::CartesianTrajectoryConstraint_type_<std::allocator<void> > CartesianTrajectoryConstraint_type;

typedef boost::shared_ptr< ::kortex_driver::CartesianTrajectoryConstraint_type > CartesianTrajectoryConstraint_typePtr;
typedef boost::shared_ptr< ::kortex_driver::CartesianTrajectoryConstraint_type const> CartesianTrajectoryConstraint_typeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator1> & lhs, const ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator1> & lhs, const ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e14536e767e1f700827f285e4e6fd832";
  }

  static const char* value(const ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe14536e767e1f700ULL;
  static const uint64_t static_value2 = 0x827f285e4e6fd832ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/CartesianTrajectoryConstraint_type";
  }

  static const char* value(const ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"CartesianSpeed[] speed\n"
"uint32[] duration\n"
"================================================================================\n"
"MSG: kortex_driver/CartesianSpeed\n"
"\n"
"float32 translation\n"
"float32 orientation\n"
;
  }

  static const char* value(const ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianTrajectoryConstraint_type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::CartesianTrajectoryConstraint_type_<ContainerAllocator>& v)
  {
    s << indent << "speed[]" << std::endl;
    for (size_t i = 0; i < v.speed.size(); ++i)
    {
      s << indent << "  speed[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::CartesianSpeed_<ContainerAllocator> >::stream(s, indent + "    ", v.speed[i]);
    }
    s << indent << "duration[]" << std::endl;
    for (size_t i = 0; i < v.duration.size(); ++i)
    {
      s << indent << "  duration[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.duration[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_CARTESIANTRAJECTORYCONSTRAINT_TYPE_H
