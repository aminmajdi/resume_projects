// Generated by gencpp from file kortex_driver/StatusFlags.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_STATUSFLAGS_H
#define KORTEX_DRIVER_MESSAGE_STATUSFLAGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct StatusFlags_
{
  typedef StatusFlags_<ContainerAllocator> Type;

  StatusFlags_()
    {
    }
  StatusFlags_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN_STATUS)
  #undef UNKNOWN_STATUS
#endif
#if defined(_WIN32) && defined(STABILIZED)
  #undef STABILIZED
#endif
#if defined(_WIN32) && defined(MOTOR_INDEXED)
  #undef MOTOR_INDEXED
#endif
#if defined(_WIN32) && defined(MOTOR_INDEXING)
  #undef MOTOR_INDEXING
#endif
#if defined(_WIN32) && defined(JOINT_INDEXED)
  #undef JOINT_INDEXED
#endif
#if defined(_WIN32) && defined(JOINT_INDEXING)
  #undef JOINT_INDEXING
#endif
#if defined(_WIN32) && defined(HIGH_PRECISION)
  #undef HIGH_PRECISION
#endif
#if defined(_WIN32) && defined(BRAKING)
  #undef BRAKING
#endif
#if defined(_WIN32) && defined(SERVOING)
  #undef SERVOING
#endif
#if defined(_WIN32) && defined(MAJOR_FAULT)
  #undef MAJOR_FAULT
#endif
#if defined(_WIN32) && defined(MINOR_FAULT)
  #undef MINOR_FAULT
#endif
#if defined(_WIN32) && defined(CALIBRATED_TORQUE)
  #undef CALIBRATED_TORQUE
#endif
#if defined(_WIN32) && defined(CALIBRATED_MAG_SENSOR)
  #undef CALIBRATED_MAG_SENSOR
#endif
#if defined(_WIN32) && defined(CALIBRATED_ZERO)
  #undef CALIBRATED_ZERO
#endif
#if defined(_WIN32) && defined(GPIO_0)
  #undef GPIO_0
#endif
#if defined(_WIN32) && defined(GPIO_1)
  #undef GPIO_1
#endif
#if defined(_WIN32) && defined(CS_QUASI_STATIC_CONTACT)
  #undef CS_QUASI_STATIC_CONTACT
#endif
#if defined(_WIN32) && defined(CS_TRANSIENT_CONTACT)
  #undef CS_TRANSIENT_CONTACT
#endif
#if defined(_WIN32) && defined(VFD_HALL_SYNC)
  #undef VFD_HALL_SYNC
#endif
#if defined(_WIN32) && defined(VFD_INDEXED)
  #undef VFD_INDEXED
#endif
#if defined(_WIN32) && defined(DRIVE_BOARD_READY)
  #undef DRIVE_BOARD_READY
#endif
#if defined(_WIN32) && defined(CALIBRATED_CURRENT)
  #undef CALIBRATED_CURRENT
#endif
#if defined(_WIN32) && defined(CALIBRATED_MOTOR)
  #undef CALIBRATED_MOTOR
#endif
#if defined(_WIN32) && defined(SW0_ACTIVE)
  #undef SW0_ACTIVE
#endif
#if defined(_WIN32) && defined(SW1_ACTIVE)
  #undef SW1_ACTIVE
#endif

  enum {
    UNKNOWN_STATUS = 0u,
    STABILIZED = 16u,
    MOTOR_INDEXED = 32u,
    MOTOR_INDEXING = 64u,
    JOINT_INDEXED = 128u,
    JOINT_INDEXING = 256u,
    HIGH_PRECISION = 512u,
    BRAKING = 1024u,
    SERVOING = 2048u,
    MAJOR_FAULT = 4096u,
    MINOR_FAULT = 8192u,
    CALIBRATED_TORQUE = 16384u,
    CALIBRATED_MAG_SENSOR = 32768u,
    CALIBRATED_ZERO = 65536u,
    GPIO_0 = 131072u,
    GPIO_1 = 262144u,
    CS_QUASI_STATIC_CONTACT = 524288u,
    CS_TRANSIENT_CONTACT = 1048576u,
    VFD_HALL_SYNC = 2097152u,
    VFD_INDEXED = 4194304u,
    DRIVE_BOARD_READY = 8388608u,
    CALIBRATED_CURRENT = 16777216u,
    CALIBRATED_MOTOR = 33554432u,
    SW0_ACTIVE = 67108864u,
    SW1_ACTIVE = 134217728u,
  };


  typedef boost::shared_ptr< ::kortex_driver::StatusFlags_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::StatusFlags_<ContainerAllocator> const> ConstPtr;

}; // struct StatusFlags_

typedef ::kortex_driver::StatusFlags_<std::allocator<void> > StatusFlags;

typedef boost::shared_ptr< ::kortex_driver::StatusFlags > StatusFlagsPtr;
typedef boost::shared_ptr< ::kortex_driver::StatusFlags const> StatusFlagsConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::StatusFlags_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::StatusFlags_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::StatusFlags_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::StatusFlags_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::StatusFlags_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::StatusFlags_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::StatusFlags_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::StatusFlags_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::StatusFlags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94f8e368a8b96139de6828bbd6ed2797";
  }

  static const char* value(const ::kortex_driver::StatusFlags_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94f8e368a8b96139ULL;
  static const uint64_t static_value2 = 0xde6828bbd6ed2797ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::StatusFlags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/StatusFlags";
  }

  static const char* value(const ::kortex_driver::StatusFlags_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::StatusFlags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNKNOWN_STATUS = 0\n"
"\n"
"uint32 STABILIZED = 16\n"
"\n"
"uint32 MOTOR_INDEXED = 32\n"
"\n"
"uint32 MOTOR_INDEXING = 64\n"
"\n"
"uint32 JOINT_INDEXED = 128\n"
"\n"
"uint32 JOINT_INDEXING = 256\n"
"\n"
"uint32 HIGH_PRECISION = 512\n"
"\n"
"uint32 BRAKING = 1024\n"
"\n"
"uint32 SERVOING = 2048\n"
"\n"
"uint32 MAJOR_FAULT = 4096\n"
"\n"
"uint32 MINOR_FAULT = 8192\n"
"\n"
"uint32 CALIBRATED_TORQUE = 16384\n"
"\n"
"uint32 CALIBRATED_MAG_SENSOR = 32768\n"
"\n"
"uint32 CALIBRATED_ZERO = 65536\n"
"\n"
"uint32 GPIO_0 = 131072\n"
"\n"
"uint32 GPIO_1 = 262144\n"
"\n"
"uint32 CS_QUASI_STATIC_CONTACT = 524288\n"
"\n"
"uint32 CS_TRANSIENT_CONTACT = 1048576\n"
"\n"
"uint32 VFD_HALL_SYNC = 2097152\n"
"\n"
"uint32 VFD_INDEXED = 4194304\n"
"\n"
"uint32 DRIVE_BOARD_READY = 8388608\n"
"\n"
"uint32 CALIBRATED_CURRENT = 16777216\n"
"\n"
"uint32 CALIBRATED_MOTOR = 33554432\n"
"\n"
"uint32 SW0_ACTIVE = 67108864\n"
"\n"
"uint32 SW1_ACTIVE = 134217728\n"
;
  }

  static const char* value(const ::kortex_driver::StatusFlags_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::StatusFlags_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StatusFlags_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::StatusFlags_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::StatusFlags_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_STATUSFLAGS_H
