// Generated by gencpp from file kortex_driver/CommandMode.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_COMMANDMODE_H
#define KORTEX_DRIVER_MESSAGE_COMMANDMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct CommandMode_
{
  typedef CommandMode_<ContainerAllocator> Type;

  CommandMode_()
    {
    }
  CommandMode_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CYCLIC)
  #undef CYCLIC
#endif
#if defined(_WIN32) && defined(ASYNC_CYCLIC_FLAGS)
  #undef ASYNC_CYCLIC_FLAGS
#endif
#if defined(_WIN32) && defined(ASYNC)
  #undef ASYNC
#endif
#if defined(_WIN32) && defined(CYCLIC_JITTERCOMPENSATED_POSITION)
  #undef CYCLIC_JITTERCOMPENSATED_POSITION
#endif
#if defined(_WIN32) && defined(CYCLIC_JITTERCOMPENSATED_VELOCITY)
  #undef CYCLIC_JITTERCOMPENSATED_VELOCITY
#endif
#if defined(_WIN32) && defined(CYCLIC_JITTERCOMPENSATED_ACCELERATION)
  #undef CYCLIC_JITTERCOMPENSATED_ACCELERATION
#endif

  enum {
    CYCLIC = 0u,
    ASYNC_CYCLIC_FLAGS = 1u,
    ASYNC = 2u,
    CYCLIC_JITTERCOMPENSATED_POSITION = 3u,
    CYCLIC_JITTERCOMPENSATED_VELOCITY = 4u,
    CYCLIC_JITTERCOMPENSATED_ACCELERATION = 5u,
  };


  typedef boost::shared_ptr< ::kortex_driver::CommandMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::CommandMode_<ContainerAllocator> const> ConstPtr;

}; // struct CommandMode_

typedef ::kortex_driver::CommandMode_<std::allocator<void> > CommandMode;

typedef boost::shared_ptr< ::kortex_driver::CommandMode > CommandModePtr;
typedef boost::shared_ptr< ::kortex_driver::CommandMode const> CommandModeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::CommandMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::CommandMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::CommandMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::CommandMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::CommandMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::CommandMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::CommandMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::CommandMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::CommandMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d888c2b80a47e457086f44a5dd3543e";
  }

  static const char* value(const ::kortex_driver::CommandMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d888c2b80a47e45ULL;
  static const uint64_t static_value2 = 0x7086f44a5dd3543eULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::CommandMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/CommandMode";
  }

  static const char* value(const ::kortex_driver::CommandMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::CommandMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 CYCLIC = 0\n"
"\n"
"uint32 ASYNC_CYCLIC_FLAGS = 1\n"
"\n"
"uint32 ASYNC = 2\n"
"\n"
"uint32 CYCLIC_JITTERCOMPENSATED_POSITION = 3\n"
"\n"
"uint32 CYCLIC_JITTERCOMPENSATED_VELOCITY = 4\n"
"\n"
"uint32 CYCLIC_JITTERCOMPENSATED_ACCELERATION = 5\n"
;
  }

  static const char* value(const ::kortex_driver::CommandMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::CommandMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommandMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::CommandMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::CommandMode_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_COMMANDMODE_H
