// Generated by gencpp from file kortex_driver/GetWrenchSoftLimitation.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETWRENCHSOFTLIMITATION_H
#define KORTEX_DRIVER_MESSAGE_GETWRENCHSOFTLIMITATION_H

#include <ros/service_traits.h>


#include <kortex_driver/GetWrenchSoftLimitationRequest.h>
#include <kortex_driver/GetWrenchSoftLimitationResponse.h>


namespace kortex_driver
{

struct GetWrenchSoftLimitation
{

typedef GetWrenchSoftLimitationRequest Request;
typedef GetWrenchSoftLimitationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetWrenchSoftLimitation
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetWrenchSoftLimitation > {
  static const char* value()
  {
    return "d1a67d52edbd3c6e07b5922a22648cf3";
  }

  static const char* value(const ::kortex_driver::GetWrenchSoftLimitation&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetWrenchSoftLimitation > {
  static const char* value()
  {
    return "kortex_driver/GetWrenchSoftLimitation";
  }

  static const char* value(const ::kortex_driver::GetWrenchSoftLimitation&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetWrenchSoftLimitationRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetWrenchSoftLimitation >
template<>
struct MD5Sum< ::kortex_driver::GetWrenchSoftLimitationRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetWrenchSoftLimitation >::value();
  }
  static const char* value(const ::kortex_driver::GetWrenchSoftLimitationRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetWrenchSoftLimitationRequest> should match
// service_traits::DataType< ::kortex_driver::GetWrenchSoftLimitation >
template<>
struct DataType< ::kortex_driver::GetWrenchSoftLimitationRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetWrenchSoftLimitation >::value();
  }
  static const char* value(const ::kortex_driver::GetWrenchSoftLimitationRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetWrenchSoftLimitationResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetWrenchSoftLimitation >
template<>
struct MD5Sum< ::kortex_driver::GetWrenchSoftLimitationResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetWrenchSoftLimitation >::value();
  }
  static const char* value(const ::kortex_driver::GetWrenchSoftLimitationResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetWrenchSoftLimitationResponse> should match
// service_traits::DataType< ::kortex_driver::GetWrenchSoftLimitation >
template<>
struct DataType< ::kortex_driver::GetWrenchSoftLimitationResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetWrenchSoftLimitation >::value();
  }
  static const char* value(const ::kortex_driver::GetWrenchSoftLimitationResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETWRENCHSOFTLIMITATION_H
