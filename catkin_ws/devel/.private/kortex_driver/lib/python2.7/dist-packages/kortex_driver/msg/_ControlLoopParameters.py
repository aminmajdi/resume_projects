# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ControlLoopParameters.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControlLoopParameters(genpy.Message):
  _md5sum = "309e14eef078d5bea86d94317d3d0e04"
  _type = "kortex_driver/ControlLoopParameters"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint32 loop_selection
float32 error_saturation
float32 output_saturation
float32[] kAz
float32[] kBz
float32 error_dead_band"""
  __slots__ = ['loop_selection','error_saturation','output_saturation','kAz','kBz','error_dead_band']
  _slot_types = ['uint32','float32','float32','float32[]','float32[]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       loop_selection,error_saturation,output_saturation,kAz,kBz,error_dead_band

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlLoopParameters, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.loop_selection is None:
        self.loop_selection = 0
      if self.error_saturation is None:
        self.error_saturation = 0.
      if self.output_saturation is None:
        self.output_saturation = 0.
      if self.kAz is None:
        self.kAz = []
      if self.kBz is None:
        self.kBz = []
      if self.error_dead_band is None:
        self.error_dead_band = 0.
    else:
      self.loop_selection = 0
      self.error_saturation = 0.
      self.output_saturation = 0.
      self.kAz = []
      self.kBz = []
      self.error_dead_band = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I2f().pack(_x.loop_selection, _x.error_saturation, _x.output_saturation))
      length = len(self.kAz)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.kAz))
      length = len(self.kBz)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.kBz))
      _x = self.error_dead_band
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.loop_selection, _x.error_saturation, _x.output_saturation,) = _get_struct_I2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.kAz = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.kBz = s.unpack(str[start:end])
      start = end
      end += 4
      (self.error_dead_band,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I2f().pack(_x.loop_selection, _x.error_saturation, _x.output_saturation))
      length = len(self.kAz)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.kAz.tostring())
      length = len(self.kBz)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.kBz.tostring())
      _x = self.error_dead_band
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.loop_selection, _x.error_saturation, _x.output_saturation,) = _get_struct_I2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.kAz = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.kBz = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.error_dead_band,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2f = None
def _get_struct_I2f():
    global _struct_I2f
    if _struct_I2f is None:
        _struct_I2f = struct.Struct("<I2f")
    return _struct_I2f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
