// Generated by gencpp from file kortex_driver/TransformationMatrix.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_TRANSFORMATIONMATRIX_H
#define KORTEX_DRIVER_MESSAGE_TRANSFORMATIONMATRIX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/TransformationRow.h>
#include <kortex_driver/TransformationRow.h>
#include <kortex_driver/TransformationRow.h>
#include <kortex_driver/TransformationRow.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct TransformationMatrix_
{
  typedef TransformationMatrix_<ContainerAllocator> Type;

  TransformationMatrix_()
    : r0()
    , r1()
    , r2()
    , r3()  {
    }
  TransformationMatrix_(const ContainerAllocator& _alloc)
    : r0(_alloc)
    , r1(_alloc)
    , r2(_alloc)
    , r3(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kortex_driver::TransformationRow_<ContainerAllocator>  _r0_type;
  _r0_type r0;

   typedef  ::kortex_driver::TransformationRow_<ContainerAllocator>  _r1_type;
  _r1_type r1;

   typedef  ::kortex_driver::TransformationRow_<ContainerAllocator>  _r2_type;
  _r2_type r2;

   typedef  ::kortex_driver::TransformationRow_<ContainerAllocator>  _r3_type;
  _r3_type r3;





  typedef boost::shared_ptr< ::kortex_driver::TransformationMatrix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::TransformationMatrix_<ContainerAllocator> const> ConstPtr;

}; // struct TransformationMatrix_

typedef ::kortex_driver::TransformationMatrix_<std::allocator<void> > TransformationMatrix;

typedef boost::shared_ptr< ::kortex_driver::TransformationMatrix > TransformationMatrixPtr;
typedef boost::shared_ptr< ::kortex_driver::TransformationMatrix const> TransformationMatrixConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::TransformationMatrix_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::TransformationMatrix_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::TransformationMatrix_<ContainerAllocator1> & lhs, const ::kortex_driver::TransformationMatrix_<ContainerAllocator2> & rhs)
{
  return lhs.r0 == rhs.r0 &&
    lhs.r1 == rhs.r1 &&
    lhs.r2 == rhs.r2 &&
    lhs.r3 == rhs.r3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::TransformationMatrix_<ContainerAllocator1> & lhs, const ::kortex_driver::TransformationMatrix_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::TransformationMatrix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::TransformationMatrix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::TransformationMatrix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::TransformationMatrix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::TransformationMatrix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::TransformationMatrix_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::TransformationMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01b579348ba31feab01058d980795bad";
  }

  static const char* value(const ::kortex_driver::TransformationMatrix_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01b579348ba31feaULL;
  static const uint64_t static_value2 = 0xb01058d980795badULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::TransformationMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/TransformationMatrix";
  }

  static const char* value(const ::kortex_driver::TransformationMatrix_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::TransformationMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"TransformationRow r0\n"
"TransformationRow r1\n"
"TransformationRow r2\n"
"TransformationRow r3\n"
"================================================================================\n"
"MSG: kortex_driver/TransformationRow\n"
"\n"
"float32 c0\n"
"float32 c1\n"
"float32 c2\n"
"float32 c3\n"
;
  }

  static const char* value(const ::kortex_driver::TransformationMatrix_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::TransformationMatrix_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r0);
      stream.next(m.r1);
      stream.next(m.r2);
      stream.next(m.r3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransformationMatrix_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::TransformationMatrix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::TransformationMatrix_<ContainerAllocator>& v)
  {
    s << indent << "r0: ";
    s << std::endl;
    Printer< ::kortex_driver::TransformationRow_<ContainerAllocator> >::stream(s, indent + "  ", v.r0);
    s << indent << "r1: ";
    s << std::endl;
    Printer< ::kortex_driver::TransformationRow_<ContainerAllocator> >::stream(s, indent + "  ", v.r1);
    s << indent << "r2: ";
    s << std::endl;
    Printer< ::kortex_driver::TransformationRow_<ContainerAllocator> >::stream(s, indent + "  ", v.r2);
    s << indent << "r3: ";
    s << std::endl;
    Printer< ::kortex_driver::TransformationRow_<ContainerAllocator> >::stream(s, indent + "  ", v.r3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_TRANSFORMATIONMATRIX_H
