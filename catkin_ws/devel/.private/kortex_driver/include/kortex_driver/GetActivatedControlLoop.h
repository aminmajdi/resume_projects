// Generated by gencpp from file kortex_driver/GetActivatedControlLoop.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETACTIVATEDCONTROLLOOP_H
#define KORTEX_DRIVER_MESSAGE_GETACTIVATEDCONTROLLOOP_H

#include <ros/service_traits.h>


#include <kortex_driver/GetActivatedControlLoopRequest.h>
#include <kortex_driver/GetActivatedControlLoopResponse.h>


namespace kortex_driver
{

struct GetActivatedControlLoop
{

typedef GetActivatedControlLoopRequest Request;
typedef GetActivatedControlLoopResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetActivatedControlLoop
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetActivatedControlLoop > {
  static const char* value()
  {
    return "acf43fee1c712ad0288037798483900b";
  }

  static const char* value(const ::kortex_driver::GetActivatedControlLoop&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetActivatedControlLoop > {
  static const char* value()
  {
    return "kortex_driver/GetActivatedControlLoop";
  }

  static const char* value(const ::kortex_driver::GetActivatedControlLoop&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetActivatedControlLoopRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetActivatedControlLoop >
template<>
struct MD5Sum< ::kortex_driver::GetActivatedControlLoopRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetActivatedControlLoop >::value();
  }
  static const char* value(const ::kortex_driver::GetActivatedControlLoopRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetActivatedControlLoopRequest> should match
// service_traits::DataType< ::kortex_driver::GetActivatedControlLoop >
template<>
struct DataType< ::kortex_driver::GetActivatedControlLoopRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetActivatedControlLoop >::value();
  }
  static const char* value(const ::kortex_driver::GetActivatedControlLoopRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetActivatedControlLoopResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetActivatedControlLoop >
template<>
struct MD5Sum< ::kortex_driver::GetActivatedControlLoopResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetActivatedControlLoop >::value();
  }
  static const char* value(const ::kortex_driver::GetActivatedControlLoopResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetActivatedControlLoopResponse> should match
// service_traits::DataType< ::kortex_driver::GetActivatedControlLoop >
template<>
struct DataType< ::kortex_driver::GetActivatedControlLoopResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetActivatedControlLoop >::value();
  }
  static const char* value(const ::kortex_driver::GetActivatedControlLoopResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETACTIVATEDCONTROLLOOP_H
