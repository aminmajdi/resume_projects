// Generated by gencpp from file kortex_driver/TorqueCalibration.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_TORQUECALIBRATION_H
#define KORTEX_DRIVER_MESSAGE_TORQUECALIBRATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct TorqueCalibration_
{
  typedef TorqueCalibration_<ContainerAllocator> Type;

  TorqueCalibration_()
    : global_gain(0.0)
    , global_offset(0.0)
    , gain()
    , offset()  {
    }
  TorqueCalibration_(const ContainerAllocator& _alloc)
    : global_gain(0.0)
    , global_offset(0.0)
    , gain(_alloc)
    , offset(_alloc)  {
  (void)_alloc;
    }



   typedef float _global_gain_type;
  _global_gain_type global_gain;

   typedef float _global_offset_type;
  _global_offset_type global_offset;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _gain_type;
  _gain_type gain;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _offset_type;
  _offset_type offset;





  typedef boost::shared_ptr< ::kortex_driver::TorqueCalibration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::TorqueCalibration_<ContainerAllocator> const> ConstPtr;

}; // struct TorqueCalibration_

typedef ::kortex_driver::TorqueCalibration_<std::allocator<void> > TorqueCalibration;

typedef boost::shared_ptr< ::kortex_driver::TorqueCalibration > TorqueCalibrationPtr;
typedef boost::shared_ptr< ::kortex_driver::TorqueCalibration const> TorqueCalibrationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::TorqueCalibration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::TorqueCalibration_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::TorqueCalibration_<ContainerAllocator1> & lhs, const ::kortex_driver::TorqueCalibration_<ContainerAllocator2> & rhs)
{
  return lhs.global_gain == rhs.global_gain &&
    lhs.global_offset == rhs.global_offset &&
    lhs.gain == rhs.gain &&
    lhs.offset == rhs.offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::TorqueCalibration_<ContainerAllocator1> & lhs, const ::kortex_driver::TorqueCalibration_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::TorqueCalibration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::TorqueCalibration_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::TorqueCalibration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::TorqueCalibration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::TorqueCalibration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::TorqueCalibration_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::TorqueCalibration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "313d945f71d43fe1540908829effe904";
  }

  static const char* value(const ::kortex_driver::TorqueCalibration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x313d945f71d43fe1ULL;
  static const uint64_t static_value2 = 0x540908829effe904ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::TorqueCalibration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/TorqueCalibration";
  }

  static const char* value(const ::kortex_driver::TorqueCalibration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::TorqueCalibration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float32 global_gain\n"
"float32 global_offset\n"
"float32[] gain\n"
"float32[] offset\n"
;
  }

  static const char* value(const ::kortex_driver::TorqueCalibration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::TorqueCalibration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.global_gain);
      stream.next(m.global_offset);
      stream.next(m.gain);
      stream.next(m.offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TorqueCalibration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::TorqueCalibration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::TorqueCalibration_<ContainerAllocator>& v)
  {
    s << indent << "global_gain: ";
    Printer<float>::stream(s, indent + "  ", v.global_gain);
    s << indent << "global_offset: ";
    Printer<float>::stream(s, indent + "  ", v.global_offset);
    s << indent << "gain[]" << std::endl;
    for (size_t i = 0; i < v.gain.size(); ++i)
    {
      s << indent << "  gain[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.gain[i]);
    }
    s << indent << "offset[]" << std::endl;
    for (size_t i = 0; i < v.offset.size(); ++i)
    {
      s << indent << "  offset[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.offset[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_TORQUECALIBRATION_H
