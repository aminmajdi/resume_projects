// Generated by gencpp from file kortex_driver/GetKinematicSoftLimits.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETKINEMATICSOFTLIMITS_H
#define KORTEX_DRIVER_MESSAGE_GETKINEMATICSOFTLIMITS_H

#include <ros/service_traits.h>


#include <kortex_driver/GetKinematicSoftLimitsRequest.h>
#include <kortex_driver/GetKinematicSoftLimitsResponse.h>


namespace kortex_driver
{

struct GetKinematicSoftLimits
{

typedef GetKinematicSoftLimitsRequest Request;
typedef GetKinematicSoftLimitsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetKinematicSoftLimits
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetKinematicSoftLimits > {
  static const char* value()
  {
    return "8372b01bbf6aa0f718ce44248decf90a";
  }

  static const char* value(const ::kortex_driver::GetKinematicSoftLimits&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetKinematicSoftLimits > {
  static const char* value()
  {
    return "kortex_driver/GetKinematicSoftLimits";
  }

  static const char* value(const ::kortex_driver::GetKinematicSoftLimits&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetKinematicSoftLimitsRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetKinematicSoftLimits >
template<>
struct MD5Sum< ::kortex_driver::GetKinematicSoftLimitsRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetKinematicSoftLimits >::value();
  }
  static const char* value(const ::kortex_driver::GetKinematicSoftLimitsRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetKinematicSoftLimitsRequest> should match
// service_traits::DataType< ::kortex_driver::GetKinematicSoftLimits >
template<>
struct DataType< ::kortex_driver::GetKinematicSoftLimitsRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetKinematicSoftLimits >::value();
  }
  static const char* value(const ::kortex_driver::GetKinematicSoftLimitsRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetKinematicSoftLimitsResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetKinematicSoftLimits >
template<>
struct MD5Sum< ::kortex_driver::GetKinematicSoftLimitsResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetKinematicSoftLimits >::value();
  }
  static const char* value(const ::kortex_driver::GetKinematicSoftLimitsResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetKinematicSoftLimitsResponse> should match
// service_traits::DataType< ::kortex_driver::GetKinematicSoftLimits >
template<>
struct DataType< ::kortex_driver::GetKinematicSoftLimitsResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetKinematicSoftLimits >::value();
  }
  static const char* value(const ::kortex_driver::GetKinematicSoftLimitsResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETKINEMATICSOFTLIMITS_H
