# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ControllerConfiguration.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class ControllerConfiguration(genpy.Message):
  _md5sum = "0a2e41d50fc9c491b9a0c9000a90ca85"
  _type = "kortex_driver/ControllerConfiguration"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
ControllerHandle handle
string name
MappingHandle active_mapping_handle
string analog_input_identifier_enum
string digital_input_identifier_enum
================================================================================
MSG: kortex_driver/ControllerHandle

uint32 type
uint32 controller_identifier
================================================================================
MSG: kortex_driver/MappingHandle

uint32 identifier
uint32 permission"""
  __slots__ = ['handle','name','active_mapping_handle','analog_input_identifier_enum','digital_input_identifier_enum']
  _slot_types = ['kortex_driver/ControllerHandle','string','kortex_driver/MappingHandle','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       handle,name,active_mapping_handle,analog_input_identifier_enum,digital_input_identifier_enum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControllerConfiguration, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.handle is None:
        self.handle = kortex_driver.msg.ControllerHandle()
      if self.name is None:
        self.name = ''
      if self.active_mapping_handle is None:
        self.active_mapping_handle = kortex_driver.msg.MappingHandle()
      if self.analog_input_identifier_enum is None:
        self.analog_input_identifier_enum = ''
      if self.digital_input_identifier_enum is None:
        self.digital_input_identifier_enum = ''
    else:
      self.handle = kortex_driver.msg.ControllerHandle()
      self.name = ''
      self.active_mapping_handle = kortex_driver.msg.MappingHandle()
      self.analog_input_identifier_enum = ''
      self.digital_input_identifier_enum = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.handle.type, _x.handle.controller_identifier))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.active_mapping_handle.identifier, _x.active_mapping_handle.permission))
      _x = self.analog_input_identifier_enum
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.digital_input_identifier_enum
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.handle is None:
        self.handle = kortex_driver.msg.ControllerHandle()
      if self.active_mapping_handle is None:
        self.active_mapping_handle = kortex_driver.msg.MappingHandle()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.handle.type, _x.handle.controller_identifier,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.active_mapping_handle.identifier, _x.active_mapping_handle.permission,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.analog_input_identifier_enum = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.analog_input_identifier_enum = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.digital_input_identifier_enum = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.digital_input_identifier_enum = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.handle.type, _x.handle.controller_identifier))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.active_mapping_handle.identifier, _x.active_mapping_handle.permission))
      _x = self.analog_input_identifier_enum
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.digital_input_identifier_enum
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.handle is None:
        self.handle = kortex_driver.msg.ControllerHandle()
      if self.active_mapping_handle is None:
        self.active_mapping_handle = kortex_driver.msg.MappingHandle()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.handle.type, _x.handle.controller_identifier,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.active_mapping_handle.identifier, _x.active_mapping_handle.permission,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.analog_input_identifier_enum = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.analog_input_identifier_enum = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.digital_input_identifier_enum = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.digital_input_identifier_enum = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
