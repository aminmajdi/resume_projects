// Generated by gencpp from file kortex_driver/GetToolConfiguration.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETTOOLCONFIGURATION_H
#define KORTEX_DRIVER_MESSAGE_GETTOOLCONFIGURATION_H

#include <ros/service_traits.h>


#include <kortex_driver/GetToolConfigurationRequest.h>
#include <kortex_driver/GetToolConfigurationResponse.h>


namespace kortex_driver
{

struct GetToolConfiguration
{

typedef GetToolConfigurationRequest Request;
typedef GetToolConfigurationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetToolConfiguration
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetToolConfiguration > {
  static const char* value()
  {
    return "49c06fd31c2188ee0d629d1b8491b1f0";
  }

  static const char* value(const ::kortex_driver::GetToolConfiguration&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetToolConfiguration > {
  static const char* value()
  {
    return "kortex_driver/GetToolConfiguration";
  }

  static const char* value(const ::kortex_driver::GetToolConfiguration&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetToolConfigurationRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetToolConfiguration >
template<>
struct MD5Sum< ::kortex_driver::GetToolConfigurationRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetToolConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::GetToolConfigurationRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetToolConfigurationRequest> should match
// service_traits::DataType< ::kortex_driver::GetToolConfiguration >
template<>
struct DataType< ::kortex_driver::GetToolConfigurationRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetToolConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::GetToolConfigurationRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetToolConfigurationResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetToolConfiguration >
template<>
struct MD5Sum< ::kortex_driver::GetToolConfigurationResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetToolConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::GetToolConfigurationResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetToolConfigurationResponse> should match
// service_traits::DataType< ::kortex_driver::GetToolConfiguration >
template<>
struct DataType< ::kortex_driver::GetToolConfigurationResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetToolConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::GetToolConfigurationResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETTOOLCONFIGURATION_H
