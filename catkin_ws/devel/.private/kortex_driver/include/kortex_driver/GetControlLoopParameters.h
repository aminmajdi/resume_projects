// Generated by gencpp from file kortex_driver/GetControlLoopParameters.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETCONTROLLOOPPARAMETERS_H
#define KORTEX_DRIVER_MESSAGE_GETCONTROLLOOPPARAMETERS_H

#include <ros/service_traits.h>


#include <kortex_driver/GetControlLoopParametersRequest.h>
#include <kortex_driver/GetControlLoopParametersResponse.h>


namespace kortex_driver
{

struct GetControlLoopParameters
{

typedef GetControlLoopParametersRequest Request;
typedef GetControlLoopParametersResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetControlLoopParameters
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetControlLoopParameters > {
  static const char* value()
  {
    return "fe660929cab3528eb46e3ce651e5ce58";
  }

  static const char* value(const ::kortex_driver::GetControlLoopParameters&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetControlLoopParameters > {
  static const char* value()
  {
    return "kortex_driver/GetControlLoopParameters";
  }

  static const char* value(const ::kortex_driver::GetControlLoopParameters&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetControlLoopParametersRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetControlLoopParameters >
template<>
struct MD5Sum< ::kortex_driver::GetControlLoopParametersRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetControlLoopParameters >::value();
  }
  static const char* value(const ::kortex_driver::GetControlLoopParametersRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetControlLoopParametersRequest> should match
// service_traits::DataType< ::kortex_driver::GetControlLoopParameters >
template<>
struct DataType< ::kortex_driver::GetControlLoopParametersRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetControlLoopParameters >::value();
  }
  static const char* value(const ::kortex_driver::GetControlLoopParametersRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetControlLoopParametersResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetControlLoopParameters >
template<>
struct MD5Sum< ::kortex_driver::GetControlLoopParametersResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetControlLoopParameters >::value();
  }
  static const char* value(const ::kortex_driver::GetControlLoopParametersResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetControlLoopParametersResponse> should match
// service_traits::DataType< ::kortex_driver::GetControlLoopParameters >
template<>
struct DataType< ::kortex_driver::GetControlLoopParametersResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetControlLoopParameters >::value();
  }
  static const char* value(const ::kortex_driver::GetControlLoopParametersResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETCONTROLLOOPPARAMETERS_H
