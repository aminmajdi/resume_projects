// Generated by gencpp from file kortex_driver/I2CRead.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_I2CREAD_H
#define KORTEX_DRIVER_MESSAGE_I2CREAD_H

#include <ros/service_traits.h>


#include <kortex_driver/I2CReadRequest.h>
#include <kortex_driver/I2CReadResponse.h>


namespace kortex_driver
{

struct I2CRead
{

typedef I2CReadRequest Request;
typedef I2CReadResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct I2CRead
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::I2CRead > {
  static const char* value()
  {
    return "76252f712912deacb218cb19eaf79993";
  }

  static const char* value(const ::kortex_driver::I2CRead&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::I2CRead > {
  static const char* value()
  {
    return "kortex_driver/I2CRead";
  }

  static const char* value(const ::kortex_driver::I2CRead&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::I2CReadRequest> should match
// service_traits::MD5Sum< ::kortex_driver::I2CRead >
template<>
struct MD5Sum< ::kortex_driver::I2CReadRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::I2CRead >::value();
  }
  static const char* value(const ::kortex_driver::I2CReadRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::I2CReadRequest> should match
// service_traits::DataType< ::kortex_driver::I2CRead >
template<>
struct DataType< ::kortex_driver::I2CReadRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::I2CRead >::value();
  }
  static const char* value(const ::kortex_driver::I2CReadRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::I2CReadResponse> should match
// service_traits::MD5Sum< ::kortex_driver::I2CRead >
template<>
struct MD5Sum< ::kortex_driver::I2CReadResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::I2CRead >::value();
  }
  static const char* value(const ::kortex_driver::I2CReadResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::I2CReadResponse> should match
// service_traits::DataType< ::kortex_driver::I2CRead >
template<>
struct DataType< ::kortex_driver::I2CReadResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::I2CRead >::value();
  }
  static const char* value(const ::kortex_driver::I2CReadResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_I2CREAD_H
