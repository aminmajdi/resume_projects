# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ControllerNotification_state.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class ControllerNotification_state(genpy.Message):
  _md5sum = "f624e32135515547aa37c46203c9be9e"
  _type = "kortex_driver/ControllerNotification_state"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
ControllerState[] controller_state
ControllerElementState[] controller_element
================================================================================
MSG: kortex_driver/ControllerState

ControllerHandle handle
uint32 event_type
================================================================================
MSG: kortex_driver/ControllerHandle

uint32 type
uint32 controller_identifier
================================================================================
MSG: kortex_driver/ControllerElementState

ControllerElementHandle handle
uint32 event_type
float32 axis_value
================================================================================
MSG: kortex_driver/ControllerElementHandle

ControllerHandle controller_handle
ControllerElementHandle_identifier oneof_identifier
================================================================================
MSG: kortex_driver/ControllerElementHandle_identifier

uint32[] button
uint32[] axis"""
  __slots__ = ['controller_state','controller_element']
  _slot_types = ['kortex_driver/ControllerState[]','kortex_driver/ControllerElementState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       controller_state,controller_element

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControllerNotification_state, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.controller_state is None:
        self.controller_state = []
      if self.controller_element is None:
        self.controller_element = []
    else:
      self.controller_state = []
      self.controller_element = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.controller_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.controller_state:
        _v1 = val1.handle
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.type, _x.controller_identifier))
        _x = val1.event_type
        buff.write(_get_struct_I().pack(_x))
      length = len(self.controller_element)
      buff.write(_struct_I.pack(length))
      for val1 in self.controller_element:
        _v2 = val1.handle
        _v3 = _v2.controller_handle
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.type, _x.controller_identifier))
        _v4 = _v2.oneof_identifier
        length = len(_v4.button)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v4.button))
        length = len(_v4.axis)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v4.axis))
        _x = val1
        buff.write(_get_struct_If().pack(_x.event_type, _x.axis_value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.controller_state is None:
        self.controller_state = None
      if self.controller_element is None:
        self.controller_element = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controller_state = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ControllerState()
        _v5 = val1.handle
        _x = _v5
        start = end
        end += 8
        (_x.type, _x.controller_identifier,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (val1.event_type,) = _get_struct_I().unpack(str[start:end])
        self.controller_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controller_element = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ControllerElementState()
        _v6 = val1.handle
        _v7 = _v6.controller_handle
        _x = _v7
        start = end
        end += 8
        (_x.type, _x.controller_identifier,) = _get_struct_2I().unpack(str[start:end])
        _v8 = _v6.oneof_identifier
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v8.button = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v8.axis = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.event_type, _x.axis_value,) = _get_struct_If().unpack(str[start:end])
        self.controller_element.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.controller_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.controller_state:
        _v9 = val1.handle
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.type, _x.controller_identifier))
        _x = val1.event_type
        buff.write(_get_struct_I().pack(_x))
      length = len(self.controller_element)
      buff.write(_struct_I.pack(length))
      for val1 in self.controller_element:
        _v10 = val1.handle
        _v11 = _v10.controller_handle
        _x = _v11
        buff.write(_get_struct_2I().pack(_x.type, _x.controller_identifier))
        _v12 = _v10.oneof_identifier
        length = len(_v12.button)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v12.button.tostring())
        length = len(_v12.axis)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v12.axis.tostring())
        _x = val1
        buff.write(_get_struct_If().pack(_x.event_type, _x.axis_value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.controller_state is None:
        self.controller_state = None
      if self.controller_element is None:
        self.controller_element = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controller_state = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ControllerState()
        _v13 = val1.handle
        _x = _v13
        start = end
        end += 8
        (_x.type, _x.controller_identifier,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (val1.event_type,) = _get_struct_I().unpack(str[start:end])
        self.controller_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controller_element = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ControllerElementState()
        _v14 = val1.handle
        _v15 = _v14.controller_handle
        _x = _v15
        start = end
        end += 8
        (_x.type, _x.controller_identifier,) = _get_struct_2I().unpack(str[start:end])
        _v16 = _v14.oneof_identifier
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v16.button = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v16.axis = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        _x = val1
        start = end
        end += 8
        (_x.event_type, _x.axis_value,) = _get_struct_If().unpack(str[start:end])
        self.controller_element.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
