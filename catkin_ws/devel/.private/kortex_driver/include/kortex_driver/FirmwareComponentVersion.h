// Generated by gencpp from file kortex_driver/FirmwareComponentVersion.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_FIRMWARECOMPONENTVERSION_H
#define KORTEX_DRIVER_MESSAGE_FIRMWARECOMPONENTVERSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct FirmwareComponentVersion_
{
  typedef FirmwareComponentVersion_<ContainerAllocator> Type;

  FirmwareComponentVersion_()
    : name()
    , version()
    , device_id(0)  {
    }
  FirmwareComponentVersion_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , version(_alloc)
    , device_id(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _version_type;
  _version_type version;

   typedef uint32_t _device_id_type;
  _device_id_type device_id;





  typedef boost::shared_ptr< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> const> ConstPtr;

}; // struct FirmwareComponentVersion_

typedef ::kortex_driver::FirmwareComponentVersion_<std::allocator<void> > FirmwareComponentVersion;

typedef boost::shared_ptr< ::kortex_driver::FirmwareComponentVersion > FirmwareComponentVersionPtr;
typedef boost::shared_ptr< ::kortex_driver::FirmwareComponentVersion const> FirmwareComponentVersionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator1> & lhs, const ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.version == rhs.version &&
    lhs.device_id == rhs.device_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator1> & lhs, const ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33679c8f8b46a7fffb7ad238111a28bb";
  }

  static const char* value(const ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33679c8f8b46a7ffULL;
  static const uint64_t static_value2 = 0xfb7ad238111a28bbULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/FirmwareComponentVersion";
  }

  static const char* value(const ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string name\n"
"string version\n"
"uint32 device_id\n"
;
  }

  static const char* value(const ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.version);
      stream.next(m.device_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FirmwareComponentVersion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::FirmwareComponentVersion_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.version);
    s << indent << "device_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.device_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_FIRMWARECOMPONENTVERSION_H
