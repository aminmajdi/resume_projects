// Generated by gencpp from file kortex_driver/Query.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_QUERY_H
#define KORTEX_DRIVER_MESSAGE_QUERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/Timestamp.h>
#include <kortex_driver/Timestamp.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct Query_
{
  typedef Query_<ContainerAllocator> Type;

  Query_()
    : start_timestamp()
    , end_timestamp()
    , username()  {
    }
  Query_(const ContainerAllocator& _alloc)
    : start_timestamp(_alloc)
    , end_timestamp(_alloc)
    , username(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kortex_driver::Timestamp_<ContainerAllocator>  _start_timestamp_type;
  _start_timestamp_type start_timestamp;

   typedef  ::kortex_driver::Timestamp_<ContainerAllocator>  _end_timestamp_type;
  _end_timestamp_type end_timestamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _username_type;
  _username_type username;





  typedef boost::shared_ptr< ::kortex_driver::Query_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::Query_<ContainerAllocator> const> ConstPtr;

}; // struct Query_

typedef ::kortex_driver::Query_<std::allocator<void> > Query;

typedef boost::shared_ptr< ::kortex_driver::Query > QueryPtr;
typedef boost::shared_ptr< ::kortex_driver::Query const> QueryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::Query_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::Query_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::Query_<ContainerAllocator1> & lhs, const ::kortex_driver::Query_<ContainerAllocator2> & rhs)
{
  return lhs.start_timestamp == rhs.start_timestamp &&
    lhs.end_timestamp == rhs.end_timestamp &&
    lhs.username == rhs.username;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::Query_<ContainerAllocator1> & lhs, const ::kortex_driver::Query_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::Query_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::Query_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::Query_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::Query_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::Query_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::Query_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::Query_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13ee5e330f26cd5fd95364d08fb2a910";
  }

  static const char* value(const ::kortex_driver::Query_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13ee5e330f26cd5fULL;
  static const uint64_t static_value2 = 0xd95364d08fb2a910ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::Query_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/Query";
  }

  static const char* value(const ::kortex_driver::Query_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::Query_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"Timestamp start_timestamp\n"
"Timestamp end_timestamp\n"
"string username\n"
"================================================================================\n"
"MSG: kortex_driver/Timestamp\n"
"\n"
"uint32 sec\n"
"uint32 usec\n"
;
  }

  static const char* value(const ::kortex_driver::Query_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::Query_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_timestamp);
      stream.next(m.end_timestamp);
      stream.next(m.username);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Query_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::Query_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::Query_<ContainerAllocator>& v)
  {
    s << indent << "start_timestamp: ";
    s << std::endl;
    Printer< ::kortex_driver::Timestamp_<ContainerAllocator> >::stream(s, indent + "  ", v.start_timestamp);
    s << indent << "end_timestamp: ";
    s << std::endl;
    Printer< ::kortex_driver::Timestamp_<ContainerAllocator> >::stream(s, indent + "  ", v.end_timestamp);
    s << indent << "username: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.username);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_QUERY_H
