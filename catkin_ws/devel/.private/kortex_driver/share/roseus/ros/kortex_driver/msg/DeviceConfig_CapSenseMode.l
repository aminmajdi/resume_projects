;; Auto-generated. Do not edit!


(when (boundp 'kortex_driver::DeviceConfig_CapSenseMode)
  (if (not (find-package "KORTEX_DRIVER"))
    (make-package "KORTEX_DRIVER"))
  (shadow 'DeviceConfig_CapSenseMode (find-package "KORTEX_DRIVER")))
(unless (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE")
  (make-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))

(in-package "ROS")
;;//! \htmlinclude DeviceConfig_CapSenseMode.msg.html


(intern "*RESERVED*" (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))
(shadow '*RESERVED* (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))
(defconstant kortex_driver::DeviceConfig_CapSenseMode::*RESERVED* 0)
(intern "*INACTIVE*" (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))
(shadow '*INACTIVE* (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))
(defconstant kortex_driver::DeviceConfig_CapSenseMode::*INACTIVE* 1)
(intern "*ACTIVE_AUTO_THRESHOLD*" (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))
(shadow '*ACTIVE_AUTO_THRESHOLD* (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))
(defconstant kortex_driver::DeviceConfig_CapSenseMode::*ACTIVE_AUTO_THRESHOLD* 2)
(intern "*ACTIVE_NOISE_ATT*" (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))
(shadow '*ACTIVE_NOISE_ATT* (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))
(defconstant kortex_driver::DeviceConfig_CapSenseMode::*ACTIVE_NOISE_ATT* 4)
(intern "*ACTIVE_NORMAL*" (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))
(shadow '*ACTIVE_NORMAL* (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))
(defconstant kortex_driver::DeviceConfig_CapSenseMode::*ACTIVE_NORMAL* 5)
(intern "*CONFIGURATION*" (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))
(shadow '*CONFIGURATION* (find-package "KORTEX_DRIVER::DEVICECONFIG_CAPSENSEMODE"))
(defconstant kortex_driver::DeviceConfig_CapSenseMode::*CONFIGURATION* 6)
(defclass kortex_driver::DeviceConfig_CapSenseMode
  :super ros::object
  :slots ())

(defmethod kortex_driver::DeviceConfig_CapSenseMode
  (:init
   (&key
    )
   (send-super :init)
   self)
  (:serialization-length
   ()
   (+
    0
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;;
   self)
  )

(setf (get kortex_driver::DeviceConfig_CapSenseMode :md5sum-) "ab37ae8a57a132b00bf1d50bed534551")
(setf (get kortex_driver::DeviceConfig_CapSenseMode :datatype-) "kortex_driver/DeviceConfig_CapSenseMode")
(setf (get kortex_driver::DeviceConfig_CapSenseMode :definition-)
      "
uint32 RESERVED = 0

uint32 INACTIVE = 1

uint32 ACTIVE_AUTO_THRESHOLD = 2

uint32 ACTIVE_NOISE_ATT = 4

uint32 ACTIVE_NORMAL = 5

uint32 CONFIGURATION = 6

")



(provide :kortex_driver/DeviceConfig_CapSenseMode "ab37ae8a57a132b00bf1d50bed534551")


