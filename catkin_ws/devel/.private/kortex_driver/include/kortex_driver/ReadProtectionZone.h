// Generated by gencpp from file kortex_driver/ReadProtectionZone.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_READPROTECTIONZONE_H
#define KORTEX_DRIVER_MESSAGE_READPROTECTIONZONE_H

#include <ros/service_traits.h>


#include <kortex_driver/ReadProtectionZoneRequest.h>
#include <kortex_driver/ReadProtectionZoneResponse.h>


namespace kortex_driver
{

struct ReadProtectionZone
{

typedef ReadProtectionZoneRequest Request;
typedef ReadProtectionZoneResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct ReadProtectionZone
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::ReadProtectionZone > {
  static const char* value()
  {
    return "fd53b25b5f35cd926da1c19403c70bc5";
  }

  static const char* value(const ::kortex_driver::ReadProtectionZone&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::ReadProtectionZone > {
  static const char* value()
  {
    return "kortex_driver/ReadProtectionZone";
  }

  static const char* value(const ::kortex_driver::ReadProtectionZone&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::ReadProtectionZoneRequest> should match
// service_traits::MD5Sum< ::kortex_driver::ReadProtectionZone >
template<>
struct MD5Sum< ::kortex_driver::ReadProtectionZoneRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::ReadProtectionZone >::value();
  }
  static const char* value(const ::kortex_driver::ReadProtectionZoneRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::ReadProtectionZoneRequest> should match
// service_traits::DataType< ::kortex_driver::ReadProtectionZone >
template<>
struct DataType< ::kortex_driver::ReadProtectionZoneRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::ReadProtectionZone >::value();
  }
  static const char* value(const ::kortex_driver::ReadProtectionZoneRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::ReadProtectionZoneResponse> should match
// service_traits::MD5Sum< ::kortex_driver::ReadProtectionZone >
template<>
struct MD5Sum< ::kortex_driver::ReadProtectionZoneResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::ReadProtectionZone >::value();
  }
  static const char* value(const ::kortex_driver::ReadProtectionZoneResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::ReadProtectionZoneResponse> should match
// service_traits::DataType< ::kortex_driver::ReadProtectionZone >
template<>
struct DataType< ::kortex_driver::ReadProtectionZoneResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::ReadProtectionZone >::value();
  }
  static const char* value(const ::kortex_driver::ReadProtectionZoneResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_READPROTECTIONZONE_H
