// Generated by gencpp from file kortex_driver/SensorFocusAction_action_parameters.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_SENSORFOCUSACTION_ACTION_PARAMETERS_H
#define KORTEX_DRIVER_MESSAGE_SENSORFOCUSACTION_ACTION_PARAMETERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/FocusPoint.h>
#include <kortex_driver/ManualFocus.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct SensorFocusAction_action_parameters_
{
  typedef SensorFocusAction_action_parameters_<ContainerAllocator> Type;

  SensorFocusAction_action_parameters_()
    : focus_point()
    , manual_focus()  {
    }
  SensorFocusAction_action_parameters_(const ContainerAllocator& _alloc)
    : focus_point(_alloc)
    , manual_focus(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::kortex_driver::FocusPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::FocusPoint_<ContainerAllocator> >::other >  _focus_point_type;
  _focus_point_type focus_point;

   typedef std::vector< ::kortex_driver::ManualFocus_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::ManualFocus_<ContainerAllocator> >::other >  _manual_focus_type;
  _manual_focus_type manual_focus;





  typedef boost::shared_ptr< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> const> ConstPtr;

}; // struct SensorFocusAction_action_parameters_

typedef ::kortex_driver::SensorFocusAction_action_parameters_<std::allocator<void> > SensorFocusAction_action_parameters;

typedef boost::shared_ptr< ::kortex_driver::SensorFocusAction_action_parameters > SensorFocusAction_action_parametersPtr;
typedef boost::shared_ptr< ::kortex_driver::SensorFocusAction_action_parameters const> SensorFocusAction_action_parametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator1> & lhs, const ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator2> & rhs)
{
  return lhs.focus_point == rhs.focus_point &&
    lhs.manual_focus == rhs.manual_focus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator1> & lhs, const ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e07eb3126a69325e87d9841916b8dc3";
  }

  static const char* value(const ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e07eb3126a69325ULL;
  static const uint64_t static_value2 = 0xe87d9841916b8dc3ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/SensorFocusAction_action_parameters";
  }

  static const char* value(const ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"FocusPoint[] focus_point\n"
"ManualFocus[] manual_focus\n"
"================================================================================\n"
"MSG: kortex_driver/FocusPoint\n"
"\n"
"uint32 x\n"
"uint32 y\n"
"================================================================================\n"
"MSG: kortex_driver/ManualFocus\n"
"\n"
"uint32 value\n"
;
  }

  static const char* value(const ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.focus_point);
      stream.next(m.manual_focus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorFocusAction_action_parameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::SensorFocusAction_action_parameters_<ContainerAllocator>& v)
  {
    s << indent << "focus_point[]" << std::endl;
    for (size_t i = 0; i < v.focus_point.size(); ++i)
    {
      s << indent << "  focus_point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::FocusPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.focus_point[i]);
    }
    s << indent << "manual_focus[]" << std::endl;
    for (size_t i = 0; i < v.manual_focus.size(); ++i)
    {
      s << indent << "  manual_focus[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::ManualFocus_<ContainerAllocator> >::stream(s, indent + "    ", v.manual_focus[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_SENSORFOCUSACTION_ACTION_PARAMETERS_H
