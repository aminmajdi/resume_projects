// Generated by gencpp from file kortex_driver/GetOptionInformation.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETOPTIONINFORMATION_H
#define KORTEX_DRIVER_MESSAGE_GETOPTIONINFORMATION_H

#include <ros/service_traits.h>


#include <kortex_driver/GetOptionInformationRequest.h>
#include <kortex_driver/GetOptionInformationResponse.h>


namespace kortex_driver
{

struct GetOptionInformation
{

typedef GetOptionInformationRequest Request;
typedef GetOptionInformationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetOptionInformation
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetOptionInformation > {
  static const char* value()
  {
    return "0af2e58d9822a8c26f4c5a66d0d6015b";
  }

  static const char* value(const ::kortex_driver::GetOptionInformation&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetOptionInformation > {
  static const char* value()
  {
    return "kortex_driver/GetOptionInformation";
  }

  static const char* value(const ::kortex_driver::GetOptionInformation&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetOptionInformationRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetOptionInformation >
template<>
struct MD5Sum< ::kortex_driver::GetOptionInformationRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetOptionInformation >::value();
  }
  static const char* value(const ::kortex_driver::GetOptionInformationRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetOptionInformationRequest> should match
// service_traits::DataType< ::kortex_driver::GetOptionInformation >
template<>
struct DataType< ::kortex_driver::GetOptionInformationRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetOptionInformation >::value();
  }
  static const char* value(const ::kortex_driver::GetOptionInformationRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetOptionInformationResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetOptionInformation >
template<>
struct MD5Sum< ::kortex_driver::GetOptionInformationResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetOptionInformation >::value();
  }
  static const char* value(const ::kortex_driver::GetOptionInformationResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetOptionInformationResponse> should match
// service_traits::DataType< ::kortex_driver::GetOptionInformation >
template<>
struct DataType< ::kortex_driver::GetOptionInformationResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetOptionInformation >::value();
  }
  static const char* value(const ::kortex_driver::GetOptionInformationResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETOPTIONINFORMATION_H
