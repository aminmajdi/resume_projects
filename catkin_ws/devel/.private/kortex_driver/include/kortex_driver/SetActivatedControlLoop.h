// Generated by gencpp from file kortex_driver/SetActivatedControlLoop.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_SETACTIVATEDCONTROLLOOP_H
#define KORTEX_DRIVER_MESSAGE_SETACTIVATEDCONTROLLOOP_H

#include <ros/service_traits.h>


#include <kortex_driver/SetActivatedControlLoopRequest.h>
#include <kortex_driver/SetActivatedControlLoopResponse.h>


namespace kortex_driver
{

struct SetActivatedControlLoop
{

typedef SetActivatedControlLoopRequest Request;
typedef SetActivatedControlLoopResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct SetActivatedControlLoop
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::SetActivatedControlLoop > {
  static const char* value()
  {
    return "0f6f5ae628430443bb031e43516b6adc";
  }

  static const char* value(const ::kortex_driver::SetActivatedControlLoop&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::SetActivatedControlLoop > {
  static const char* value()
  {
    return "kortex_driver/SetActivatedControlLoop";
  }

  static const char* value(const ::kortex_driver::SetActivatedControlLoop&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::SetActivatedControlLoopRequest> should match
// service_traits::MD5Sum< ::kortex_driver::SetActivatedControlLoop >
template<>
struct MD5Sum< ::kortex_driver::SetActivatedControlLoopRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::SetActivatedControlLoop >::value();
  }
  static const char* value(const ::kortex_driver::SetActivatedControlLoopRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::SetActivatedControlLoopRequest> should match
// service_traits::DataType< ::kortex_driver::SetActivatedControlLoop >
template<>
struct DataType< ::kortex_driver::SetActivatedControlLoopRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::SetActivatedControlLoop >::value();
  }
  static const char* value(const ::kortex_driver::SetActivatedControlLoopRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::SetActivatedControlLoopResponse> should match
// service_traits::MD5Sum< ::kortex_driver::SetActivatedControlLoop >
template<>
struct MD5Sum< ::kortex_driver::SetActivatedControlLoopResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::SetActivatedControlLoop >::value();
  }
  static const char* value(const ::kortex_driver::SetActivatedControlLoopResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::SetActivatedControlLoopResponse> should match
// service_traits::DataType< ::kortex_driver::SetActivatedControlLoop >
template<>
struct DataType< ::kortex_driver::SetActivatedControlLoopResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::SetActivatedControlLoop >::value();
  }
  static const char* value(const ::kortex_driver::SetActivatedControlLoopResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_SETACTIVATEDCONTROLLOOP_H
