// Generated by gencpp from file kortex_driver/GpioBehavior.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GPIOBEHAVIOR_H
#define KORTEX_DRIVER_MESSAGE_GPIOBEHAVIOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct GpioBehavior_
{
  typedef GpioBehavior_<ContainerAllocator> Type;

  GpioBehavior_()
    {
    }
  GpioBehavior_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSPECIFIED_GPIO_BEHAVIOR)
  #undef UNSPECIFIED_GPIO_BEHAVIOR
#endif
#if defined(_WIN32) && defined(GPIO_FALLING)
  #undef GPIO_FALLING
#endif
#if defined(_WIN32) && defined(GPIO_RISING)
  #undef GPIO_RISING
#endif
#if defined(_WIN32) && defined(GPIO_PULSE_LOW)
  #undef GPIO_PULSE_LOW
#endif
#if defined(_WIN32) && defined(GPIO_PULSE_HIGH)
  #undef GPIO_PULSE_HIGH
#endif

  enum {
    UNSPECIFIED_GPIO_BEHAVIOR = 0u,
    GPIO_FALLING = 1u,
    GPIO_RISING = 2u,
    GPIO_PULSE_LOW = 3u,
    GPIO_PULSE_HIGH = 4u,
  };


  typedef boost::shared_ptr< ::kortex_driver::GpioBehavior_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::GpioBehavior_<ContainerAllocator> const> ConstPtr;

}; // struct GpioBehavior_

typedef ::kortex_driver::GpioBehavior_<std::allocator<void> > GpioBehavior;

typedef boost::shared_ptr< ::kortex_driver::GpioBehavior > GpioBehaviorPtr;
typedef boost::shared_ptr< ::kortex_driver::GpioBehavior const> GpioBehaviorConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::GpioBehavior_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::GpioBehavior_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::GpioBehavior_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::GpioBehavior_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::GpioBehavior_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::GpioBehavior_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::GpioBehavior_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::GpioBehavior_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::GpioBehavior_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bab6a79d9354d811892ee96dadfee3b4";
  }

  static const char* value(const ::kortex_driver::GpioBehavior_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbab6a79d9354d811ULL;
  static const uint64_t static_value2 = 0x892ee96dadfee3b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::GpioBehavior_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/GpioBehavior";
  }

  static const char* value(const ::kortex_driver::GpioBehavior_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::GpioBehavior_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNSPECIFIED_GPIO_BEHAVIOR = 0\n"
"\n"
"uint32 GPIO_FALLING = 1\n"
"\n"
"uint32 GPIO_RISING = 2\n"
"\n"
"uint32 GPIO_PULSE_LOW = 3\n"
"\n"
"uint32 GPIO_PULSE_HIGH = 4\n"
;
  }

  static const char* value(const ::kortex_driver::GpioBehavior_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::GpioBehavior_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpioBehavior_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::GpioBehavior_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::GpioBehavior_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GPIOBEHAVIOR_H
