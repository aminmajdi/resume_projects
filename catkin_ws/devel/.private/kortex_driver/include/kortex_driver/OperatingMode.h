// Generated by gencpp from file kortex_driver/OperatingMode.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_OPERATINGMODE_H
#define KORTEX_DRIVER_MESSAGE_OPERATINGMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct OperatingMode_
{
  typedef OperatingMode_<ContainerAllocator> Type;

  OperatingMode_()
    {
    }
  OperatingMode_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSPECIFIED_OPERATING_MODE)
  #undef UNSPECIFIED_OPERATING_MODE
#endif
#if defined(_WIN32) && defined(MAINTENANCE_MODE)
  #undef MAINTENANCE_MODE
#endif
#if defined(_WIN32) && defined(UPDATE_MODE)
  #undef UPDATE_MODE
#endif
#if defined(_WIN32) && defined(UPDATE_COMPLETED_MODE)
  #undef UPDATE_COMPLETED_MODE
#endif
#if defined(_WIN32) && defined(UPDATE_FAILED_MODE)
  #undef UPDATE_FAILED_MODE
#endif
#if defined(_WIN32) && defined(SHUTTING_DOWN_MODE)
  #undef SHUTTING_DOWN_MODE
#endif
#if defined(_WIN32) && defined(RUN_MODE)
  #undef RUN_MODE
#endif
#if defined(_WIN32) && defined(UPDATING_DEVICE_MODE)
  #undef UPDATING_DEVICE_MODE
#endif

  enum {
    UNSPECIFIED_OPERATING_MODE = 0u,
    MAINTENANCE_MODE = 1u,
    UPDATE_MODE = 2u,
    UPDATE_COMPLETED_MODE = 3u,
    UPDATE_FAILED_MODE = 4u,
    SHUTTING_DOWN_MODE = 5u,
    RUN_MODE = 6u,
    UPDATING_DEVICE_MODE = 7u,
  };


  typedef boost::shared_ptr< ::kortex_driver::OperatingMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::OperatingMode_<ContainerAllocator> const> ConstPtr;

}; // struct OperatingMode_

typedef ::kortex_driver::OperatingMode_<std::allocator<void> > OperatingMode;

typedef boost::shared_ptr< ::kortex_driver::OperatingMode > OperatingModePtr;
typedef boost::shared_ptr< ::kortex_driver::OperatingMode const> OperatingModeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::OperatingMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::OperatingMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::OperatingMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::OperatingMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::OperatingMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::OperatingMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::OperatingMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::OperatingMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::OperatingMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5399510deee390e03ac867dbfd636f27";
  }

  static const char* value(const ::kortex_driver::OperatingMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5399510deee390e0ULL;
  static const uint64_t static_value2 = 0x3ac867dbfd636f27ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::OperatingMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/OperatingMode";
  }

  static const char* value(const ::kortex_driver::OperatingMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::OperatingMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNSPECIFIED_OPERATING_MODE = 0\n"
"\n"
"uint32 MAINTENANCE_MODE = 1\n"
"\n"
"uint32 UPDATE_MODE = 2\n"
"\n"
"uint32 UPDATE_COMPLETED_MODE = 3\n"
"\n"
"uint32 UPDATE_FAILED_MODE = 4\n"
"\n"
"uint32 SHUTTING_DOWN_MODE = 5\n"
"\n"
"uint32 RUN_MODE = 6\n"
"\n"
"uint32 UPDATING_DEVICE_MODE = 7\n"
;
  }

  static const char* value(const ::kortex_driver::OperatingMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::OperatingMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OperatingMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::OperatingMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::OperatingMode_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_OPERATINGMODE_H
