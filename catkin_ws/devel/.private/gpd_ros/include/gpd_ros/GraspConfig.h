// Generated by gencpp from file gpd_ros/GraspConfig.msg
// DO NOT EDIT!


#ifndef GPD_ROS_MESSAGE_GRASPCONFIG_H
#define GPD_ROS_MESSAGE_GRASPCONFIG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <geometry_msgs/Point.h>

namespace gpd_ros
{
template <class ContainerAllocator>
struct GraspConfig_
{
  typedef GraspConfig_<ContainerAllocator> Type;

  GraspConfig_()
    : position()
    , approach()
    , binormal()
    , axis()
    , width()
    , score()
    , sample()  {
    }
  GraspConfig_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , approach(_alloc)
    , binormal(_alloc)
    , axis(_alloc)
    , width(_alloc)
    , score(_alloc)
    , sample(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _approach_type;
  _approach_type approach;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _binormal_type;
  _binormal_type binormal;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _axis_type;
  _axis_type axis;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _width_type;
  _width_type width;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _score_type;
  _score_type score;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _sample_type;
  _sample_type sample;





  typedef boost::shared_ptr< ::gpd_ros::GraspConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpd_ros::GraspConfig_<ContainerAllocator> const> ConstPtr;

}; // struct GraspConfig_

typedef ::gpd_ros::GraspConfig_<std::allocator<void> > GraspConfig;

typedef boost::shared_ptr< ::gpd_ros::GraspConfig > GraspConfigPtr;
typedef boost::shared_ptr< ::gpd_ros::GraspConfig const> GraspConfigConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gpd_ros::GraspConfig_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gpd_ros::GraspConfig_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gpd_ros::GraspConfig_<ContainerAllocator1> & lhs, const ::gpd_ros::GraspConfig_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.approach == rhs.approach &&
    lhs.binormal == rhs.binormal &&
    lhs.axis == rhs.axis &&
    lhs.width == rhs.width &&
    lhs.score == rhs.score &&
    lhs.sample == rhs.sample;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gpd_ros::GraspConfig_<ContainerAllocator1> & lhs, const ::gpd_ros::GraspConfig_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gpd_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gpd_ros::GraspConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpd_ros::GraspConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpd_ros::GraspConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpd_ros::GraspConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpd_ros::GraspConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpd_ros::GraspConfig_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gpd_ros::GraspConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8753a773793263ef11dce97fd6d996d5";
  }

  static const char* value(const ::gpd_ros::GraspConfig_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8753a773793263efULL;
  static const uint64_t static_value2 = 0x11dce97fd6d996d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::gpd_ros::GraspConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gpd_ros/GraspConfig";
  }

  static const char* value(const ::gpd_ros::GraspConfig_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gpd_ros::GraspConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message describes a 2-finger grasp configuration by its 6-DOF pose,\n"
"# consisting of a 3-DOF position and 3-DOF orientation, and the opening\n"
"# width of the robot hand.\n"
"\n"
"# Position\n"
"geometry_msgs/Point position # grasp position (bottom/base center of robot hand)\n"
"\n"
"# Orientation represented as three axis (R = [approach binormal axis])\n"
"geometry_msgs/Vector3 approach # grasp approach direction\n"
"geometry_msgs/Vector3 binormal # hand closing direction\n"
"geometry_msgs/Vector3 axis # hand axis\n"
"\n"
"std_msgs/Float32 width # Required aperture (opening width) of the robot hand\n"
"\n"
"std_msgs/Float32 score # Score assigned to the grasp by the classifier\n"
"\n"
"geometry_msgs/Point sample # point at which the grasp was found\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::gpd_ros::GraspConfig_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gpd_ros::GraspConfig_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.approach);
      stream.next(m.binormal);
      stream.next(m.axis);
      stream.next(m.width);
      stream.next(m.score);
      stream.next(m.sample);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspConfig_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpd_ros::GraspConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gpd_ros::GraspConfig_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "approach: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.approach);
    s << indent << "binormal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.binormal);
    s << indent << "axis: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.axis);
    s << indent << "width: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.width);
    s << indent << "score: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.score);
    s << indent << "sample: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.sample);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPD_ROS_MESSAGE_GRASPCONFIG_H
