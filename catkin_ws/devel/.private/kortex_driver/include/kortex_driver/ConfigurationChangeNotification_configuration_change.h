// Generated by gencpp from file kortex_driver/ConfigurationChangeNotification_configuration_change.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_CONFIGURATIONCHANGENOTIFICATION_CONFIGURATION_CHANGE_H
#define KORTEX_DRIVER_MESSAGE_CONFIGURATIONCHANGENOTIFICATION_CONFIGURATION_CHANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/SequenceHandle.h>
#include <kortex_driver/ActionHandle.h>
#include <kortex_driver/MappingHandle.h>
#include <kortex_driver/MapGroupHandle.h>
#include <kortex_driver/MapHandle.h>
#include <kortex_driver/UserProfileHandle.h>
#include <kortex_driver/ProtectionZoneHandle.h>
#include <kortex_driver/SafetyHandle.h>
#include <kortex_driver/NetworkHandle.h>
#include <kortex_driver/Ssid.h>
#include <kortex_driver/ControllerHandle.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct ConfigurationChangeNotification_configuration_change_
{
  typedef ConfigurationChangeNotification_configuration_change_<ContainerAllocator> Type;

  ConfigurationChangeNotification_configuration_change_()
    : sequence_handle()
    , action_handle()
    , mapping_handle()
    , map_group_handle()
    , map_handle()
    , user_profile_handle()
    , protection_zone_handle()
    , safety_handle()
    , network_handle()
    , ssid()
    , controller_handle()  {
    }
  ConfigurationChangeNotification_configuration_change_(const ContainerAllocator& _alloc)
    : sequence_handle(_alloc)
    , action_handle(_alloc)
    , mapping_handle(_alloc)
    , map_group_handle(_alloc)
    , map_handle(_alloc)
    , user_profile_handle(_alloc)
    , protection_zone_handle(_alloc)
    , safety_handle(_alloc)
    , network_handle(_alloc)
    , ssid(_alloc)
    , controller_handle(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::kortex_driver::SequenceHandle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::SequenceHandle_<ContainerAllocator> >::other >  _sequence_handle_type;
  _sequence_handle_type sequence_handle;

   typedef std::vector< ::kortex_driver::ActionHandle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::ActionHandle_<ContainerAllocator> >::other >  _action_handle_type;
  _action_handle_type action_handle;

   typedef std::vector< ::kortex_driver::MappingHandle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::MappingHandle_<ContainerAllocator> >::other >  _mapping_handle_type;
  _mapping_handle_type mapping_handle;

   typedef std::vector< ::kortex_driver::MapGroupHandle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::MapGroupHandle_<ContainerAllocator> >::other >  _map_group_handle_type;
  _map_group_handle_type map_group_handle;

   typedef std::vector< ::kortex_driver::MapHandle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::MapHandle_<ContainerAllocator> >::other >  _map_handle_type;
  _map_handle_type map_handle;

   typedef std::vector< ::kortex_driver::UserProfileHandle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::UserProfileHandle_<ContainerAllocator> >::other >  _user_profile_handle_type;
  _user_profile_handle_type user_profile_handle;

   typedef std::vector< ::kortex_driver::ProtectionZoneHandle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::ProtectionZoneHandle_<ContainerAllocator> >::other >  _protection_zone_handle_type;
  _protection_zone_handle_type protection_zone_handle;

   typedef std::vector< ::kortex_driver::SafetyHandle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::SafetyHandle_<ContainerAllocator> >::other >  _safety_handle_type;
  _safety_handle_type safety_handle;

   typedef std::vector< ::kortex_driver::NetworkHandle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::NetworkHandle_<ContainerAllocator> >::other >  _network_handle_type;
  _network_handle_type network_handle;

   typedef std::vector< ::kortex_driver::Ssid_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::Ssid_<ContainerAllocator> >::other >  _ssid_type;
  _ssid_type ssid;

   typedef std::vector< ::kortex_driver::ControllerHandle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kortex_driver::ControllerHandle_<ContainerAllocator> >::other >  _controller_handle_type;
  _controller_handle_type controller_handle;





  typedef boost::shared_ptr< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigurationChangeNotification_configuration_change_

typedef ::kortex_driver::ConfigurationChangeNotification_configuration_change_<std::allocator<void> > ConfigurationChangeNotification_configuration_change;

typedef boost::shared_ptr< ::kortex_driver::ConfigurationChangeNotification_configuration_change > ConfigurationChangeNotification_configuration_changePtr;
typedef boost::shared_ptr< ::kortex_driver::ConfigurationChangeNotification_configuration_change const> ConfigurationChangeNotification_configuration_changeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator1> & lhs, const ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator2> & rhs)
{
  return lhs.sequence_handle == rhs.sequence_handle &&
    lhs.action_handle == rhs.action_handle &&
    lhs.mapping_handle == rhs.mapping_handle &&
    lhs.map_group_handle == rhs.map_group_handle &&
    lhs.map_handle == rhs.map_handle &&
    lhs.user_profile_handle == rhs.user_profile_handle &&
    lhs.protection_zone_handle == rhs.protection_zone_handle &&
    lhs.safety_handle == rhs.safety_handle &&
    lhs.network_handle == rhs.network_handle &&
    lhs.ssid == rhs.ssid &&
    lhs.controller_handle == rhs.controller_handle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator1> & lhs, const ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da6a00bf2364ba1e44afbbbd7c77db5b";
  }

  static const char* value(const ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda6a00bf2364ba1eULL;
  static const uint64_t static_value2 = 0x44afbbbd7c77db5bULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/ConfigurationChangeNotification_configuration_change";
  }

  static const char* value(const ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"SequenceHandle[] sequence_handle\n"
"ActionHandle[] action_handle\n"
"MappingHandle[] mapping_handle\n"
"MapGroupHandle[] map_group_handle\n"
"MapHandle[] map_handle\n"
"UserProfileHandle[] user_profile_handle\n"
"ProtectionZoneHandle[] protection_zone_handle\n"
"SafetyHandle[] safety_handle\n"
"NetworkHandle[] network_handle\n"
"Ssid[] ssid\n"
"ControllerHandle[] controller_handle\n"
"================================================================================\n"
"MSG: kortex_driver/SequenceHandle\n"
"\n"
"uint32 identifier\n"
"uint32 permission\n"
"================================================================================\n"
"MSG: kortex_driver/ActionHandle\n"
"\n"
"uint32 identifier\n"
"uint32 action_type\n"
"uint32 permission\n"
"================================================================================\n"
"MSG: kortex_driver/MappingHandle\n"
"\n"
"uint32 identifier\n"
"uint32 permission\n"
"================================================================================\n"
"MSG: kortex_driver/MapGroupHandle\n"
"\n"
"uint32 identifier\n"
"uint32 permission\n"
"================================================================================\n"
"MSG: kortex_driver/MapHandle\n"
"\n"
"uint32 identifier\n"
"uint32 permission\n"
"================================================================================\n"
"MSG: kortex_driver/UserProfileHandle\n"
"\n"
"uint32 identifier\n"
"uint32 permission\n"
"================================================================================\n"
"MSG: kortex_driver/ProtectionZoneHandle\n"
"\n"
"uint32 identifier\n"
"uint32 permission\n"
"================================================================================\n"
"MSG: kortex_driver/SafetyHandle\n"
"\n"
"uint32 identifier\n"
"================================================================================\n"
"MSG: kortex_driver/NetworkHandle\n"
"\n"
"uint32 type\n"
"================================================================================\n"
"MSG: kortex_driver/Ssid\n"
"\n"
"string identifier\n"
"================================================================================\n"
"MSG: kortex_driver/ControllerHandle\n"
"\n"
"uint32 type\n"
"uint32 controller_identifier\n"
;
  }

  static const char* value(const ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sequence_handle);
      stream.next(m.action_handle);
      stream.next(m.mapping_handle);
      stream.next(m.map_group_handle);
      stream.next(m.map_handle);
      stream.next(m.user_profile_handle);
      stream.next(m.protection_zone_handle);
      stream.next(m.safety_handle);
      stream.next(m.network_handle);
      stream.next(m.ssid);
      stream.next(m.controller_handle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfigurationChangeNotification_configuration_change_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::ConfigurationChangeNotification_configuration_change_<ContainerAllocator>& v)
  {
    s << indent << "sequence_handle[]" << std::endl;
    for (size_t i = 0; i < v.sequence_handle.size(); ++i)
    {
      s << indent << "  sequence_handle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::SequenceHandle_<ContainerAllocator> >::stream(s, indent + "    ", v.sequence_handle[i]);
    }
    s << indent << "action_handle[]" << std::endl;
    for (size_t i = 0; i < v.action_handle.size(); ++i)
    {
      s << indent << "  action_handle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::ActionHandle_<ContainerAllocator> >::stream(s, indent + "    ", v.action_handle[i]);
    }
    s << indent << "mapping_handle[]" << std::endl;
    for (size_t i = 0; i < v.mapping_handle.size(); ++i)
    {
      s << indent << "  mapping_handle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::MappingHandle_<ContainerAllocator> >::stream(s, indent + "    ", v.mapping_handle[i]);
    }
    s << indent << "map_group_handle[]" << std::endl;
    for (size_t i = 0; i < v.map_group_handle.size(); ++i)
    {
      s << indent << "  map_group_handle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::MapGroupHandle_<ContainerAllocator> >::stream(s, indent + "    ", v.map_group_handle[i]);
    }
    s << indent << "map_handle[]" << std::endl;
    for (size_t i = 0; i < v.map_handle.size(); ++i)
    {
      s << indent << "  map_handle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::MapHandle_<ContainerAllocator> >::stream(s, indent + "    ", v.map_handle[i]);
    }
    s << indent << "user_profile_handle[]" << std::endl;
    for (size_t i = 0; i < v.user_profile_handle.size(); ++i)
    {
      s << indent << "  user_profile_handle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::UserProfileHandle_<ContainerAllocator> >::stream(s, indent + "    ", v.user_profile_handle[i]);
    }
    s << indent << "protection_zone_handle[]" << std::endl;
    for (size_t i = 0; i < v.protection_zone_handle.size(); ++i)
    {
      s << indent << "  protection_zone_handle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::ProtectionZoneHandle_<ContainerAllocator> >::stream(s, indent + "    ", v.protection_zone_handle[i]);
    }
    s << indent << "safety_handle[]" << std::endl;
    for (size_t i = 0; i < v.safety_handle.size(); ++i)
    {
      s << indent << "  safety_handle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::SafetyHandle_<ContainerAllocator> >::stream(s, indent + "    ", v.safety_handle[i]);
    }
    s << indent << "network_handle[]" << std::endl;
    for (size_t i = 0; i < v.network_handle.size(); ++i)
    {
      s << indent << "  network_handle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::NetworkHandle_<ContainerAllocator> >::stream(s, indent + "    ", v.network_handle[i]);
    }
    s << indent << "ssid[]" << std::endl;
    for (size_t i = 0; i < v.ssid.size(); ++i)
    {
      s << indent << "  ssid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::Ssid_<ContainerAllocator> >::stream(s, indent + "    ", v.ssid[i]);
    }
    s << indent << "controller_handle[]" << std::endl;
    for (size_t i = 0; i < v.controller_handle.size(); ++i)
    {
      s << indent << "  controller_handle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kortex_driver::ControllerHandle_<ContainerAllocator> >::stream(s, indent + "    ", v.controller_handle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_CONFIGURATIONCHANGENOTIFICATION_CONFIGURATION_CHANGE_H
