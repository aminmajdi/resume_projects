// Generated by gencpp from file kortex_driver/SetEthernetConfiguration.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_SETETHERNETCONFIGURATION_H
#define KORTEX_DRIVER_MESSAGE_SETETHERNETCONFIGURATION_H

#include <ros/service_traits.h>


#include <kortex_driver/SetEthernetConfigurationRequest.h>
#include <kortex_driver/SetEthernetConfigurationResponse.h>


namespace kortex_driver
{

struct SetEthernetConfiguration
{

typedef SetEthernetConfigurationRequest Request;
typedef SetEthernetConfigurationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct SetEthernetConfiguration
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::SetEthernetConfiguration > {
  static const char* value()
  {
    return "fdfcb3d5cd015a2a65d4aee878ff80be";
  }

  static const char* value(const ::kortex_driver::SetEthernetConfiguration&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::SetEthernetConfiguration > {
  static const char* value()
  {
    return "kortex_driver/SetEthernetConfiguration";
  }

  static const char* value(const ::kortex_driver::SetEthernetConfiguration&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::SetEthernetConfigurationRequest> should match
// service_traits::MD5Sum< ::kortex_driver::SetEthernetConfiguration >
template<>
struct MD5Sum< ::kortex_driver::SetEthernetConfigurationRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::SetEthernetConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::SetEthernetConfigurationRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::SetEthernetConfigurationRequest> should match
// service_traits::DataType< ::kortex_driver::SetEthernetConfiguration >
template<>
struct DataType< ::kortex_driver::SetEthernetConfigurationRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::SetEthernetConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::SetEthernetConfigurationRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::SetEthernetConfigurationResponse> should match
// service_traits::MD5Sum< ::kortex_driver::SetEthernetConfiguration >
template<>
struct MD5Sum< ::kortex_driver::SetEthernetConfigurationResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::SetEthernetConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::SetEthernetConfigurationResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::SetEthernetConfigurationResponse> should match
// service_traits::DataType< ::kortex_driver::SetEthernetConfiguration >
template<>
struct DataType< ::kortex_driver::SetEthernetConfigurationResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::SetEthernetConfiguration >::value();
  }
  static const char* value(const ::kortex_driver::SetEthernetConfigurationResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_SETETHERNETCONFIGURATION_H
