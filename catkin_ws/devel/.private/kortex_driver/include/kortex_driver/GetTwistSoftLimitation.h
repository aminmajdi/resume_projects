// Generated by gencpp from file kortex_driver/GetTwistSoftLimitation.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETTWISTSOFTLIMITATION_H
#define KORTEX_DRIVER_MESSAGE_GETTWISTSOFTLIMITATION_H

#include <ros/service_traits.h>


#include <kortex_driver/GetTwistSoftLimitationRequest.h>
#include <kortex_driver/GetTwistSoftLimitationResponse.h>


namespace kortex_driver
{

struct GetTwistSoftLimitation
{

typedef GetTwistSoftLimitationRequest Request;
typedef GetTwistSoftLimitationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetTwistSoftLimitation
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetTwistSoftLimitation > {
  static const char* value()
  {
    return "69b1f43d97a46e21f8b8586022fd23ec";
  }

  static const char* value(const ::kortex_driver::GetTwistSoftLimitation&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetTwistSoftLimitation > {
  static const char* value()
  {
    return "kortex_driver/GetTwistSoftLimitation";
  }

  static const char* value(const ::kortex_driver::GetTwistSoftLimitation&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetTwistSoftLimitationRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetTwistSoftLimitation >
template<>
struct MD5Sum< ::kortex_driver::GetTwistSoftLimitationRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetTwistSoftLimitation >::value();
  }
  static const char* value(const ::kortex_driver::GetTwistSoftLimitationRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetTwistSoftLimitationRequest> should match
// service_traits::DataType< ::kortex_driver::GetTwistSoftLimitation >
template<>
struct DataType< ::kortex_driver::GetTwistSoftLimitationRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetTwistSoftLimitation >::value();
  }
  static const char* value(const ::kortex_driver::GetTwistSoftLimitationRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetTwistSoftLimitationResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetTwistSoftLimitation >
template<>
struct MD5Sum< ::kortex_driver::GetTwistSoftLimitationResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetTwistSoftLimitation >::value();
  }
  static const char* value(const ::kortex_driver::GetTwistSoftLimitationResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetTwistSoftLimitationResponse> should match
// service_traits::DataType< ::kortex_driver::GetTwistSoftLimitation >
template<>
struct DataType< ::kortex_driver::GetTwistSoftLimitationResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetTwistSoftLimitation >::value();
  }
  static const char* value(const ::kortex_driver::GetTwistSoftLimitationResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETTWISTSOFTLIMITATION_H
