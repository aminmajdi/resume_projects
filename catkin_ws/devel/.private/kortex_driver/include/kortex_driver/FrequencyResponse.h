// Generated by gencpp from file kortex_driver/FrequencyResponse.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_FREQUENCYRESPONSE_H
#define KORTEX_DRIVER_MESSAGE_FREQUENCYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct FrequencyResponse_
{
  typedef FrequencyResponse_<ContainerAllocator> Type;

  FrequencyResponse_()
    : loop_selection(0)
    , min_frequency(0.0)
    , max_frequency(0.0)
    , amplitude(0.0)
    , duration(0.0)  {
    }
  FrequencyResponse_(const ContainerAllocator& _alloc)
    : loop_selection(0)
    , min_frequency(0.0)
    , max_frequency(0.0)
    , amplitude(0.0)
    , duration(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _loop_selection_type;
  _loop_selection_type loop_selection;

   typedef float _min_frequency_type;
  _min_frequency_type min_frequency;

   typedef float _max_frequency_type;
  _max_frequency_type max_frequency;

   typedef float _amplitude_type;
  _amplitude_type amplitude;

   typedef float _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::kortex_driver::FrequencyResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::FrequencyResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FrequencyResponse_

typedef ::kortex_driver::FrequencyResponse_<std::allocator<void> > FrequencyResponse;

typedef boost::shared_ptr< ::kortex_driver::FrequencyResponse > FrequencyResponsePtr;
typedef boost::shared_ptr< ::kortex_driver::FrequencyResponse const> FrequencyResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::FrequencyResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::FrequencyResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::FrequencyResponse_<ContainerAllocator1> & lhs, const ::kortex_driver::FrequencyResponse_<ContainerAllocator2> & rhs)
{
  return lhs.loop_selection == rhs.loop_selection &&
    lhs.min_frequency == rhs.min_frequency &&
    lhs.max_frequency == rhs.max_frequency &&
    lhs.amplitude == rhs.amplitude &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::FrequencyResponse_<ContainerAllocator1> & lhs, const ::kortex_driver::FrequencyResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::FrequencyResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::FrequencyResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::FrequencyResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::FrequencyResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::FrequencyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::FrequencyResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::FrequencyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86ed7a41c264d9e5ff7a52aa97222d1e";
  }

  static const char* value(const ::kortex_driver::FrequencyResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86ed7a41c264d9e5ULL;
  static const uint64_t static_value2 = 0xff7a52aa97222d1eULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::FrequencyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/FrequencyResponse";
  }

  static const char* value(const ::kortex_driver::FrequencyResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::FrequencyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 loop_selection\n"
"float32 min_frequency\n"
"float32 max_frequency\n"
"float32 amplitude\n"
"float32 duration\n"
;
  }

  static const char* value(const ::kortex_driver::FrequencyResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::FrequencyResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.loop_selection);
      stream.next(m.min_frequency);
      stream.next(m.max_frequency);
      stream.next(m.amplitude);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrequencyResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::FrequencyResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::FrequencyResponse_<ContainerAllocator>& v)
  {
    s << indent << "loop_selection: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.loop_selection);
    s << indent << "min_frequency: ";
    Printer<float>::stream(s, indent + "  ", v.min_frequency);
    s << indent << "max_frequency: ";
    Printer<float>::stream(s, indent + "  ", v.max_frequency);
    s << indent << "amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.amplitude);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_FREQUENCYRESPONSE_H
