// Generated by gencpp from file kortex_driver/GetKinematicHardLimits.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_GETKINEMATICHARDLIMITS_H
#define KORTEX_DRIVER_MESSAGE_GETKINEMATICHARDLIMITS_H

#include <ros/service_traits.h>


#include <kortex_driver/GetKinematicHardLimitsRequest.h>
#include <kortex_driver/GetKinematicHardLimitsResponse.h>


namespace kortex_driver
{

struct GetKinematicHardLimits
{

typedef GetKinematicHardLimitsRequest Request;
typedef GetKinematicHardLimitsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct GetKinematicHardLimits
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::GetKinematicHardLimits > {
  static const char* value()
  {
    return "024037c761d64c76474f3dff50b971a3";
  }

  static const char* value(const ::kortex_driver::GetKinematicHardLimits&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::GetKinematicHardLimits > {
  static const char* value()
  {
    return "kortex_driver/GetKinematicHardLimits";
  }

  static const char* value(const ::kortex_driver::GetKinematicHardLimits&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::GetKinematicHardLimitsRequest> should match
// service_traits::MD5Sum< ::kortex_driver::GetKinematicHardLimits >
template<>
struct MD5Sum< ::kortex_driver::GetKinematicHardLimitsRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetKinematicHardLimits >::value();
  }
  static const char* value(const ::kortex_driver::GetKinematicHardLimitsRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetKinematicHardLimitsRequest> should match
// service_traits::DataType< ::kortex_driver::GetKinematicHardLimits >
template<>
struct DataType< ::kortex_driver::GetKinematicHardLimitsRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetKinematicHardLimits >::value();
  }
  static const char* value(const ::kortex_driver::GetKinematicHardLimitsRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::GetKinematicHardLimitsResponse> should match
// service_traits::MD5Sum< ::kortex_driver::GetKinematicHardLimits >
template<>
struct MD5Sum< ::kortex_driver::GetKinematicHardLimitsResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::GetKinematicHardLimits >::value();
  }
  static const char* value(const ::kortex_driver::GetKinematicHardLimitsResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::GetKinematicHardLimitsResponse> should match
// service_traits::DataType< ::kortex_driver::GetKinematicHardLimits >
template<>
struct DataType< ::kortex_driver::GetKinematicHardLimitsResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::GetKinematicHardLimits >::value();
  }
  static const char* value(const ::kortex_driver::GetKinematicHardLimitsResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_GETKINEMATICHARDLIMITS_H
