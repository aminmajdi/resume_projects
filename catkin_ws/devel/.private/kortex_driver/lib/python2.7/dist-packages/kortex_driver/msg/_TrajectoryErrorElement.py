# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/TrajectoryErrorElement.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrajectoryErrorElement(genpy.Message):
  _md5sum = "921f1bd98146e5502806d842534e142a"
  _type = "kortex_driver/TrajectoryErrorElement"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint32 error_type
uint32 error_identifier
float32 error_value
float32 min_value
float32 max_value
uint32 index
string message"""
  __slots__ = ['error_type','error_identifier','error_value','min_value','max_value','index','message']
  _slot_types = ['uint32','uint32','float32','float32','float32','uint32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error_type,error_identifier,error_value,min_value,max_value,index,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryErrorElement, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.error_type is None:
        self.error_type = 0
      if self.error_identifier is None:
        self.error_identifier = 0
      if self.error_value is None:
        self.error_value = 0.
      if self.min_value is None:
        self.min_value = 0.
      if self.max_value is None:
        self.max_value = 0.
      if self.index is None:
        self.index = 0
      if self.message is None:
        self.message = ''
    else:
      self.error_type = 0
      self.error_identifier = 0
      self.error_value = 0.
      self.min_value = 0.
      self.max_value = 0.
      self.index = 0
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I3fI().pack(_x.error_type, _x.error_identifier, _x.error_value, _x.min_value, _x.max_value, _x.index))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.error_type, _x.error_identifier, _x.error_value, _x.min_value, _x.max_value, _x.index,) = _get_struct_2I3fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I3fI().pack(_x.error_type, _x.error_identifier, _x.error_value, _x.min_value, _x.max_value, _x.index))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.error_type, _x.error_identifier, _x.error_value, _x.min_value, _x.max_value, _x.index,) = _get_struct_2I3fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I3fI = None
def _get_struct_2I3fI():
    global _struct_2I3fI
    if _struct_2I3fI is None:
        _struct_2I3fI = struct.Struct("<2I3fI")
    return _struct_2I3fI
