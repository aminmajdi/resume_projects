# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/StatusFlags.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StatusFlags(genpy.Message):
  _md5sum = "94f8e368a8b96139de6828bbd6ed2797"
  _type = "kortex_driver/StatusFlags"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint32 UNKNOWN_STATUS = 0

uint32 STABILIZED = 16

uint32 MOTOR_INDEXED = 32

uint32 MOTOR_INDEXING = 64

uint32 JOINT_INDEXED = 128

uint32 JOINT_INDEXING = 256

uint32 HIGH_PRECISION = 512

uint32 BRAKING = 1024

uint32 SERVOING = 2048

uint32 MAJOR_FAULT = 4096

uint32 MINOR_FAULT = 8192

uint32 CALIBRATED_TORQUE = 16384

uint32 CALIBRATED_MAG_SENSOR = 32768

uint32 CALIBRATED_ZERO = 65536

uint32 GPIO_0 = 131072

uint32 GPIO_1 = 262144

uint32 CS_QUASI_STATIC_CONTACT = 524288

uint32 CS_TRANSIENT_CONTACT = 1048576

uint32 VFD_HALL_SYNC = 2097152

uint32 VFD_INDEXED = 4194304

uint32 DRIVE_BOARD_READY = 8388608

uint32 CALIBRATED_CURRENT = 16777216

uint32 CALIBRATED_MOTOR = 33554432

uint32 SW0_ACTIVE = 67108864

uint32 SW1_ACTIVE = 134217728
"""
  # Pseudo-constants
  UNKNOWN_STATUS = 0
  STABILIZED = 16
  MOTOR_INDEXED = 32
  MOTOR_INDEXING = 64
  JOINT_INDEXED = 128
  JOINT_INDEXING = 256
  HIGH_PRECISION = 512
  BRAKING = 1024
  SERVOING = 2048
  MAJOR_FAULT = 4096
  MINOR_FAULT = 8192
  CALIBRATED_TORQUE = 16384
  CALIBRATED_MAG_SENSOR = 32768
  CALIBRATED_ZERO = 65536
  GPIO_0 = 131072
  GPIO_1 = 262144
  CS_QUASI_STATIC_CONTACT = 524288
  CS_TRANSIENT_CONTACT = 1048576
  VFD_HALL_SYNC = 2097152
  VFD_INDEXED = 4194304
  DRIVE_BOARD_READY = 8388608
  CALIBRATED_CURRENT = 16777216
  CALIBRATED_MOTOR = 33554432
  SW0_ACTIVE = 67108864
  SW1_ACTIVE = 134217728

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StatusFlags, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
