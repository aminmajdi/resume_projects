# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/MapElement.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class MapElement(genpy.Message):
  _md5sum = "55c1af8e8739f6d8c27cf3cdb4a9a05b"
  _type = "kortex_driver/MapElement"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
MapEvent event
Action action
string name
================================================================================
MSG: kortex_driver/MapEvent

string name
MapEvent_events oneof_events
================================================================================
MSG: kortex_driver/MapEvent_events

SafetyEvent[] safety_event
GpioEvent[] gpio_event
ControllerEvent[] controller_event
================================================================================
MSG: kortex_driver/SafetyEvent

SafetyHandle safety_handle
================================================================================
MSG: kortex_driver/SafetyHandle

uint32 identifier
================================================================================
MSG: kortex_driver/GpioEvent

uint32 input_type
uint32 behavior
uint32 input_identifier
================================================================================
MSG: kortex_driver/ControllerEvent

uint32 input_type
uint32 behavior
uint32 input_identifier
================================================================================
MSG: kortex_driver/Action

ActionHandle handle
string name
string application_data
Action_action_parameters oneof_action_parameters
================================================================================
MSG: kortex_driver/ActionHandle

uint32 identifier
uint32 action_type
uint32 permission
================================================================================
MSG: kortex_driver/Action_action_parameters

TwistCommand[] send_twist_command
WrenchCommand[] send_wrench_command
Base_JointSpeeds[] send_joint_speeds
ConstrainedPose[] reach_pose
ConstrainedJointAngles[] reach_joint_angles
uint32[] toggle_admittance_mode
Snapshot[] snapshot
SwitchControlMapping[] switch_control_mapping
uint32[] navigate_joints
uint32[] navigate_mappings
ChangeTwist[] change_twist
ChangeJointSpeeds[] change_joint_speeds
ChangeWrench[] change_wrench
EmergencyStop[] apply_emergency_stop
Faults[] clear_faults
Delay[] delay
ActionHandle[] execute_action
GripperCommand[] send_gripper_command
Base_Stop[] stop_action
PreComputedJointTrajectory[] play_pre_computed_trajectory
================================================================================
MSG: kortex_driver/TwistCommand

uint32 reference_frame
Twist twist
uint32 duration
================================================================================
MSG: kortex_driver/Twist

float32 linear_x
float32 linear_y
float32 linear_z
float32 angular_x
float32 angular_y
float32 angular_z
================================================================================
MSG: kortex_driver/WrenchCommand

uint32 reference_frame
uint32 mode
Wrench wrench
uint32 duration
================================================================================
MSG: kortex_driver/Wrench

float32 force_x
float32 force_y
float32 force_z
float32 torque_x
float32 torque_y
float32 torque_z
================================================================================
MSG: kortex_driver/Base_JointSpeeds

JointSpeed[] joint_speeds
uint32 duration
================================================================================
MSG: kortex_driver/JointSpeed

uint32 joint_identifier
float32 value
uint32 duration
================================================================================
MSG: kortex_driver/ConstrainedPose

Pose target_pose
CartesianTrajectoryConstraint constraint
================================================================================
MSG: kortex_driver/Pose

float32 x
float32 y
float32 z
float32 theta_x
float32 theta_y
float32 theta_z
================================================================================
MSG: kortex_driver/CartesianTrajectoryConstraint

CartesianTrajectoryConstraint_type oneof_type
================================================================================
MSG: kortex_driver/CartesianTrajectoryConstraint_type

CartesianSpeed[] speed
uint32[] duration
================================================================================
MSG: kortex_driver/CartesianSpeed

float32 translation
float32 orientation
================================================================================
MSG: kortex_driver/ConstrainedJointAngles

JointAngles joint_angles
JointTrajectoryConstraint constraint
================================================================================
MSG: kortex_driver/JointAngles

JointAngle[] joint_angles
================================================================================
MSG: kortex_driver/JointAngle

uint32 joint_identifier
float32 value
================================================================================
MSG: kortex_driver/JointTrajectoryConstraint

uint32 type
float32 value
================================================================================
MSG: kortex_driver/Snapshot

uint32 snapshot_type
================================================================================
MSG: kortex_driver/SwitchControlMapping

uint32 controller_identifier
MapGroupHandle map_group_handle
MapHandle map_handle
================================================================================
MSG: kortex_driver/MapGroupHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/MapHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/ChangeTwist

float32 linear
float32 angular
================================================================================
MSG: kortex_driver/ChangeJointSpeeds

Base_JointSpeeds joint_speeds
================================================================================
MSG: kortex_driver/ChangeWrench

float32 force
float32 torque
================================================================================
MSG: kortex_driver/EmergencyStop

================================================================================
MSG: kortex_driver/Faults

================================================================================
MSG: kortex_driver/Delay

uint32 duration
================================================================================
MSG: kortex_driver/GripperCommand

uint32 mode
Gripper gripper
uint32 duration
================================================================================
MSG: kortex_driver/Gripper

Finger[] finger
================================================================================
MSG: kortex_driver/Finger

uint32 finger_identifier
float32 value
================================================================================
MSG: kortex_driver/Base_Stop

================================================================================
MSG: kortex_driver/PreComputedJointTrajectory

uint32 mode
PreComputedJointTrajectoryElement[] trajectory_elements
================================================================================
MSG: kortex_driver/PreComputedJointTrajectoryElement

float32[] joint_angles
float32[] joint_speeds
float32[] joint_accelerations
float32 time_from_start"""
  __slots__ = ['event','action','name']
  _slot_types = ['kortex_driver/MapEvent','kortex_driver/Action','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       event,action,name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapElement, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.event is None:
        self.event = kortex_driver.msg.MapEvent()
      if self.action is None:
        self.action = kortex_driver.msg.Action()
      if self.name is None:
        self.name = ''
    else:
      self.event = kortex_driver.msg.MapEvent()
      self.action = kortex_driver.msg.Action()
      self.name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.event.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.event.oneof_events.safety_event)
      buff.write(_struct_I.pack(length))
      for val1 in self.event.oneof_events.safety_event:
        _v1 = val1.safety_handle
        _x = _v1.identifier
        buff.write(_get_struct_I().pack(_x))
      length = len(self.event.oneof_events.gpio_event)
      buff.write(_struct_I.pack(length))
      for val1 in self.event.oneof_events.gpio_event:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.input_type, _x.behavior, _x.input_identifier))
      length = len(self.event.oneof_events.controller_event)
      buff.write(_struct_I.pack(length))
      for val1 in self.event.oneof_events.controller_event:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.input_type, _x.behavior, _x.input_identifier))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action.handle.identifier, _x.action.handle.action_type, _x.action.handle.permission))
      _x = self.action.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action.application_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action.oneof_action_parameters.send_twist_command)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.send_twist_command:
        _x = val1.reference_frame
        buff.write(_get_struct_I().pack(_x))
        _v2 = val1.twist
        _x = _v2
        buff.write(_get_struct_6f().pack(_x.linear_x, _x.linear_y, _x.linear_z, _x.angular_x, _x.angular_y, _x.angular_z))
        _x = val1.duration
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.send_wrench_command)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.send_wrench_command:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.reference_frame, _x.mode))
        _v3 = val1.wrench
        _x = _v3
        buff.write(_get_struct_6f().pack(_x.force_x, _x.force_y, _x.force_z, _x.torque_x, _x.torque_y, _x.torque_z))
        _x = val1.duration
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.send_joint_speeds)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.send_joint_speeds:
        length = len(val1.joint_speeds)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_speeds:
          _x = val2
          buff.write(_get_struct_IfI().pack(_x.joint_identifier, _x.value, _x.duration))
        _x = val1.duration
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.reach_pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.reach_pose:
        _v4 = val1.target_pose
        _x = _v4
        buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z))
        _v5 = val1.constraint
        _v6 = _v5.oneof_type
        length = len(_v6.speed)
        buff.write(_struct_I.pack(length))
        for val4 in _v6.speed:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.translation, _x.orientation))
        length = len(_v6.duration)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v6.duration))
      length = len(self.action.oneof_action_parameters.reach_joint_angles)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.reach_joint_angles:
        _v7 = val1.joint_angles
        length = len(_v7.joint_angles)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.joint_angles:
          _x = val3
          buff.write(_get_struct_If().pack(_x.joint_identifier, _x.value))
        _v8 = val1.constraint
        _x = _v8
        buff.write(_get_struct_If().pack(_x.type, _x.value))
      length = len(self.action.oneof_action_parameters.toggle_admittance_mode)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.action.oneof_action_parameters.toggle_admittance_mode))
      length = len(self.action.oneof_action_parameters.snapshot)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.snapshot:
        _x = val1.snapshot_type
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.switch_control_mapping)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.switch_control_mapping:
        _x = val1.controller_identifier
        buff.write(_get_struct_I().pack(_x))
        _v9 = val1.map_group_handle
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
        _v10 = val1.map_handle
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.action.oneof_action_parameters.navigate_joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.action.oneof_action_parameters.navigate_joints))
      length = len(self.action.oneof_action_parameters.navigate_mappings)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.action.oneof_action_parameters.navigate_mappings))
      length = len(self.action.oneof_action_parameters.change_twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.change_twist:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.linear, _x.angular))
      length = len(self.action.oneof_action_parameters.change_joint_speeds)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.change_joint_speeds:
        _v11 = val1.joint_speeds
        length = len(_v11.joint_speeds)
        buff.write(_struct_I.pack(length))
        for val3 in _v11.joint_speeds:
          _x = val3
          buff.write(_get_struct_IfI().pack(_x.joint_identifier, _x.value, _x.duration))
        _x = _v11.duration
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.change_wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.change_wrench:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.force, _x.torque))
      length = len(self.action.oneof_action_parameters.apply_emergency_stop)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.apply_emergency_stop:
        pass
      length = len(self.action.oneof_action_parameters.clear_faults)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.clear_faults:
        pass
      length = len(self.action.oneof_action_parameters.delay)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.delay:
        _x = val1.duration
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.execute_action)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.execute_action:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.identifier, _x.action_type, _x.permission))
      length = len(self.action.oneof_action_parameters.send_gripper_command)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.send_gripper_command:
        _x = val1.mode
        buff.write(_get_struct_I().pack(_x))
        _v12 = val1.gripper
        length = len(_v12.finger)
        buff.write(_struct_I.pack(length))
        for val3 in _v12.finger:
          _x = val3
          buff.write(_get_struct_If().pack(_x.finger_identifier, _x.value))
        _x = val1.duration
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.stop_action)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.stop_action:
        pass
      length = len(self.action.oneof_action_parameters.play_pre_computed_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.play_pre_computed_trajectory:
        _x = val1.mode
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.trajectory_elements)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory_elements:
          length = len(val2.joint_angles)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.joint_angles))
          length = len(val2.joint_speeds)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.joint_speeds))
          length = len(val2.joint_accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.joint_accelerations))
          _x = val2.time_from_start
          buff.write(_get_struct_f().pack(_x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.event is None:
        self.event = kortex_driver.msg.MapEvent()
      if self.action is None:
        self.action = kortex_driver.msg.Action()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.event.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.event.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.event.oneof_events.safety_event = []
      for i in range(0, length):
        val1 = kortex_driver.msg.SafetyEvent()
        _v13 = val1.safety_handle
        start = end
        end += 4
        (_v13.identifier,) = _get_struct_I().unpack(str[start:end])
        self.event.oneof_events.safety_event.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.event.oneof_events.gpio_event = []
      for i in range(0, length):
        val1 = kortex_driver.msg.GpioEvent()
        _x = val1
        start = end
        end += 12
        (_x.input_type, _x.behavior, _x.input_identifier,) = _get_struct_3I().unpack(str[start:end])
        self.event.oneof_events.gpio_event.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.event.oneof_events.controller_event = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ControllerEvent()
        _x = val1
        start = end
        end += 12
        (_x.input_type, _x.behavior, _x.input_identifier,) = _get_struct_3I().unpack(str[start:end])
        self.event.oneof_events.controller_event.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action.handle.identifier, _x.action.handle.action_type, _x.action.handle.permission,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action.application_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action.application_data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.send_twist_command = []
      for i in range(0, length):
        val1 = kortex_driver.msg.TwistCommand()
        start = end
        end += 4
        (val1.reference_frame,) = _get_struct_I().unpack(str[start:end])
        _v14 = val1.twist
        _x = _v14
        start = end
        end += 24
        (_x.linear_x, _x.linear_y, _x.linear_z, _x.angular_x, _x.angular_y, _x.angular_z,) = _get_struct_6f().unpack(str[start:end])
        start = end
        end += 4
        (val1.duration,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.send_twist_command.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.send_wrench_command = []
      for i in range(0, length):
        val1 = kortex_driver.msg.WrenchCommand()
        _x = val1
        start = end
        end += 8
        (_x.reference_frame, _x.mode,) = _get_struct_2I().unpack(str[start:end])
        _v15 = val1.wrench
        _x = _v15
        start = end
        end += 24
        (_x.force_x, _x.force_y, _x.force_z, _x.torque_x, _x.torque_y, _x.torque_z,) = _get_struct_6f().unpack(str[start:end])
        start = end
        end += 4
        (val1.duration,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.send_wrench_command.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.send_joint_speeds = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Base_JointSpeeds()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_speeds = []
        for i in range(0, length):
          val2 = kortex_driver.msg.JointSpeed()
          _x = val2
          start = end
          end += 12
          (_x.joint_identifier, _x.value, _x.duration,) = _get_struct_IfI().unpack(str[start:end])
          val1.joint_speeds.append(val2)
        start = end
        end += 4
        (val1.duration,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.send_joint_speeds.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.reach_pose = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ConstrainedPose()
        _v16 = val1.target_pose
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z,) = _get_struct_6f().unpack(str[start:end])
        _v17 = val1.constraint
        _v18 = _v17.oneof_type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v18.speed = []
        for i in range(0, length):
          val4 = kortex_driver.msg.CartesianSpeed()
          _x = val4
          start = end
          end += 8
          (_x.translation, _x.orientation,) = _get_struct_2f().unpack(str[start:end])
          _v18.speed.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v18.duration = s.unpack(str[start:end])
        self.action.oneof_action_parameters.reach_pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.reach_joint_angles = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ConstrainedJointAngles()
        _v19 = val1.joint_angles
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v19.joint_angles = []
        for i in range(0, length):
          val3 = kortex_driver.msg.JointAngle()
          _x = val3
          start = end
          end += 8
          (_x.joint_identifier, _x.value,) = _get_struct_If().unpack(str[start:end])
          _v19.joint_angles.append(val3)
        _v20 = val1.constraint
        _x = _v20
        start = end
        end += 8
        (_x.type, _x.value,) = _get_struct_If().unpack(str[start:end])
        self.action.oneof_action_parameters.reach_joint_angles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action.oneof_action_parameters.toggle_admittance_mode = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.snapshot = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Snapshot()
        start = end
        end += 4
        (val1.snapshot_type,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.snapshot.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.switch_control_mapping = []
      for i in range(0, length):
        val1 = kortex_driver.msg.SwitchControlMapping()
        start = end
        end += 4
        (val1.controller_identifier,) = _get_struct_I().unpack(str[start:end])
        _v21 = val1.map_group_handle
        _x = _v21
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        _v22 = val1.map_handle
        _x = _v22
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.action.oneof_action_parameters.switch_control_mapping.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action.oneof_action_parameters.navigate_joints = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action.oneof_action_parameters.navigate_mappings = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.change_twist = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ChangeTwist()
        _x = val1
        start = end
        end += 8
        (_x.linear, _x.angular,) = _get_struct_2f().unpack(str[start:end])
        self.action.oneof_action_parameters.change_twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.change_joint_speeds = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ChangeJointSpeeds()
        _v23 = val1.joint_speeds
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v23.joint_speeds = []
        for i in range(0, length):
          val3 = kortex_driver.msg.JointSpeed()
          _x = val3
          start = end
          end += 12
          (_x.joint_identifier, _x.value, _x.duration,) = _get_struct_IfI().unpack(str[start:end])
          _v23.joint_speeds.append(val3)
        start = end
        end += 4
        (_v23.duration,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.change_joint_speeds.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.change_wrench = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ChangeWrench()
        _x = val1
        start = end
        end += 8
        (_x.force, _x.torque,) = _get_struct_2f().unpack(str[start:end])
        self.action.oneof_action_parameters.change_wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.apply_emergency_stop = []
      for i in range(0, length):
        val1 = kortex_driver.msg.EmergencyStop()
        self.action.oneof_action_parameters.apply_emergency_stop.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.clear_faults = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Faults()
        self.action.oneof_action_parameters.clear_faults.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.delay = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Delay()
        start = end
        end += 4
        (val1.duration,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.delay.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.execute_action = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ActionHandle()
        _x = val1
        start = end
        end += 12
        (_x.identifier, _x.action_type, _x.permission,) = _get_struct_3I().unpack(str[start:end])
        self.action.oneof_action_parameters.execute_action.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.send_gripper_command = []
      for i in range(0, length):
        val1 = kortex_driver.msg.GripperCommand()
        start = end
        end += 4
        (val1.mode,) = _get_struct_I().unpack(str[start:end])
        _v24 = val1.gripper
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v24.finger = []
        for i in range(0, length):
          val3 = kortex_driver.msg.Finger()
          _x = val3
          start = end
          end += 8
          (_x.finger_identifier, _x.value,) = _get_struct_If().unpack(str[start:end])
          _v24.finger.append(val3)
        start = end
        end += 4
        (val1.duration,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.send_gripper_command.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.stop_action = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Base_Stop()
        self.action.oneof_action_parameters.stop_action.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.play_pre_computed_trajectory = []
      for i in range(0, length):
        val1 = kortex_driver.msg.PreComputedJointTrajectory()
        start = end
        end += 4
        (val1.mode,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory_elements = []
        for i in range(0, length):
          val2 = kortex_driver.msg.PreComputedJointTrajectoryElement()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.joint_angles = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.joint_speeds = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.joint_accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (val2.time_from_start,) = _get_struct_f().unpack(str[start:end])
          val1.trajectory_elements.append(val2)
        self.action.oneof_action_parameters.play_pre_computed_trajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.event.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.event.oneof_events.safety_event)
      buff.write(_struct_I.pack(length))
      for val1 in self.event.oneof_events.safety_event:
        _v25 = val1.safety_handle
        _x = _v25.identifier
        buff.write(_get_struct_I().pack(_x))
      length = len(self.event.oneof_events.gpio_event)
      buff.write(_struct_I.pack(length))
      for val1 in self.event.oneof_events.gpio_event:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.input_type, _x.behavior, _x.input_identifier))
      length = len(self.event.oneof_events.controller_event)
      buff.write(_struct_I.pack(length))
      for val1 in self.event.oneof_events.controller_event:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.input_type, _x.behavior, _x.input_identifier))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action.handle.identifier, _x.action.handle.action_type, _x.action.handle.permission))
      _x = self.action.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action.application_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action.oneof_action_parameters.send_twist_command)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.send_twist_command:
        _x = val1.reference_frame
        buff.write(_get_struct_I().pack(_x))
        _v26 = val1.twist
        _x = _v26
        buff.write(_get_struct_6f().pack(_x.linear_x, _x.linear_y, _x.linear_z, _x.angular_x, _x.angular_y, _x.angular_z))
        _x = val1.duration
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.send_wrench_command)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.send_wrench_command:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.reference_frame, _x.mode))
        _v27 = val1.wrench
        _x = _v27
        buff.write(_get_struct_6f().pack(_x.force_x, _x.force_y, _x.force_z, _x.torque_x, _x.torque_y, _x.torque_z))
        _x = val1.duration
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.send_joint_speeds)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.send_joint_speeds:
        length = len(val1.joint_speeds)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_speeds:
          _x = val2
          buff.write(_get_struct_IfI().pack(_x.joint_identifier, _x.value, _x.duration))
        _x = val1.duration
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.reach_pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.reach_pose:
        _v28 = val1.target_pose
        _x = _v28
        buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z))
        _v29 = val1.constraint
        _v30 = _v29.oneof_type
        length = len(_v30.speed)
        buff.write(_struct_I.pack(length))
        for val4 in _v30.speed:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.translation, _x.orientation))
        length = len(_v30.duration)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v30.duration.tostring())
      length = len(self.action.oneof_action_parameters.reach_joint_angles)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.reach_joint_angles:
        _v31 = val1.joint_angles
        length = len(_v31.joint_angles)
        buff.write(_struct_I.pack(length))
        for val3 in _v31.joint_angles:
          _x = val3
          buff.write(_get_struct_If().pack(_x.joint_identifier, _x.value))
        _v32 = val1.constraint
        _x = _v32
        buff.write(_get_struct_If().pack(_x.type, _x.value))
      length = len(self.action.oneof_action_parameters.toggle_admittance_mode)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.action.oneof_action_parameters.toggle_admittance_mode.tostring())
      length = len(self.action.oneof_action_parameters.snapshot)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.snapshot:
        _x = val1.snapshot_type
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.switch_control_mapping)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.switch_control_mapping:
        _x = val1.controller_identifier
        buff.write(_get_struct_I().pack(_x))
        _v33 = val1.map_group_handle
        _x = _v33
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
        _v34 = val1.map_handle
        _x = _v34
        buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
      length = len(self.action.oneof_action_parameters.navigate_joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.action.oneof_action_parameters.navigate_joints.tostring())
      length = len(self.action.oneof_action_parameters.navigate_mappings)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.action.oneof_action_parameters.navigate_mappings.tostring())
      length = len(self.action.oneof_action_parameters.change_twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.change_twist:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.linear, _x.angular))
      length = len(self.action.oneof_action_parameters.change_joint_speeds)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.change_joint_speeds:
        _v35 = val1.joint_speeds
        length = len(_v35.joint_speeds)
        buff.write(_struct_I.pack(length))
        for val3 in _v35.joint_speeds:
          _x = val3
          buff.write(_get_struct_IfI().pack(_x.joint_identifier, _x.value, _x.duration))
        _x = _v35.duration
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.change_wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.change_wrench:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.force, _x.torque))
      length = len(self.action.oneof_action_parameters.apply_emergency_stop)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.apply_emergency_stop:
        pass
      length = len(self.action.oneof_action_parameters.clear_faults)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.clear_faults:
        pass
      length = len(self.action.oneof_action_parameters.delay)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.delay:
        _x = val1.duration
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.execute_action)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.execute_action:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.identifier, _x.action_type, _x.permission))
      length = len(self.action.oneof_action_parameters.send_gripper_command)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.send_gripper_command:
        _x = val1.mode
        buff.write(_get_struct_I().pack(_x))
        _v36 = val1.gripper
        length = len(_v36.finger)
        buff.write(_struct_I.pack(length))
        for val3 in _v36.finger:
          _x = val3
          buff.write(_get_struct_If().pack(_x.finger_identifier, _x.value))
        _x = val1.duration
        buff.write(_get_struct_I().pack(_x))
      length = len(self.action.oneof_action_parameters.stop_action)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.stop_action:
        pass
      length = len(self.action.oneof_action_parameters.play_pre_computed_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.oneof_action_parameters.play_pre_computed_trajectory:
        _x = val1.mode
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.trajectory_elements)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory_elements:
          length = len(val2.joint_angles)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.joint_angles.tostring())
          length = len(val2.joint_speeds)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.joint_speeds.tostring())
          length = len(val2.joint_accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.joint_accelerations.tostring())
          _x = val2.time_from_start
          buff.write(_get_struct_f().pack(_x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.event is None:
        self.event = kortex_driver.msg.MapEvent()
      if self.action is None:
        self.action = kortex_driver.msg.Action()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.event.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.event.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.event.oneof_events.safety_event = []
      for i in range(0, length):
        val1 = kortex_driver.msg.SafetyEvent()
        _v37 = val1.safety_handle
        start = end
        end += 4
        (_v37.identifier,) = _get_struct_I().unpack(str[start:end])
        self.event.oneof_events.safety_event.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.event.oneof_events.gpio_event = []
      for i in range(0, length):
        val1 = kortex_driver.msg.GpioEvent()
        _x = val1
        start = end
        end += 12
        (_x.input_type, _x.behavior, _x.input_identifier,) = _get_struct_3I().unpack(str[start:end])
        self.event.oneof_events.gpio_event.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.event.oneof_events.controller_event = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ControllerEvent()
        _x = val1
        start = end
        end += 12
        (_x.input_type, _x.behavior, _x.input_identifier,) = _get_struct_3I().unpack(str[start:end])
        self.event.oneof_events.controller_event.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action.handle.identifier, _x.action.handle.action_type, _x.action.handle.permission,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action.application_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action.application_data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.send_twist_command = []
      for i in range(0, length):
        val1 = kortex_driver.msg.TwistCommand()
        start = end
        end += 4
        (val1.reference_frame,) = _get_struct_I().unpack(str[start:end])
        _v38 = val1.twist
        _x = _v38
        start = end
        end += 24
        (_x.linear_x, _x.linear_y, _x.linear_z, _x.angular_x, _x.angular_y, _x.angular_z,) = _get_struct_6f().unpack(str[start:end])
        start = end
        end += 4
        (val1.duration,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.send_twist_command.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.send_wrench_command = []
      for i in range(0, length):
        val1 = kortex_driver.msg.WrenchCommand()
        _x = val1
        start = end
        end += 8
        (_x.reference_frame, _x.mode,) = _get_struct_2I().unpack(str[start:end])
        _v39 = val1.wrench
        _x = _v39
        start = end
        end += 24
        (_x.force_x, _x.force_y, _x.force_z, _x.torque_x, _x.torque_y, _x.torque_z,) = _get_struct_6f().unpack(str[start:end])
        start = end
        end += 4
        (val1.duration,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.send_wrench_command.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.send_joint_speeds = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Base_JointSpeeds()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_speeds = []
        for i in range(0, length):
          val2 = kortex_driver.msg.JointSpeed()
          _x = val2
          start = end
          end += 12
          (_x.joint_identifier, _x.value, _x.duration,) = _get_struct_IfI().unpack(str[start:end])
          val1.joint_speeds.append(val2)
        start = end
        end += 4
        (val1.duration,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.send_joint_speeds.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.reach_pose = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ConstrainedPose()
        _v40 = val1.target_pose
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z,) = _get_struct_6f().unpack(str[start:end])
        _v41 = val1.constraint
        _v42 = _v41.oneof_type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v42.speed = []
        for i in range(0, length):
          val4 = kortex_driver.msg.CartesianSpeed()
          _x = val4
          start = end
          end += 8
          (_x.translation, _x.orientation,) = _get_struct_2f().unpack(str[start:end])
          _v42.speed.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v42.duration = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.action.oneof_action_parameters.reach_pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.reach_joint_angles = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ConstrainedJointAngles()
        _v43 = val1.joint_angles
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v43.joint_angles = []
        for i in range(0, length):
          val3 = kortex_driver.msg.JointAngle()
          _x = val3
          start = end
          end += 8
          (_x.joint_identifier, _x.value,) = _get_struct_If().unpack(str[start:end])
          _v43.joint_angles.append(val3)
        _v44 = val1.constraint
        _x = _v44
        start = end
        end += 8
        (_x.type, _x.value,) = _get_struct_If().unpack(str[start:end])
        self.action.oneof_action_parameters.reach_joint_angles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action.oneof_action_parameters.toggle_admittance_mode = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.snapshot = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Snapshot()
        start = end
        end += 4
        (val1.snapshot_type,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.snapshot.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.switch_control_mapping = []
      for i in range(0, length):
        val1 = kortex_driver.msg.SwitchControlMapping()
        start = end
        end += 4
        (val1.controller_identifier,) = _get_struct_I().unpack(str[start:end])
        _v45 = val1.map_group_handle
        _x = _v45
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        _v46 = val1.map_handle
        _x = _v46
        start = end
        end += 8
        (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
        self.action.oneof_action_parameters.switch_control_mapping.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action.oneof_action_parameters.navigate_joints = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action.oneof_action_parameters.navigate_mappings = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.change_twist = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ChangeTwist()
        _x = val1
        start = end
        end += 8
        (_x.linear, _x.angular,) = _get_struct_2f().unpack(str[start:end])
        self.action.oneof_action_parameters.change_twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.change_joint_speeds = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ChangeJointSpeeds()
        _v47 = val1.joint_speeds
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.joint_speeds = []
        for i in range(0, length):
          val3 = kortex_driver.msg.JointSpeed()
          _x = val3
          start = end
          end += 12
          (_x.joint_identifier, _x.value, _x.duration,) = _get_struct_IfI().unpack(str[start:end])
          _v47.joint_speeds.append(val3)
        start = end
        end += 4
        (_v47.duration,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.change_joint_speeds.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.change_wrench = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ChangeWrench()
        _x = val1
        start = end
        end += 8
        (_x.force, _x.torque,) = _get_struct_2f().unpack(str[start:end])
        self.action.oneof_action_parameters.change_wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.apply_emergency_stop = []
      for i in range(0, length):
        val1 = kortex_driver.msg.EmergencyStop()
        self.action.oneof_action_parameters.apply_emergency_stop.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.clear_faults = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Faults()
        self.action.oneof_action_parameters.clear_faults.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.delay = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Delay()
        start = end
        end += 4
        (val1.duration,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.delay.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.execute_action = []
      for i in range(0, length):
        val1 = kortex_driver.msg.ActionHandle()
        _x = val1
        start = end
        end += 12
        (_x.identifier, _x.action_type, _x.permission,) = _get_struct_3I().unpack(str[start:end])
        self.action.oneof_action_parameters.execute_action.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.send_gripper_command = []
      for i in range(0, length):
        val1 = kortex_driver.msg.GripperCommand()
        start = end
        end += 4
        (val1.mode,) = _get_struct_I().unpack(str[start:end])
        _v48 = val1.gripper
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v48.finger = []
        for i in range(0, length):
          val3 = kortex_driver.msg.Finger()
          _x = val3
          start = end
          end += 8
          (_x.finger_identifier, _x.value,) = _get_struct_If().unpack(str[start:end])
          _v48.finger.append(val3)
        start = end
        end += 4
        (val1.duration,) = _get_struct_I().unpack(str[start:end])
        self.action.oneof_action_parameters.send_gripper_command.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.stop_action = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Base_Stop()
        self.action.oneof_action_parameters.stop_action.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.oneof_action_parameters.play_pre_computed_trajectory = []
      for i in range(0, length):
        val1 = kortex_driver.msg.PreComputedJointTrajectory()
        start = end
        end += 4
        (val1.mode,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory_elements = []
        for i in range(0, length):
          val2 = kortex_driver.msg.PreComputedJointTrajectoryElement()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.joint_angles = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.joint_speeds = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.joint_accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (val2.time_from_start,) = _get_struct_f().unpack(str[start:end])
          val1.trajectory_elements.append(val2)
        self.action.oneof_action_parameters.play_pre_computed_trajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
_struct_IfI = None
def _get_struct_IfI():
    global _struct_IfI
    if _struct_IfI is None:
        _struct_IfI = struct.Struct("<IfI")
    return _struct_IfI
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
