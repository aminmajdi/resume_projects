// Generated by gencpp from file kortex_driver/PasswordChange.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_PASSWORDCHANGE_H
#define KORTEX_DRIVER_MESSAGE_PASSWORDCHANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/UserProfileHandle.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct PasswordChange_
{
  typedef PasswordChange_<ContainerAllocator> Type;

  PasswordChange_()
    : handle()
    , old_password()
    , new_password()  {
    }
  PasswordChange_(const ContainerAllocator& _alloc)
    : handle(_alloc)
    , old_password(_alloc)
    , new_password(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kortex_driver::UserProfileHandle_<ContainerAllocator>  _handle_type;
  _handle_type handle;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _old_password_type;
  _old_password_type old_password;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _new_password_type;
  _new_password_type new_password;





  typedef boost::shared_ptr< ::kortex_driver::PasswordChange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::PasswordChange_<ContainerAllocator> const> ConstPtr;

}; // struct PasswordChange_

typedef ::kortex_driver::PasswordChange_<std::allocator<void> > PasswordChange;

typedef boost::shared_ptr< ::kortex_driver::PasswordChange > PasswordChangePtr;
typedef boost::shared_ptr< ::kortex_driver::PasswordChange const> PasswordChangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::PasswordChange_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::PasswordChange_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::PasswordChange_<ContainerAllocator1> & lhs, const ::kortex_driver::PasswordChange_<ContainerAllocator2> & rhs)
{
  return lhs.handle == rhs.handle &&
    lhs.old_password == rhs.old_password &&
    lhs.new_password == rhs.new_password;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::PasswordChange_<ContainerAllocator1> & lhs, const ::kortex_driver::PasswordChange_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::PasswordChange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::PasswordChange_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::PasswordChange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::PasswordChange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::PasswordChange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::PasswordChange_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::PasswordChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75d13d1936094613c5e6bc629ee347b3";
  }

  static const char* value(const ::kortex_driver::PasswordChange_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75d13d1936094613ULL;
  static const uint64_t static_value2 = 0xc5e6bc629ee347b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::PasswordChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/PasswordChange";
  }

  static const char* value(const ::kortex_driver::PasswordChange_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::PasswordChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"UserProfileHandle handle\n"
"string old_password\n"
"string new_password\n"
"================================================================================\n"
"MSG: kortex_driver/UserProfileHandle\n"
"\n"
"uint32 identifier\n"
"uint32 permission\n"
;
  }

  static const char* value(const ::kortex_driver::PasswordChange_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::PasswordChange_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.handle);
      stream.next(m.old_password);
      stream.next(m.new_password);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PasswordChange_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::PasswordChange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::PasswordChange_<ContainerAllocator>& v)
  {
    s << indent << "handle: ";
    s << std::endl;
    Printer< ::kortex_driver::UserProfileHandle_<ContainerAllocator> >::stream(s, indent + "  ", v.handle);
    s << indent << "old_password: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.old_password);
    s << indent << "new_password: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.new_password);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_PASSWORDCHANGE_H
