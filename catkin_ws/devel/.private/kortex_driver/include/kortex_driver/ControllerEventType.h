// Generated by gencpp from file kortex_driver/ControllerEventType.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_CONTROLLEREVENTTYPE_H
#define KORTEX_DRIVER_MESSAGE_CONTROLLEREVENTTYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct ControllerEventType_
{
  typedef ControllerEventType_<ContainerAllocator> Type;

  ControllerEventType_()
    {
    }
  ControllerEventType_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSPECIFIED_CONTROLLER_EVENT)
  #undef UNSPECIFIED_CONTROLLER_EVENT
#endif
#if defined(_WIN32) && defined(CONTROLLER_DISCONNECTED)
  #undef CONTROLLER_DISCONNECTED
#endif
#if defined(_WIN32) && defined(CONTROLLER_CONNECTED)
  #undef CONTROLLER_CONNECTED
#endif

  enum {
    UNSPECIFIED_CONTROLLER_EVENT = 0u,
    CONTROLLER_DISCONNECTED = 1u,
    CONTROLLER_CONNECTED = 2u,
  };


  typedef boost::shared_ptr< ::kortex_driver::ControllerEventType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::ControllerEventType_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerEventType_

typedef ::kortex_driver::ControllerEventType_<std::allocator<void> > ControllerEventType;

typedef boost::shared_ptr< ::kortex_driver::ControllerEventType > ControllerEventTypePtr;
typedef boost::shared_ptr< ::kortex_driver::ControllerEventType const> ControllerEventTypeConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::ControllerEventType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::ControllerEventType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ControllerEventType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ControllerEventType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ControllerEventType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ControllerEventType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ControllerEventType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ControllerEventType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::ControllerEventType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4bffb5259aaf49860456ce038da78405";
  }

  static const char* value(const ::kortex_driver::ControllerEventType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4bffb5259aaf4986ULL;
  static const uint64_t static_value2 = 0x0456ce038da78405ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::ControllerEventType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/ControllerEventType";
  }

  static const char* value(const ::kortex_driver::ControllerEventType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::ControllerEventType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNSPECIFIED_CONTROLLER_EVENT = 0\n"
"\n"
"uint32 CONTROLLER_DISCONNECTED = 1\n"
"\n"
"uint32 CONTROLLER_CONNECTED = 2\n"
;
  }

  static const char* value(const ::kortex_driver::ControllerEventType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::ControllerEventType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerEventType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::ControllerEventType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::ControllerEventType_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_CONTROLLEREVENTTYPE_H
