# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/WrenchCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class WrenchCommand(genpy.Message):
  _md5sum = "76c8b85ff99edd42232a407e2d24c818"
  _type = "kortex_driver/WrenchCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint32 reference_frame
uint32 mode
Wrench wrench
uint32 duration
================================================================================
MSG: kortex_driver/Wrench

float32 force_x
float32 force_y
float32 force_z
float32 torque_x
float32 torque_y
float32 torque_z"""
  __slots__ = ['reference_frame','mode','wrench','duration']
  _slot_types = ['uint32','uint32','kortex_driver/Wrench','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reference_frame,mode,wrench,duration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WrenchCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.reference_frame is None:
        self.reference_frame = 0
      if self.mode is None:
        self.mode = 0
      if self.wrench is None:
        self.wrench = kortex_driver.msg.Wrench()
      if self.duration is None:
        self.duration = 0
    else:
      self.reference_frame = 0
      self.mode = 0
      self.wrench = kortex_driver.msg.Wrench()
      self.duration = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I6fI().pack(_x.reference_frame, _x.mode, _x.wrench.force_x, _x.wrench.force_y, _x.wrench.force_z, _x.wrench.torque_x, _x.wrench.torque_y, _x.wrench.torque_z, _x.duration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.wrench is None:
        self.wrench = kortex_driver.msg.Wrench()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.reference_frame, _x.mode, _x.wrench.force_x, _x.wrench.force_y, _x.wrench.force_z, _x.wrench.torque_x, _x.wrench.torque_y, _x.wrench.torque_z, _x.duration,) = _get_struct_2I6fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I6fI().pack(_x.reference_frame, _x.mode, _x.wrench.force_x, _x.wrench.force_y, _x.wrench.force_z, _x.wrench.torque_x, _x.wrench.torque_y, _x.wrench.torque_z, _x.duration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.wrench is None:
        self.wrench = kortex_driver.msg.Wrench()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.reference_frame, _x.mode, _x.wrench.force_x, _x.wrench.force_y, _x.wrench.force_z, _x.wrench.torque_x, _x.wrench.torque_y, _x.wrench.torque_z, _x.duration,) = _get_struct_2I6fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I6fI = None
def _get_struct_2I6fI():
    global _struct_2I6fI
    if _struct_2I6fI is None:
        _struct_2I6fI = struct.Struct("<2I6fI")
    return _struct_2I6fI
